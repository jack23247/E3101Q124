
Maltagliati_Jacopo_830110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c258  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800c458  0800c458  0001c458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca78  0800ca78  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca78  0800ca78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca80  0800ca80  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca80  0800ca80  0001ca80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca84  0800ca84  0001ca84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ca88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c4c  200001e0  0800cc68  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e2c  0800cc68  00024e2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b013  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000551f  00000000  00000000  0005b221  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029c0  00000000  00000000  00060740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002760  00000000  00000000  00063100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e206  00000000  00000000  00065860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c9e9  00000000  00000000  00093a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001101b5  00000000  00000000  000b044f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c0604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf44  00000000  00000000  001c0680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c440 	.word	0x0800c440

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800c440 	.word	0x0800c440

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <H_LCD_Perform_Tx>:
};

state_t* fsm_state_buffer[2]; // Buffer per l'aggiornamento degli stati
state_t pAc1A, pAc1B, pAc2A, pAc2B, pGyrA, pGyrB, pMagA, pMagB, pPrs; // Stati della FSM

static inline void H_LCD_Perform_Tx(row_t row) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, lcd_tx_buffer, strlen((char const*) lcd_tx_buffer), 1000);
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <H_LCD_Perform_Tx+0x40>)
 80005fc:	f7ff fe20 	bl	8000240 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000608:	4909      	ldr	r1, [pc, #36]	; (8000630 <H_LCD_Perform_Tx+0x40>)
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <H_LCD_Perform_Tx+0x44>)
 800060c:	f005 ff90 	bl	8006530 <HAL_UART_Transmit>
	HAL_Delay(H_LCD_TX_GRACE);
 8000610:	2032      	movs	r0, #50	; 0x32
 8000612:	f002 fc29 	bl	8002e68 <HAL_Delay>
	lcdSetCursor(0, row);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4619      	mov	r1, r3
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fcbc 	bl	8000f98 <lcdSetCursor>
	lcdPrint((char const*) lcd_tx_buffer);
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <H_LCD_Perform_Tx+0x40>)
 8000622:	f000 fcdb 	bl	8000fdc <lcdPrint>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20004c60 	.word	0x20004c60
 8000634:	20004b58 	.word	0x20004b58

08000638 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_T_Reserved */
  Task_T_ReservedHandle = osThreadNew(T_Reserved, NULL, &Task_T_Reserved_attributes);
 800063c:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <MX_FREERTOS_Init+0x98>)
 800063e:	2100      	movs	r1, #0
 8000640:	4824      	ldr	r0, [pc, #144]	; (80006d4 <MX_FREERTOS_Init+0x9c>)
 8000642:	f006 fc85 	bl	8006f50 <osThreadNew>
 8000646:	4602      	mov	r2, r0
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_FREERTOS_Init+0xa0>)
 800064a:	601a      	str	r2, [r3, #0]

  /* creation of Task_M_CalcAll */
  Task_M_CalcAllHandle = osThreadNew(M_CalcAll, NULL, &Task_M_CalcAll_attributes);
 800064c:	4a23      	ldr	r2, [pc, #140]	; (80006dc <MX_FREERTOS_Init+0xa4>)
 800064e:	2100      	movs	r1, #0
 8000650:	4823      	ldr	r0, [pc, #140]	; (80006e0 <MX_FREERTOS_Init+0xa8>)
 8000652:	f006 fc7d 	bl	8006f50 <osThreadNew>
 8000656:	4602      	mov	r2, r0
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_FREERTOS_Init+0xac>)
 800065a:	601a      	str	r2, [r3, #0]

  /* creation of Task_LCD_Disply */
  Task_LCD_DisplyHandle = osThreadNew(LCD_Display, NULL, &Task_LCD_Disply_attributes);
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <MX_FREERTOS_Init+0xb0>)
 800065e:	2100      	movs	r1, #0
 8000660:	4822      	ldr	r0, [pc, #136]	; (80006ec <MX_FREERTOS_Init+0xb4>)
 8000662:	f006 fc75 	bl	8006f50 <osThreadNew>
 8000666:	4602      	mov	r2, r0
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_FREERTOS_Init+0xb8>)
 800066a:	601a      	str	r2, [r3, #0]

  /* creation of Task_LCD_Button */
  Task_LCD_ButtonHandle = osThreadNew(LCD_Button_Readall, NULL, &Task_LCD_Button_attributes);
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_FREERTOS_Init+0xbc>)
 800066e:	2100      	movs	r1, #0
 8000670:	4821      	ldr	r0, [pc, #132]	; (80006f8 <MX_FREERTOS_Init+0xc0>)
 8000672:	f006 fc6d 	bl	8006f50 <osThreadNew>
 8000676:	4602      	mov	r2, r0
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <MX_FREERTOS_Init+0xc4>)
 800067a:	601a      	str	r2, [r3, #0]

  /* creation of Task_XL_GetData */
  Task_XL_GetDataHandle = osThreadNew(XL_GetData, NULL, &Task_XL_GetData_attributes);
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <MX_FREERTOS_Init+0xc8>)
 800067e:	2100      	movs	r1, #0
 8000680:	4820      	ldr	r0, [pc, #128]	; (8000704 <MX_FREERTOS_Init+0xcc>)
 8000682:	f006 fc65 	bl	8006f50 <osThreadNew>
 8000686:	4602      	mov	r2, r0
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <MX_FREERTOS_Init+0xd0>)
 800068a:	601a      	str	r2, [r3, #0]

  /* creation of Task_MG_GetData */
  Task_MG_GetDataHandle = osThreadNew(MG_GetData, NULL, &Task_MG_GetData_attributes);
 800068c:	4a1f      	ldr	r2, [pc, #124]	; (800070c <MX_FREERTOS_Init+0xd4>)
 800068e:	2100      	movs	r1, #0
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <MX_FREERTOS_Init+0xd8>)
 8000692:	f006 fc5d 	bl	8006f50 <osThreadNew>
 8000696:	4602      	mov	r2, r0
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_FREERTOS_Init+0xdc>)
 800069a:	601a      	str	r2, [r3, #0]

  /* creation of Task_B_GetData */
  Task_B_GetDataHandle = osThreadNew(B_GetData, NULL, &Task_B_GetData_attributes);
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <MX_FREERTOS_Init+0xe0>)
 800069e:	2100      	movs	r1, #0
 80006a0:	481e      	ldr	r0, [pc, #120]	; (800071c <MX_FREERTOS_Init+0xe4>)
 80006a2:	f006 fc55 	bl	8006f50 <osThreadNew>
 80006a6:	4602      	mov	r2, r0
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_FREERTOS_Init+0xe8>)
 80006aa:	601a      	str	r2, [r3, #0]

  /* creation of Task_XL2_GetDat */
  Task_XL2_GetDatHandle = osThreadNew(XL2_GetData, NULL, &Task_XL2_GetDat_attributes);
 80006ac:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <MX_FREERTOS_Init+0xec>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <MX_FREERTOS_Init+0xf0>)
 80006b2:	f006 fc4d 	bl	8006f50 <osThreadNew>
 80006b6:	4602      	mov	r2, r0
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_FREERTOS_Init+0xf4>)
 80006ba:	601a      	str	r2, [r3, #0]

  /* creation of Task_G_GetData */
  Task_G_GetDataHandle = osThreadNew(G_GetData, NULL, &Task_G_GetData_attributes);
 80006bc:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <MX_FREERTOS_Init+0xf8>)
 80006be:	2100      	movs	r1, #0
 80006c0:	481c      	ldr	r0, [pc, #112]	; (8000734 <MX_FREERTOS_Init+0xfc>)
 80006c2:	f006 fc45 	bl	8006f50 <osThreadNew>
 80006c6:	4602      	mov	r2, r0
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_FREERTOS_Init+0x100>)
 80006ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	0800c5f8 	.word	0x0800c5f8
 80006d4:	0800073d 	.word	0x0800073d
 80006d8:	20004d88 	.word	0x20004d88
 80006dc:	0800c61c 	.word	0x0800c61c
 80006e0:	08000789 	.word	0x08000789
 80006e4:	20004c4c 	.word	0x20004c4c
 80006e8:	0800c640 	.word	0x0800c640
 80006ec:	08000851 	.word	0x08000851
 80006f0:	20004d0c 	.word	0x20004d0c
 80006f4:	0800c664 	.word	0x0800c664
 80006f8:	08000ba5 	.word	0x08000ba5
 80006fc:	20004b48 	.word	0x20004b48
 8000700:	0800c688 	.word	0x0800c688
 8000704:	08000bc9 	.word	0x08000bc9
 8000708:	20004b54 	.word	0x20004b54
 800070c:	0800c6ac 	.word	0x0800c6ac
 8000710:	08000c29 	.word	0x08000c29
 8000714:	20004cdc 	.word	0x20004cdc
 8000718:	0800c6d0 	.word	0x0800c6d0
 800071c:	08000c89 	.word	0x08000c89
 8000720:	20004b40 	.word	0x20004b40
 8000724:	0800c6f4 	.word	0x0800c6f4
 8000728:	08000cb9 	.word	0x08000cb9
 800072c:	20004da0 	.word	0x20004da0
 8000730:	0800c718 	.word	0x0800c718
 8000734:	08000d19 	.word	0x08000d19
 8000738:	20004d80 	.word	0x20004d80

0800073c <T_Reserved>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_T_Reserved */
void T_Reserved(void *argument)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN T_Reserved */
	// Task riservato (default, inizializzazione)
	HAL_Delay(500);
 8000744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000748:	f002 fb8e 	bl	8002e68 <HAL_Delay>
	sprintf((char*) lcd_tx_buffer, " FreeRTOS * GO! ");
 800074c:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <T_Reserved+0x44>)
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <T_Reserved+0x48>)
 8000750:	4615      	mov	r5, r2
 8000752:	461c      	mov	r4, r3
 8000754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000756:	6028      	str	r0, [r5, #0]
 8000758:	6069      	str	r1, [r5, #4]
 800075a:	60aa      	str	r2, [r5, #8]
 800075c:	60eb      	str	r3, [r5, #12]
 800075e:	7823      	ldrb	r3, [r4, #0]
 8000760:	742b      	strb	r3, [r5, #16]
	H_LCD_Perform_Tx(H_LCD_ROW_TOP);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff ff44 	bl	80005f0 <H_LCD_Perform_Tx>
	HAL_Delay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f002 fb7c 	bl	8002e68 <HAL_Delay>
	vTaskDelete(NULL);
 8000770:	2000      	movs	r0, #0
 8000772:	f007 fc45 	bl	8008000 <vTaskDelete>
  /* USER CODE END T_Reserved */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bdb0      	pop	{r4, r5, r7, pc}
 800077e:	bf00      	nop
 8000780:	20004c60 	.word	0x20004c60
 8000784:	0800c4e8 	.word	0x0800c4e8

08000788 <M_CalcAll>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_M_CalcAll */
void M_CalcAll(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN M_CalcAll */
	/* Infinite loop */
	for (;;) {
		// Acc1
		L_UpdateMean(lsm303agr_acc_x_list);
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <M_CalcAll+0x94>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 feeb 	bl	8002570 <L_UpdateMean>
		L_UpdateMean(lsm303agr_acc_y_list);
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <M_CalcAll+0x98>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fee6 	bl	8002570 <L_UpdateMean>
		L_UpdateMean(lsm303agr_acc_z_list);
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <M_CalcAll+0x9c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fee1 	bl	8002570 <L_UpdateMean>
		// Acc2
		L_UpdateMean(lsm6dsl_lin_x_list);
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <M_CalcAll+0xa0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fedc 	bl	8002570 <L_UpdateMean>
		L_UpdateMean(lsm6dsl_lin_y_list);
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <M_CalcAll+0xa4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 fed7 	bl	8002570 <L_UpdateMean>
		L_UpdateMean(lsm6dsl_lin_z_list);
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <M_CalcAll+0xa8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fed2 	bl	8002570 <L_UpdateMean>
		// Gyr
		L_UpdateMean(lsm6dsl_ang_x_list);
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <M_CalcAll+0xac>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fecd 	bl	8002570 <L_UpdateMean>
		L_UpdateMean(lsm6dsl_ang_y_list);
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <M_CalcAll+0xb0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fec8 	bl	8002570 <L_UpdateMean>
		L_UpdateMean(lsm6dsl_ang_z_list);
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <M_CalcAll+0xb4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fec3 	bl	8002570 <L_UpdateMean>
		// Mag
		L_UpdateMean(lsm303agr_mag_x_list);
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <M_CalcAll+0xb8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 febe 	bl	8002570 <L_UpdateMean>
		L_UpdateMean(lsm303agr_mag_y_list);
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <M_CalcAll+0xbc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 feb9 	bl	8002570 <L_UpdateMean>
		L_UpdateMean(lsm303agr_mag_z_list);
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <M_CalcAll+0xc0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 feb4 	bl	8002570 <L_UpdateMean>
		// Prs
		L_UpdateMean(lps22hb_hPa_list);
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <M_CalcAll+0xc4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f001 feaf 	bl	8002570 <L_UpdateMean>
		osDelay(M_CALCALL_TASK_PERIOD);
 8000812:	2064      	movs	r0, #100	; 0x64
 8000814:	f006 fc42 	bl	800709c <osDelay>
		L_UpdateMean(lsm303agr_acc_x_list);
 8000818:	e7ba      	b.n	8000790 <M_CalcAll+0x8>
 800081a:	bf00      	nop
 800081c:	20004cc4 	.word	0x20004cc4
 8000820:	20004d90 	.word	0x20004d90
 8000824:	20004d84 	.word	0x20004d84
 8000828:	20004cc8 	.word	0x20004cc8
 800082c:	20004d08 	.word	0x20004d08
 8000830:	20004d04 	.word	0x20004d04
 8000834:	20004d8c 	.word	0x20004d8c
 8000838:	20004b44 	.word	0x20004b44
 800083c:	20004ccc 	.word	0x20004ccc
 8000840:	20004c24 	.word	0x20004c24
 8000844:	20004ce0 	.word	0x20004ce0
 8000848:	20004d5c 	.word	0x20004d5c
 800084c:	20004ca0 	.word	0x20004ca0

08000850 <LCD_Display>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCD_Display */
void LCD_Display(void *argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af02      	add	r7, sp, #8
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Display */
	static int mean_round, mean_err;
	/* Infinite loop */
	for (;;) {
		// Se il backbuffer è stato aggiornato, ho cambiato stato
		if (fsm_state_buffer[0] != fsm_state_buffer[1]) {
 8000858:	4b8f      	ldr	r3, [pc, #572]	; (8000a98 <LCD_Display+0x248>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b8e      	ldr	r3, [pc, #568]	; (8000a98 <LCD_Display+0x248>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	d005      	beq.n	8000870 <LCD_Display+0x20>
			fsm_state_buffer[0] = fsm_state_buffer[1]; // Aggiorno il frontbuffer
 8000864:	4b8c      	ldr	r3, [pc, #560]	; (8000a98 <LCD_Display+0x248>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	4a8b      	ldr	r2, [pc, #556]	; (8000a98 <LCD_Display+0x248>)
 800086a:	6013      	str	r3, [r2, #0]
			lcdClear(); // Pulisco l'LCD (per convenienza)
 800086c:	f000 fb70 	bl	8000f50 <lcdClear>
		}
		// Stampa in base agli stati
		if (fsm_state_buffer[0] == &pAc1A) {
 8000870:	4b89      	ldr	r3, [pc, #548]	; (8000a98 <LCD_Display+0x248>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a89      	ldr	r2, [pc, #548]	; (8000a9c <LCD_Display+0x24c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d124      	bne.n	80008c4 <LCD_Display+0x74>
			// Stato: Accelerometro 1 Pagina A
			H_LCD_Round_Error(lsm303agr_acc_x_list->mean, &mean_round, &mean_err);
 800087a:	4b89      	ldr	r3, [pc, #548]	; (8000aa0 <LCD_Display+0x250>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000882:	4988      	ldr	r1, [pc, #544]	; (8000aa4 <LCD_Display+0x254>)
 8000884:	4888      	ldr	r0, [pc, #544]	; (8000aa8 <LCD_Display+0x258>)
 8000886:	eeb0 0a67 	vmov.f32	s0, s15
 800088a:	f001 fca9 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Ac1x", mean_round, mean_err, H_LCD_ROW_TOP);
 800088e:	4b86      	ldr	r3, [pc, #536]	; (8000aa8 <LCD_Display+0x258>)
 8000890:	6819      	ldr	r1, [r3, #0]
 8000892:	4b84      	ldr	r3, [pc, #528]	; (8000aa4 <LCD_Display+0x254>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	4884      	ldr	r0, [pc, #528]	; (8000aac <LCD_Display+0x25c>)
 800089a:	f001 fcdb 	bl	8002254 <H_LCD_Print>
			H_LCD_Round_Error(lsm303agr_acc_y_list->mean, &mean_round, &mean_err);
 800089e:	4b84      	ldr	r3, [pc, #528]	; (8000ab0 <LCD_Display+0x260>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80008a6:	497f      	ldr	r1, [pc, #508]	; (8000aa4 <LCD_Display+0x254>)
 80008a8:	487f      	ldr	r0, [pc, #508]	; (8000aa8 <LCD_Display+0x258>)
 80008aa:	eeb0 0a67 	vmov.f32	s0, s15
 80008ae:	f001 fc97 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Ac1y", mean_round, mean_err, H_LCD_ROW_BTM);
 80008b2:	4b7d      	ldr	r3, [pc, #500]	; (8000aa8 <LCD_Display+0x258>)
 80008b4:	6819      	ldr	r1, [r3, #0]
 80008b6:	4b7b      	ldr	r3, [pc, #492]	; (8000aa4 <LCD_Display+0x254>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	487d      	ldr	r0, [pc, #500]	; (8000ab4 <LCD_Display+0x264>)
 80008be:	f001 fcc9 	bl	8002254 <H_LCD_Print>
 80008c2:	e157      	b.n	8000b74 <LCD_Display+0x324>
		} else if (fsm_state_buffer[0] == &pAc1B) {
 80008c4:	4b74      	ldr	r3, [pc, #464]	; (8000a98 <LCD_Display+0x248>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a7b      	ldr	r2, [pc, #492]	; (8000ab8 <LCD_Display+0x268>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d115      	bne.n	80008fa <LCD_Display+0xaa>
			// Stato: Accelerometro 1 Pagina B
			H_LCD_Round_Error(lsm303agr_acc_z_list->mean, &mean_round, &mean_err);
 80008ce:	4b7b      	ldr	r3, [pc, #492]	; (8000abc <LCD_Display+0x26c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80008d6:	4973      	ldr	r1, [pc, #460]	; (8000aa4 <LCD_Display+0x254>)
 80008d8:	4873      	ldr	r0, [pc, #460]	; (8000aa8 <LCD_Display+0x258>)
 80008da:	eeb0 0a67 	vmov.f32	s0, s15
 80008de:	f001 fc7f 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Ac1z", mean_round, mean_err, H_LCD_ROW_TOP);
 80008e2:	4b71      	ldr	r3, [pc, #452]	; (8000aa8 <LCD_Display+0x258>)
 80008e4:	6819      	ldr	r1, [r3, #0]
 80008e6:	4b6f      	ldr	r3, [pc, #444]	; (8000aa4 <LCD_Display+0x254>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	2300      	movs	r3, #0
 80008ec:	4874      	ldr	r0, [pc, #464]	; (8000ac0 <LCD_Display+0x270>)
 80008ee:	f001 fcb1 	bl	8002254 <H_LCD_Print>
			H_LCD_Blank(H_LCD_ROW_BTM);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f001 fcca 	bl	800228c <H_LCD_Blank>
 80008f8:	e13c      	b.n	8000b74 <LCD_Display+0x324>
		} else if (fsm_state_buffer[0] == &pAc2A) {
 80008fa:	4b67      	ldr	r3, [pc, #412]	; (8000a98 <LCD_Display+0x248>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a71      	ldr	r2, [pc, #452]	; (8000ac4 <LCD_Display+0x274>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d124      	bne.n	800094e <LCD_Display+0xfe>
			// Stato: Accelerometro 2 Pagina A
			H_LCD_Round_Error(lsm6dsl_lin_x_list->mean, &mean_round, &mean_err);
 8000904:	4b70      	ldr	r3, [pc, #448]	; (8000ac8 <LCD_Display+0x278>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	edd3 7a04 	vldr	s15, [r3, #16]
 800090c:	4965      	ldr	r1, [pc, #404]	; (8000aa4 <LCD_Display+0x254>)
 800090e:	4866      	ldr	r0, [pc, #408]	; (8000aa8 <LCD_Display+0x258>)
 8000910:	eeb0 0a67 	vmov.f32	s0, s15
 8000914:	f001 fc64 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Ac2x", mean_round, mean_err, H_LCD_ROW_TOP);
 8000918:	4b63      	ldr	r3, [pc, #396]	; (8000aa8 <LCD_Display+0x258>)
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	4b61      	ldr	r3, [pc, #388]	; (8000aa4 <LCD_Display+0x254>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	486a      	ldr	r0, [pc, #424]	; (8000acc <LCD_Display+0x27c>)
 8000924:	f001 fc96 	bl	8002254 <H_LCD_Print>
			H_LCD_Round_Error(lsm6dsl_lin_y_list->mean, &mean_round, &mean_err);
 8000928:	4b69      	ldr	r3, [pc, #420]	; (8000ad0 <LCD_Display+0x280>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000930:	495c      	ldr	r1, [pc, #368]	; (8000aa4 <LCD_Display+0x254>)
 8000932:	485d      	ldr	r0, [pc, #372]	; (8000aa8 <LCD_Display+0x258>)
 8000934:	eeb0 0a67 	vmov.f32	s0, s15
 8000938:	f001 fc52 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Ac2y", mean_round, mean_err, H_LCD_ROW_BTM);
 800093c:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <LCD_Display+0x258>)
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <LCD_Display+0x254>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	4863      	ldr	r0, [pc, #396]	; (8000ad4 <LCD_Display+0x284>)
 8000948:	f001 fc84 	bl	8002254 <H_LCD_Print>
 800094c:	e112      	b.n	8000b74 <LCD_Display+0x324>
		} else if (fsm_state_buffer[0] == &pAc2B) {
 800094e:	4b52      	ldr	r3, [pc, #328]	; (8000a98 <LCD_Display+0x248>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a61      	ldr	r2, [pc, #388]	; (8000ad8 <LCD_Display+0x288>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d115      	bne.n	8000984 <LCD_Display+0x134>
			// Stato: Accelerometro 2 Pagina B
			H_LCD_Round_Error(lsm6dsl_lin_z_list->mean, &mean_round, &mean_err);
 8000958:	4b60      	ldr	r3, [pc, #384]	; (8000adc <LCD_Display+0x28c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000960:	4950      	ldr	r1, [pc, #320]	; (8000aa4 <LCD_Display+0x254>)
 8000962:	4851      	ldr	r0, [pc, #324]	; (8000aa8 <LCD_Display+0x258>)
 8000964:	eeb0 0a67 	vmov.f32	s0, s15
 8000968:	f001 fc3a 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Ac2z", mean_round, mean_err, H_LCD_ROW_TOP);
 800096c:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <LCD_Display+0x258>)
 800096e:	6819      	ldr	r1, [r3, #0]
 8000970:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <LCD_Display+0x254>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	485a      	ldr	r0, [pc, #360]	; (8000ae0 <LCD_Display+0x290>)
 8000978:	f001 fc6c 	bl	8002254 <H_LCD_Print>
			H_LCD_Blank(H_LCD_ROW_BTM);
 800097c:	2001      	movs	r0, #1
 800097e:	f001 fc85 	bl	800228c <H_LCD_Blank>
 8000982:	e0f7      	b.n	8000b74 <LCD_Display+0x324>
		} else if (fsm_state_buffer[0] == &pGyrA) {
 8000984:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <LCD_Display+0x248>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a56      	ldr	r2, [pc, #344]	; (8000ae4 <LCD_Display+0x294>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d124      	bne.n	80009d8 <LCD_Display+0x188>
			// Stato: Giroscopio Pagina A
			H_LCD_Round_Error(lsm6dsl_ang_x_list->mean, &mean_round, &mean_err);
 800098e:	4b56      	ldr	r3, [pc, #344]	; (8000ae8 <LCD_Display+0x298>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	edd3 7a04 	vldr	s15, [r3, #16]
 8000996:	4943      	ldr	r1, [pc, #268]	; (8000aa4 <LCD_Display+0x254>)
 8000998:	4843      	ldr	r0, [pc, #268]	; (8000aa8 <LCD_Display+0x258>)
 800099a:	eeb0 0a67 	vmov.f32	s0, s15
 800099e:	f001 fc1f 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Gyrx", mean_round, mean_err, H_LCD_ROW_TOP);
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <LCD_Display+0x258>)
 80009a4:	6819      	ldr	r1, [r3, #0]
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <LCD_Display+0x254>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	484f      	ldr	r0, [pc, #316]	; (8000aec <LCD_Display+0x29c>)
 80009ae:	f001 fc51 	bl	8002254 <H_LCD_Print>
			H_LCD_Round_Error(lsm6dsl_ang_y_list->mean, &mean_round, &mean_err);
 80009b2:	4b4f      	ldr	r3, [pc, #316]	; (8000af0 <LCD_Display+0x2a0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80009ba:	493a      	ldr	r1, [pc, #232]	; (8000aa4 <LCD_Display+0x254>)
 80009bc:	483a      	ldr	r0, [pc, #232]	; (8000aa8 <LCD_Display+0x258>)
 80009be:	eeb0 0a67 	vmov.f32	s0, s15
 80009c2:	f001 fc0d 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Gyry", mean_round, mean_err, H_LCD_ROW_BTM);
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <LCD_Display+0x258>)
 80009c8:	6819      	ldr	r1, [r3, #0]
 80009ca:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <LCD_Display+0x254>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	4848      	ldr	r0, [pc, #288]	; (8000af4 <LCD_Display+0x2a4>)
 80009d2:	f001 fc3f 	bl	8002254 <H_LCD_Print>
 80009d6:	e0cd      	b.n	8000b74 <LCD_Display+0x324>
		} else if (fsm_state_buffer[0] == &pGyrB) {
 80009d8:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <LCD_Display+0x248>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a46      	ldr	r2, [pc, #280]	; (8000af8 <LCD_Display+0x2a8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d115      	bne.n	8000a0e <LCD_Display+0x1be>
			// Stato: Giroscopio Pagina B
			H_LCD_Round_Error(lsm6dsl_ang_z_list->mean, &mean_round, &mean_err);
 80009e2:	4b46      	ldr	r3, [pc, #280]	; (8000afc <LCD_Display+0x2ac>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80009ea:	492e      	ldr	r1, [pc, #184]	; (8000aa4 <LCD_Display+0x254>)
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <LCD_Display+0x258>)
 80009ee:	eeb0 0a67 	vmov.f32	s0, s15
 80009f2:	f001 fbf5 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Gyrz", mean_round, mean_err, H_LCD_ROW_TOP);
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <LCD_Display+0x258>)
 80009f8:	6819      	ldr	r1, [r3, #0]
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <LCD_Display+0x254>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	483f      	ldr	r0, [pc, #252]	; (8000b00 <LCD_Display+0x2b0>)
 8000a02:	f001 fc27 	bl	8002254 <H_LCD_Print>
			H_LCD_Blank(H_LCD_ROW_BTM);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f001 fc40 	bl	800228c <H_LCD_Blank>
 8000a0c:	e0b2      	b.n	8000b74 <LCD_Display+0x324>
		} else if (fsm_state_buffer[0] == &pMagA) {
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <LCD_Display+0x248>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a3c      	ldr	r2, [pc, #240]	; (8000b04 <LCD_Display+0x2b4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d124      	bne.n	8000a62 <LCD_Display+0x212>
			// Stato: Magnetometro Pagina 1
			H_LCD_Round_Error(lsm303agr_mag_x_list->mean, &mean_round, &mean_err);
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <LCD_Display+0x2b8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a20:	4920      	ldr	r1, [pc, #128]	; (8000aa4 <LCD_Display+0x254>)
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <LCD_Display+0x258>)
 8000a24:	eeb0 0a67 	vmov.f32	s0, s15
 8000a28:	f001 fbda 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Magx", mean_round, mean_err, H_LCD_ROW_TOP);
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <LCD_Display+0x258>)
 8000a2e:	6819      	ldr	r1, [r3, #0]
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <LCD_Display+0x254>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	2300      	movs	r3, #0
 8000a36:	4835      	ldr	r0, [pc, #212]	; (8000b0c <LCD_Display+0x2bc>)
 8000a38:	f001 fc0c 	bl	8002254 <H_LCD_Print>
			H_LCD_Round_Error(lsm303agr_mag_y_list->mean, &mean_round, &mean_err);
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <LCD_Display+0x2c0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a44:	4917      	ldr	r1, [pc, #92]	; (8000aa4 <LCD_Display+0x254>)
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <LCD_Display+0x258>)
 8000a48:	eeb0 0a67 	vmov.f32	s0, s15
 8000a4c:	f001 fbc8 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Magy", mean_round, mean_err, H_LCD_ROW_BTM);
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <LCD_Display+0x258>)
 8000a52:	6819      	ldr	r1, [r3, #0]
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <LCD_Display+0x254>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	482e      	ldr	r0, [pc, #184]	; (8000b14 <LCD_Display+0x2c4>)
 8000a5c:	f001 fbfa 	bl	8002254 <H_LCD_Print>
 8000a60:	e088      	b.n	8000b74 <LCD_Display+0x324>
		} else if (fsm_state_buffer[0] == &pMagB) {
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <LCD_Display+0x248>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <LCD_Display+0x2c8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d159      	bne.n	8000b20 <LCD_Display+0x2d0>
			// Stato: Magnetometro Pagina 2
			H_LCD_Round_Error(lsm303agr_acc_z_list->mean, &mean_round, &mean_err);
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <LCD_Display+0x26c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a74:	490b      	ldr	r1, [pc, #44]	; (8000aa4 <LCD_Display+0x254>)
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LCD_Display+0x258>)
 8000a78:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7c:	f001 fbb0 	bl	80021e0 <H_LCD_Round_Error>
			H_LCD_Print("Magz", mean_round, mean_err, H_LCD_ROW_TOP);
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <LCD_Display+0x258>)
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <LCD_Display+0x254>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	4824      	ldr	r0, [pc, #144]	; (8000b1c <LCD_Display+0x2cc>)
 8000a8c:	f001 fbe2 	bl	8002254 <H_LCD_Print>
			H_LCD_Blank(H_LCD_ROW_BTM);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f001 fbfb 	bl	800228c <H_LCD_Blank>
 8000a96:	e06d      	b.n	8000b74 <LCD_Display+0x324>
 8000a98:	20004b4c 	.word	0x20004b4c
 8000a9c:	20004d10 	.word	0x20004d10
 8000aa0:	20004cc4 	.word	0x20004cc4
 8000aa4:	20000200 	.word	0x20000200
 8000aa8:	200001fc 	.word	0x200001fc
 8000aac:	0800c4fc 	.word	0x0800c4fc
 8000ab0:	20004d90 	.word	0x20004d90
 8000ab4:	0800c504 	.word	0x0800c504
 8000ab8:	20004c50 	.word	0x20004c50
 8000abc:	20004d84 	.word	0x20004d84
 8000ac0:	0800c50c 	.word	0x0800c50c
 8000ac4:	20004ce4 	.word	0x20004ce4
 8000ac8:	20004cc8 	.word	0x20004cc8
 8000acc:	0800c514 	.word	0x0800c514
 8000ad0:	20004d08 	.word	0x20004d08
 8000ad4:	0800c51c 	.word	0x0800c51c
 8000ad8:	20004c28 	.word	0x20004c28
 8000adc:	20004d04 	.word	0x20004d04
 8000ae0:	0800c524 	.word	0x0800c524
 8000ae4:	20004d70 	.word	0x20004d70
 8000ae8:	20004d8c 	.word	0x20004d8c
 8000aec:	0800c52c 	.word	0x0800c52c
 8000af0:	20004b44 	.word	0x20004b44
 8000af4:	0800c534 	.word	0x0800c534
 8000af8:	20004b30 	.word	0x20004b30
 8000afc:	20004ccc 	.word	0x20004ccc
 8000b00:	0800c53c 	.word	0x0800c53c
 8000b04:	20004b20 	.word	0x20004b20
 8000b08:	20004c24 	.word	0x20004c24
 8000b0c:	0800c544 	.word	0x0800c544
 8000b10:	20004ce0 	.word	0x20004ce0
 8000b14:	0800c54c 	.word	0x0800c54c
 8000b18:	20004cf4 	.word	0x20004cf4
 8000b1c:	0800c554 	.word	0x0800c554
		} else if (fsm_state_buffer[0] == &pPrs) {
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <LCD_Display+0x330>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <LCD_Display+0x334>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d124      	bne.n	8000b74 <LCD_Display+0x324>
			// Stato: Barometro
			H_LCD_Round_Error(lps22hb_hPa_list->mean, &mean_round, &mean_err);
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <LCD_Display+0x338>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b32:	4916      	ldr	r1, [pc, #88]	; (8000b8c <LCD_Display+0x33c>)
 8000b34:	4816      	ldr	r0, [pc, #88]	; (8000b90 <LCD_Display+0x340>)
 8000b36:	eeb0 0a67 	vmov.f32	s0, s15
 8000b3a:	f001 fb51 	bl	80021e0 <H_LCD_Round_Error>
			mean_err = mean_err/10; // QAD hack - perché %.1d non funziona?
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <LCD_Display+0x33c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <LCD_Display+0x344>)
 8000b44:	fb82 1203 	smull	r1, r2, r2, r3
 8000b48:	1092      	asrs	r2, r2, #2
 8000b4a:	17db      	asrs	r3, r3, #31
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <LCD_Display+0x33c>)
 8000b50:	6013      	str	r3, [r2, #0]
			sprintf((char*) lcd_tx_buffer, " %s:%.5d.%.1d ", "Bar ", mean_round, mean_err);
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <LCD_Display+0x340>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <LCD_Display+0x33c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LCD_Display+0x348>)
 8000b60:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LCD_Display+0x34c>)
 8000b62:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <LCD_Display+0x350>)
 8000b64:	f009 fe2c 	bl	800a7c0 <siprintf>
			H_LCD_Perform_Tx(H_LCD_ROW_TOP);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fd41 	bl	80005f0 <H_LCD_Perform_Tx>
			H_LCD_Blank(H_LCD_ROW_BTM);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f001 fb8c 	bl	800228c <H_LCD_Blank>
		}
		osDelay(LCD_DISPLAY_TASK_PERIOD);
 8000b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b78:	f006 fa90 	bl	800709c <osDelay>
		if (fsm_state_buffer[0] != fsm_state_buffer[1]) {
 8000b7c:	e66c      	b.n	8000858 <LCD_Display+0x8>
 8000b7e:	bf00      	nop
 8000b80:	20004b4c 	.word	0x20004b4c
 8000b84:	20004d60 	.word	0x20004d60
 8000b88:	20004ca0 	.word	0x20004ca0
 8000b8c:	20000200 	.word	0x20000200
 8000b90:	200001fc 	.word	0x200001fc
 8000b94:	66666667 	.word	0x66666667
 8000b98:	0800c55c 	.word	0x0800c55c
 8000b9c:	0800c564 	.word	0x0800c564
 8000ba0:	20004c60 	.word	0x20004c60

08000ba4 <LCD_Button_Readall>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCD_Button_Readall */
void LCD_Button_Readall(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Button_Readall */
	/* Infinite loop */
	for (;;) {
		HAL_Delay(50); // Assolutamente necessario (conflitto r/w del bus I2C?)
 8000bac:	2032      	movs	r0, #50	; 0x32
 8000bae:	f002 f95b 	bl	8002e68 <HAL_Delay>
		H_LCD_Button_StepFSM(lcdReadButtons());
 8000bb2:	f000 f9a7 	bl	8000f04 <lcdReadButtons>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fc09 	bl	80023d0 <H_LCD_Button_StepFSM>
		osDelay(LCD_BUTTON_READALL_TASK_PERIOD);
 8000bbe:	2032      	movs	r0, #50	; 0x32
 8000bc0:	f006 fa6c 	bl	800709c <osDelay>
		HAL_Delay(50); // Assolutamente necessario (conflitto r/w del bus I2C?)
 8000bc4:	e7f2      	b.n	8000bac <LCD_Button_Readall+0x8>
	...

08000bc8 <XL_GetData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_XL_GetData */
void XL_GetData(void *argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN XL_GetData */
	/* Infinite loop */
	for (;;) {
		D_LSM303AGR_XL_Read();
 8000bd0:	f001 feb8 	bl	8002944 <D_LSM303AGR_XL_Read>
		L_Insert(lsm303agr_acc_x_list, lsm303agr_xl_data.x);
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <XL_GetData+0x50>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <XL_GetData+0x54>)
 8000bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bde:	eeb0 0a67 	vmov.f32	s0, s15
 8000be2:	4610      	mov	r0, r2
 8000be4:	f001 fc5c 	bl	80024a0 <L_Insert>
		L_Insert(lsm303agr_acc_y_list, lsm303agr_xl_data.y);
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <XL_GetData+0x58>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <XL_GetData+0x54>)
 8000bee:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	f001 fc52 	bl	80024a0 <L_Insert>
		L_Insert(lsm303agr_acc_z_list, lsm303agr_xl_data.z);
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <XL_GetData+0x5c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <XL_GetData+0x54>)
 8000c02:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c06:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	f001 fc48 	bl	80024a0 <L_Insert>
		osDelay(XL_GETDATA_TASK_PERIOD);
 8000c10:	2019      	movs	r0, #25
 8000c12:	f006 fa43 	bl	800709c <osDelay>
		D_LSM303AGR_XL_Read();
 8000c16:	e7db      	b.n	8000bd0 <XL_GetData+0x8>
 8000c18:	20004cc4 	.word	0x20004cc4
 8000c1c:	20004d40 	.word	0x20004d40
 8000c20:	20004d90 	.word	0x20004d90
 8000c24:	20004d84 	.word	0x20004d84

08000c28 <MG_GetData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MG_GetData */
void MG_GetData(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MG_GetData */
	/* Infinite loop */
	for (;;) {
		D_LSM303AGR_MG_Read();
 8000c30:	f001 fec8 	bl	80029c4 <D_LSM303AGR_MG_Read>
		L_Insert(lsm303agr_mag_x_list, lsm303agr_mg_data.x);
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MG_GetData+0x50>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MG_GetData+0x54>)
 8000c3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c42:	4610      	mov	r0, r2
 8000c44:	f001 fc2c 	bl	80024a0 <L_Insert>
		L_Insert(lsm303agr_mag_y_list, lsm303agr_mg_data.y);
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <MG_GetData+0x58>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MG_GetData+0x54>)
 8000c4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c52:	eeb0 0a67 	vmov.f32	s0, s15
 8000c56:	4610      	mov	r0, r2
 8000c58:	f001 fc22 	bl	80024a0 <L_Insert>
		L_Insert(lsm303agr_mag_z_list, lsm303agr_mg_data.z);
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MG_GetData+0x5c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MG_GetData+0x54>)
 8000c62:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f001 fc18 	bl	80024a0 <L_Insert>
		osDelay(MG_GETDATA_TASK_PERIOD);
 8000c70:	20fa      	movs	r0, #250	; 0xfa
 8000c72:	f006 fa13 	bl	800709c <osDelay>
		D_LSM303AGR_MG_Read();
 8000c76:	e7db      	b.n	8000c30 <MG_GetData+0x8>
 8000c78:	20004c24 	.word	0x20004c24
 8000c7c:	20004cb0 	.word	0x20004cb0
 8000c80:	20004ce0 	.word	0x20004ce0
 8000c84:	20004d5c 	.word	0x20004d5c

08000c88 <B_GetData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_B_GetData */
void B_GetData(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN B_GetData */
	/* Infinite loop */
	for (;;) {
		D_LPS22HB_Read();
 8000c90:	f001 fd40 	bl	8002714 <D_LPS22HB_Read>
		L_Insert(lps22hb_hPa_list, lps22hb_data.hPa);
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <B_GetData+0x28>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <B_GetData+0x2c>)
 8000c9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	f001 fbfc 	bl	80024a0 <L_Insert>
		osDelay(P_GETDATA_TASK_PERIOD);
 8000ca8:	200d      	movs	r0, #13
 8000caa:	f006 f9f7 	bl	800709c <osDelay>
		D_LPS22HB_Read();
 8000cae:	e7ef      	b.n	8000c90 <B_GetData+0x8>
 8000cb0:	20004ca0 	.word	0x20004ca0
 8000cb4:	20004d54 	.word	0x20004d54

08000cb8 <XL2_GetData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_XL2_GetData */
void XL2_GetData(void *argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN XL2_GetData */
	/* Infinite loop */
	for (;;) {
		D_LSM6DSL_XL_Read();
 8000cc0:	f001 ff88 	bl	8002bd4 <D_LSM6DSL_XL_Read>
		L_Insert(lsm6dsl_lin_x_list, lsm6dsl_xl_data.x);
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <XL2_GetData+0x50>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <XL2_GetData+0x54>)
 8000cca:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cce:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f001 fbe4 	bl	80024a0 <L_Insert>
		L_Insert(lsm6dsl_lin_y_list, lsm6dsl_xl_data.y);
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <XL2_GetData+0x58>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <XL2_GetData+0x54>)
 8000cde:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	f001 fbda 	bl	80024a0 <L_Insert>
		L_Insert(lsm6dsl_lin_z_list, lsm6dsl_xl_data.z);
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <XL2_GetData+0x5c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <XL2_GetData+0x54>)
 8000cf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	f001 fbd0 	bl	80024a0 <L_Insert>
		osDelay(XL2_GETDATA_TASK_PERIOD);
 8000d00:	2018      	movs	r0, #24
 8000d02:	f006 f9cb 	bl	800709c <osDelay>
		D_LSM6DSL_XL_Read();
 8000d06:	e7db      	b.n	8000cc0 <XL2_GetData+0x8>
 8000d08:	20004cc8 	.word	0x20004cc8
 8000d0c:	20004c38 	.word	0x20004c38
 8000d10:	20004d08 	.word	0x20004d08
 8000d14:	20004d04 	.word	0x20004d04

08000d18 <G_GetData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_G_GetData */
void G_GetData(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN G_GetData */
	/* Infinite loop */
	for (;;) {
		D_LSM6DSL_G_Read();
 8000d20:	f001 ff98 	bl	8002c54 <D_LSM6DSL_G_Read>
		L_Insert(lsm6dsl_ang_x_list, lsm6dsl_g_data.x);
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <G_GetData+0x50>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <G_GetData+0x54>)
 8000d2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d32:	4610      	mov	r0, r2
 8000d34:	f001 fbb4 	bl	80024a0 <L_Insert>
		L_Insert(lsm6dsl_ang_y_list, lsm6dsl_g_data.y);
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <G_GetData+0x58>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <G_GetData+0x54>)
 8000d3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d42:	eeb0 0a67 	vmov.f32	s0, s15
 8000d46:	4610      	mov	r0, r2
 8000d48:	f001 fbaa 	bl	80024a0 <L_Insert>
		L_Insert(lsm6dsl_ang_z_list, lsm6dsl_g_data.z);
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <G_GetData+0x5c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <G_GetData+0x54>)
 8000d52:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d56:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	f001 fba0 	bl	80024a0 <L_Insert>
		osDelay(G_GETDATA_TASK_PERIOD);
 8000d60:	2017      	movs	r0, #23
 8000d62:	f006 f99b 	bl	800709c <osDelay>
		D_LSM6DSL_G_Read();
 8000d66:	e7db      	b.n	8000d20 <G_GetData+0x8>
 8000d68:	20004d8c 	.word	0x20004d8c
 8000d6c:	20004d2c 	.word	0x20004d2c
 8000d70:	20004b44 	.word	0x20004b44
 8000d74:	20004ccc 	.word	0x20004ccc

08000d78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_GPIO_Init+0x2c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <MX_GPIO_Init+0x2c>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_GPIO_Init+0x2c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <MX_I2C1_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <MX_I2C1_Init+0x7c>)
 8000db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000de4:	f002 fb10 	bl	8003408 <HAL_I2C_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dee:	f001 f843 	bl	8001e78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000df6:	f003 ff28 	bl	8004c4a <HAL_I2CEx_ConfigAnalogFilter>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e00:	f001 f83a 	bl	8001e78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000e08:	f003 ff6a 	bl	8004ce0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f001 f831 	bl	8001e78 <Error_Handler>
  }

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20004bd8 	.word	0x20004bd8
 8000e20:	40005400 	.word	0x40005400
 8000e24:	00c0eaff 	.word	0x00c0eaff

08000e28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <HAL_I2C_MspInit+0x9c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d138      	bne.n	8000ebc <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_I2C_MspInit+0xa0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <HAL_I2C_MspInit+0xa0>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_I2C_MspInit+0xa0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e68:	2312      	movs	r3, #18
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e74:	2304      	movs	r3, #4
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4813      	ldr	r0, [pc, #76]	; (8000ecc <HAL_I2C_MspInit+0xa4>)
 8000e80:	f002 f918 	bl	80030b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_I2C_MspInit+0xa0>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_I2C_MspInit+0xa0>)
 8000e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_I2C_MspInit+0xa0>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	201f      	movs	r0, #31
 8000ea2:	f002 f8bb 	bl	800301c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ea6:	201f      	movs	r0, #31
 8000ea8:	f002 f8d4 	bl	8003054 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2020      	movs	r0, #32
 8000eb2:	f002 f8b3 	bl	800301c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000eb6:	2020      	movs	r0, #32
 8000eb8:	f002 f8cc 	bl	8003054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <lcdInit>:
#define ADDRESS     0x30

static uint8_t _col, _row;
static I2C_HandleTypeDef *_hi2c;

void lcdInit(I2C_HandleTypeDef *hi2c) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	_col = _row = 0;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <lcdInit+0x28>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <lcdInit+0x28>)
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <lcdInit+0x2c>)
 8000ee4:	701a      	strb	r2, [r3, #0]
	_hi2c = hi2c;
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <lcdInit+0x30>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	20000205 	.word	0x20000205
 8000efc:	20000204 	.word	0x20000204
 8000f00:	20000208 	.word	0x20000208

08000f04 <lcdReadButtons>:
	HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, data, 2, 1000);
	HAL_I2C_Master_Receive(_hi2c, ADDRESS << 1, &port, 1, 1000);
	return port;
}

uint8_t lcdReadButtons() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af02      	add	r7, sp, #8
	uint8_t data = GET_BUT;
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	71fb      	strb	r3, [r7, #7]
	uint8_t buttons = 0xF; // override lettura fallita
 8000f0e:	230f      	movs	r3, #15
 8000f10:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, &data, 1, 1000);
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <lcdReadButtons+0x48>)
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2160      	movs	r1, #96	; 0x60
 8000f22:	f002 fb01 	bl	8003528 <HAL_I2C_Master_Transmit>
	HAL_Delay(10); // molto più stabile
 8000f26:	200a      	movs	r0, #10
 8000f28:	f001 ff9e 	bl	8002e68 <HAL_Delay>
	HAL_I2C_Master_Receive(_hi2c, ADDRESS << 1, &buttons, 1, 1000);
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <lcdReadButtons+0x48>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	1dba      	adds	r2, r7, #6
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2160      	movs	r1, #96	; 0x60
 8000f3c:	f002 fbe8 	bl	8003710 <HAL_I2C_Master_Receive>
	return buttons;
 8000f40:	79bb      	ldrb	r3, [r7, #6]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000208 	.word	0x20000208

08000f50 <lcdClear>:
	data[0] = SET_BL;
	data[1] = level;
	HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, data, 2, 1000);
}

void lcdClear() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af02      	add	r7, sp, #8
	uint8_t data = LCD_CLR;
 8000f56:	2360      	movs	r3, #96	; 0x60
 8000f58:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, &data, 1, 1000);
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <lcdClear+0x3c>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	1dfa      	adds	r2, r7, #7
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	2160      	movs	r1, #96	; 0x60
 8000f6a:	f002 fadd 	bl	8003528 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f001 ff7a 	bl	8002e68 <HAL_Delay>
	_col = _row = 0;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <lcdClear+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <lcdClear+0x40>)
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <lcdClear+0x44>)
 8000f80:	701a      	strb	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000208 	.word	0x20000208
 8000f90:	20000205 	.word	0x20000205
 8000f94:	20000204 	.word	0x20000204

08000f98 <lcdSetCursor>:

void lcdSetCursor(uint8_t col, uint8_t row) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	if (col > 15 || col < 0) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	d809      	bhi.n	8000fc2 <lcdSetCursor+0x2a>
		return;
	}

	if (row > 1 || row < 0) {
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d808      	bhi.n	8000fc6 <lcdSetCursor+0x2e>
		return;
	}
	_col = col;
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <lcdSetCursor+0x3c>)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	7013      	strb	r3, [r2, #0]
	_row = row;
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <lcdSetCursor+0x40>)
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	7013      	strb	r3, [r2, #0]
 8000fc0:	e002      	b.n	8000fc8 <lcdSetCursor+0x30>
		return;
 8000fc2:	bf00      	nop
 8000fc4:	e000      	b.n	8000fc8 <lcdSetCursor+0x30>
		return;
 8000fc6:	bf00      	nop
}
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000204 	.word	0x20000204
 8000fd8:	20000205 	.word	0x20000205

08000fdc <lcdPrint>:

void lcdPrint(const char string[]) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff f92b 	bl	8000240 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	74fb      	strb	r3, [r7, #19]

	len = strlen(string);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff f926 	bl	8000240 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	74fb      	strb	r3, [r7, #19]
	for (int i = 0; i < len; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e037      	b.n	800106e <lcdPrint+0x92>
		uint8_t data[4];
		data[0] = LCD_WR;
 8000ffe:	2361      	movs	r3, #97	; 0x61
 8001000:	733b      	strb	r3, [r7, #12]
		data[1] = 1 - _row;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <lcdPrint+0xa4>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f1c3 0301 	rsb	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	737b      	strb	r3, [r7, #13]
		data[2] = _col;
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <lcdPrint+0xa8>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	73bb      	strb	r3, [r7, #14]
		data[3] = string[i];
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Master_Transmit(_hi2c, ADDRESS << 1, data, 4, 1000);
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <lcdPrint+0xac>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2304      	movs	r3, #4
 800102e:	2160      	movs	r1, #96	; 0x60
 8001030:	f002 fa7a 	bl	8003528 <HAL_I2C_Master_Transmit>
		HAL_Delay(20);
 8001034:	2014      	movs	r0, #20
 8001036:	f001 ff17 	bl	8002e68 <HAL_Delay>
		++_col;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <lcdPrint+0xa8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <lcdPrint+0xa8>)
 8001044:	701a      	strb	r2, [r3, #0]
		if (_col > 15) {
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <lcdPrint+0xa8>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	d90c      	bls.n	8001068 <lcdPrint+0x8c>
			_col = 0;
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <lcdPrint+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
			++_row;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <lcdPrint+0xa4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <lcdPrint+0xa4>)
 800105e:	701a      	strb	r2, [r3, #0]
			if (_row > 2)
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <lcdPrint+0xa4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d807      	bhi.n	8001078 <lcdPrint+0x9c>
	for (int i = 0; i < len; i++) {
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3301      	adds	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	7cfb      	ldrb	r3, [r7, #19]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	429a      	cmp	r2, r3
 8001074:	dbc3      	blt.n	8000ffe <lcdPrint+0x22>
 8001076:	e000      	b.n	800107a <lcdPrint+0x9e>
				return;
 8001078:	bf00      	nop
		}
	}
}
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000205 	.word	0x20000205
 8001084:	20000204 	.word	0x20000204
 8001088:	20000208 	.word	0x20000208

0800108c <lps22hb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	461a      	mov	r2, r3
 8001098:	460b      	mov	r3, r1
 800109a:	72fb      	strb	r3, [r7, #11]
 800109c:	4613      	mov	r3, r2
 800109e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	685c      	ldr	r4, [r3, #4]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6898      	ldr	r0, [r3, #8]
 80010a8:	893b      	ldrh	r3, [r7, #8]
 80010aa:	7af9      	ldrb	r1, [r7, #11]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	47a0      	blx	r4
 80010b0:	6178      	str	r0, [r7, #20]
  return ret;
 80010b2:	697b      	ldr	r3, [r7, #20]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd90      	pop	{r4, r7, pc}

080010bc <lps22hb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	460b      	mov	r3, r1
 80010ca:	72fb      	strb	r3, [r7, #11]
 80010cc:	4613      	mov	r3, r2
 80010ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681c      	ldr	r4, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6898      	ldr	r0, [r3, #8]
 80010d8:	893b      	ldrh	r3, [r7, #8]
 80010da:	7af9      	ldrb	r1, [r7, #11]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	47a0      	blx	r4
 80010e0:	6178      	str	r0, [r7, #20]
  return ret;
 80010e2:	697b      	ldr	r3, [r7, #20]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}

080010ec <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 4096.0f );
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001118 <lps22hb_from_lsb_to_hpa+0x2c>
 8001102:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001106:	eef0 7a66 	vmov.f32	s15, s13
}
 800110a:	eeb0 0a67 	vmov.f32	s0, s15
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	45800000 	.word	0x45800000

0800111c <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                          lps22hb_lpfp_t val)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	2301      	movs	r3, #1
 800112e:	2110      	movs	r1, #16
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ffab 	bl	800108c <lps22hb_read_reg>
 8001136:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10f      	bne.n	800115e <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	b2da      	uxtb	r2, r3
 8001146:	7a3b      	ldrb	r3, [r7, #8]
 8001148:	f362 0383 	bfi	r3, r2, #2, #2
 800114c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800114e:	f107 0208 	add.w	r2, r7, #8
 8001152:	2301      	movs	r3, #1
 8001154:	2110      	movs	r1, #16
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <lps22hb_write_reg>
 800115c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	2301      	movs	r3, #1
 800117a:	2110      	movs	r1, #16
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff85 	bl	800108c <lps22hb_read_reg>
 8001182:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10f      	bne.n	80011aa <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	b2da      	uxtb	r2, r3
 8001192:	7a3b      	ldrb	r3, [r7, #8]
 8001194:	f362 1306 	bfi	r3, r2, #4, #3
 8001198:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800119a:	f107 0208 	add.w	r2, r7, #8
 800119e:	2301      	movs	r3, #1
 80011a0:	2110      	movs	r1, #16
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff8a 	bl	80010bc <lps22hb_write_reg>
 80011a8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <lps22hb_press_data_ready_get>:
  * @param  val    Change the values of p_da in reg STATUS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_press_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  lps22hb_status_t status;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
 80011be:	f107 0208 	add.w	r2, r7, #8
 80011c2:	2301      	movs	r3, #1
 80011c4:	2127      	movs	r1, #39	; 0x27
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff60 	bl	800108c <lps22hb_read_reg>
 80011cc:	60f8      	str	r0, [r7, #12]
  *val = status.p_da;
 80011ce:	7a3b      	ldrb	r3, [r7, #8]
 80011d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	701a      	strb	r2, [r3, #0]

  return ret;
 80011dc:	68fb      	ldr	r3, [r7, #12]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 80011f0:	2303      	movs	r3, #3
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	2128      	movs	r1, #40	; 0x28
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff48 	bl	800108c <lps22hb_read_reg>
 80011fc:	60f8      	str	r0, [r7, #12]
  return ret;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
 8001212:	2301      	movs	r3, #1
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	210f      	movs	r1, #15
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff37 	bl	800108c <lps22hb_read_reg>
 800121e:	60f8      	str	r0, [r7, #12]
  return ret;
 8001220:	68fb      	ldr	r3, [r7, #12]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <lps22hb_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001236:	f107 0208 	add.w	r2, r7, #8
 800123a:	2301      	movs	r3, #1
 800123c:	2111      	movs	r1, #17
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff24 	bl	800108c <lps22hb_read_reg>
 8001244:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10f      	bne.n	800126c <lps22hb_reset_set+0x42>
    ctrl_reg2.swreset = val;
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	7a3b      	ldrb	r3, [r7, #8]
 8001256:	f362 0382 	bfi	r3, r2, #2, #1
 800125a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	2301      	movs	r3, #1
 8001262:	2111      	movs	r1, #17
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <lps22hb_write_reg>
 800126a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800126c:	68fb      	ldr	r3, [r7, #12]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <lps22hb_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8001280:	f107 0208 	add.w	r2, r7, #8
 8001284:	2301      	movs	r3, #1
 8001286:	2111      	movs	r1, #17
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff feff 	bl	800108c <lps22hb_read_reg>
 800128e:	60f8      	str	r0, [r7, #12]
  *val = ctrl_reg2.swreset;
 8001290:	7a3b      	ldrb	r3, [r7, #8]
 8001292:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	701a      	strb	r2, [r3, #0]

  return ret;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <lsm303agr_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	461a      	mov	r2, r3
 80012b4:	460b      	mov	r3, r1
 80012b6:	72fb      	strb	r3, [r7, #11]
 80012b8:	4613      	mov	r3, r2
 80012ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685c      	ldr	r4, [r3, #4]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6898      	ldr	r0, [r3, #8]
 80012c4:	893b      	ldrh	r3, [r7, #8]
 80012c6:	7af9      	ldrb	r1, [r7, #11]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	47a0      	blx	r4
 80012cc:	6178      	str	r0, [r7, #20]
  return ret;
 80012ce:	697b      	ldr	r3, [r7, #20]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}

080012d8 <lsm303agr_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	461a      	mov	r2, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	72fb      	strb	r3, [r7, #11]
 80012e8:	4613      	mov	r3, r2
 80012ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681c      	ldr	r4, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6898      	ldr	r0, [r3, #8]
 80012f4:	893b      	ldrh	r3, [r7, #8]
 80012f6:	7af9      	ldrb	r1, [r7, #11]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	47a0      	blx	r4
 80012fc:	6178      	str	r0, [r7, #20]
  return ret;
 80012fe:	697b      	ldr	r3, [r7, #20]
}
 8001300:	4618      	mov	r0, r3
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}

08001308 <lsm303agr_from_fs_2g_hr_to_mg>:
  * @{
  *
  */

float_t lsm303agr_from_fs_2g_hr_to_mg(int16_t lsb)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f ) * 0.98f;
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001326:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800133c <lsm303agr_from_fs_2g_hr_to_mg+0x34>
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	3f7ae148 	.word	0x3f7ae148

08001340 <lsm303agr_from_lsb_to_mgauss>:
{
  return ( ( (float_t)lsb / 256.0f ) * 1.0f ) + 25.0f;
}

float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 1.5f;
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800135a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800135e:	eeb0 0a67 	vmov.f32	s0, s15
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <lsm303agr_temperature_meas_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_meas_set(stmdev_ctx_t *ctx,
                                       lsm303agr_temp_en_a_t val)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  lsm303agr_temp_cfg_reg_a_t temp_cfg_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8001378:	f107 0208 	add.w	r2, r7, #8
 800137c:	2301      	movs	r3, #1
 800137e:	211f      	movs	r1, #31
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff91 	bl	80012a8 <lsm303agr_read_reg>
 8001386:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&temp_cfg_reg_a, 1);
  if(ret == 0){
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <lsm303agr_temperature_meas_set+0x42>
    temp_cfg_reg_a.temp_en = (uint8_t)val;
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	b2da      	uxtb	r2, r3
 8001396:	7a3b      	ldrb	r3, [r7, #8]
 8001398:	f362 1387 	bfi	r3, r2, #6, #2
 800139c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 800139e:	f107 0208 	add.w	r2, r7, #8
 80013a2:	2301      	movs	r3, #1
 80013a4:	211f      	movs	r1, #31
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff96 	bl	80012d8 <lsm303agr_write_reg>
 80013ac:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&temp_cfg_reg_a, 1);
  }

  return ret;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <lsm303agr_xl_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_set(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t val)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  uint8_t lpen, hr;

  if ( val == LSM303AGR_HR_12bit ){
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d104      	bne.n	80013d4 <lsm303agr_xl_operating_mode_set+0x1c>
    lpen = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	74fb      	strb	r3, [r7, #19]
    hr   = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	74bb      	strb	r3, [r7, #18]
 80013d2:	e00b      	b.n	80013ec <lsm303agr_xl_operating_mode_set+0x34>
  } else if (val == LSM303AGR_NM_10bit) {
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d104      	bne.n	80013e4 <lsm303agr_xl_operating_mode_set+0x2c>
    lpen = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	74fb      	strb	r3, [r7, #19]
    hr   = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	74bb      	strb	r3, [r7, #18]
 80013e2:	e003      	b.n	80013ec <lsm303agr_xl_operating_mode_set+0x34>
  } else {
    lpen = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	74fb      	strb	r3, [r7, #19]
    hr   = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	74bb      	strb	r3, [r7, #18]
  }

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80013ec:	f107 0210 	add.w	r2, r7, #16
 80013f0:	2301      	movs	r3, #1
 80013f2:	2120      	movs	r1, #32
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff57 	bl	80012a8 <lsm303agr_read_reg>
 80013fa:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&ctrl_reg1_a, 1);
  ctrl_reg1_a.lpen = (uint8_t)lpen;
 80013fc:	7cfb      	ldrb	r3, [r7, #19]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	7c3b      	ldrb	r3, [r7, #16]
 8001406:	f362 03c3 	bfi	r3, r2, #3, #1
 800140a:	743b      	strb	r3, [r7, #16]
  if(ret == 0){
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d107      	bne.n	8001422 <lsm303agr_xl_operating_mode_set+0x6a>
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001412:	f107 0210 	add.w	r2, r7, #16
 8001416:	2301      	movs	r3, #1
 8001418:	2120      	movs	r1, #32
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff5c 	bl	80012d8 <lsm303agr_write_reg>
 8001420:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&ctrl_reg1_a, 1);
  }
  if(ret == 0){
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <lsm303agr_xl_operating_mode_set+0x80>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8001428:	f107 020c 	add.w	r2, r7, #12
 800142c:	2301      	movs	r3, #1
 800142e:	2123      	movs	r1, #35	; 0x23
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff39 	bl	80012a8 <lsm303agr_read_reg>
 8001436:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&ctrl_reg4_a, 1);
  }
  if(ret == 0){
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <lsm303agr_xl_operating_mode_set+0xa6>
    ctrl_reg4_a.hr = hr;
 800143e:	7cbb      	ldrb	r3, [r7, #18]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	7b3b      	ldrb	r3, [r7, #12]
 8001448:	f362 03c3 	bfi	r3, r2, #3, #1
 800144c:	733b      	strb	r3, [r7, #12]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800144e:	f107 020c 	add.w	r2, r7, #12
 8001452:	2301      	movs	r3, #1
 8001454:	2123      	movs	r1, #35	; 0x23
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff3e 	bl	80012d8 <lsm303agr_write_reg>
 800145c:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 800145e:	697b      	ldr	r3, [r7, #20]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001474:	f107 0208 	add.w	r2, r7, #8
 8001478:	2301      	movs	r3, #1
 800147a:	2120      	movs	r1, #32
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff13 	bl	80012a8 <lsm303agr_read_reg>
 8001482:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg1_a, 1);
  if(ret == 0){
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10f      	bne.n	80014aa <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	b2da      	uxtb	r2, r3
 8001492:	7a3b      	ldrb	r3, [r7, #8]
 8001494:	f362 1307 	bfi	r3, r2, #4, #4
 8001498:	723b      	strb	r3, [r7, #8]
   ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800149a:	f107 0208 	add.w	r2, r7, #8
 800149e:	2301      	movs	r3, #1
 80014a0:	2120      	movs	r1, #32
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff18 	bl	80012d8 <lsm303agr_write_reg>
 80014a8:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&ctrl_reg1_a, 1);
  }

  return ret;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80014c0:	f107 0208 	add.w	r2, r7, #8
 80014c4:	2301      	movs	r3, #1
 80014c6:	2123      	movs	r1, #35	; 0x23
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff feed 	bl	80012a8 <lsm303agr_read_reg>
 80014ce:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	7a3b      	ldrb	r3, [r7, #8]
 80014e0:	f362 1305 	bfi	r3, r2, #4, #2
 80014e4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80014e6:	f107 0208 	add.w	r2, r7, #8
 80014ea:	2301      	movs	r3, #1
 80014ec:	2123      	movs	r1, #35	; 0x23
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fef2 	bl	80012d8 <lsm303agr_write_reg>
 80014f4:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800150c:	f107 0208 	add.w	r2, r7, #8
 8001510:	2301      	movs	r3, #1
 8001512:	2123      	movs	r1, #35	; 0x23
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fec7 	bl	80012a8 <lsm303agr_read_reg>
 800151a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&ctrl_reg4_a, 1);
  if(ret == 0){
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	b2da      	uxtb	r2, r3
 800152a:	7a3b      	ldrb	r3, [r7, #8]
 800152c:	f362 13c7 	bfi	r3, r2, #7, #1
 8001530:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8001532:	f107 0208 	add.w	r2, r7, #8
 8001536:	2301      	movs	r3, #1
 8001538:	2123      	movs	r1, #35	; 0x23
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fecc 	bl	80012d8 <lsm303agr_write_reg>
 8001540:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl_reg4_a, 1);
  }

  return ret;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <lsm303agr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8001556:	2306      	movs	r3, #6
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	2128      	movs	r1, #40	; 0x28
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fea3 	bl	80012a8 <lsm303agr_read_reg>
 8001562:	60f8      	str	r0, [r7, #12]
  return ret;
 8001564:	68fb      	ldr	r3, [r7, #12]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800157a:	f107 0208 	add.w	r2, r7, #8
 800157e:	2301      	movs	r3, #1
 8001580:	2160      	movs	r1, #96	; 0x60
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fe90 	bl	80012a8 <lsm303agr_read_reg>
 8001588:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10f      	bne.n	80015b0 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	b2da      	uxtb	r2, r3
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	f362 0301 	bfi	r3, r2, #0, #2
 800159e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80015a0:	f107 0208 	add.w	r2, r7, #8
 80015a4:	2301      	movs	r3, #1
 80015a6:	2160      	movs	r1, #96	; 0x60
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fe95 	bl	80012d8 <lsm303agr_write_reg>
 80015ae:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 80015b0:	68fb      	ldr	r3, [r7, #12]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80015c6:	f107 0208 	add.w	r2, r7, #8
 80015ca:	2301      	movs	r3, #1
 80015cc:	2160      	movs	r1, #96	; 0x60
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fe6a 	bl	80012a8 <lsm303agr_read_reg>
 80015d4:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10f      	bne.n	80015fc <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	7a3b      	ldrb	r3, [r7, #8]
 80015e6:	f362 0383 	bfi	r3, r2, #2, #2
 80015ea:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80015ec:	f107 0208 	add.w	r2, r7, #8
 80015f0:	2301      	movs	r3, #1
 80015f2:	2160      	movs	r1, #96	; 0x60
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fe6f 	bl	80012d8 <lsm303agr_write_reg>
 80015fa:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 80015fc:	68fb      	ldr	r3, [r7, #12]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <lsm303agr_mag_offset_temp_comp_set>:
  * @param  val    Change the values of comp_temp_en in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001612:	f107 0208 	add.w	r2, r7, #8
 8001616:	2301      	movs	r3, #1
 8001618:	2160      	movs	r1, #96	; 0x60
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fe44 	bl	80012a8 <lsm303agr_read_reg>
 8001620:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10f      	bne.n	8001648 <lsm303agr_mag_offset_temp_comp_set+0x42>
    cfg_reg_a_m.comp_temp_en = (uint8_t)val;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	7a3b      	ldrb	r3, [r7, #8]
 8001632:	f362 13c7 	bfi	r3, r2, #7, #1
 8001636:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8001638:	f107 0208 	add.w	r2, r7, #8
 800163c:	2301      	movs	r3, #1
 800163e:	2160      	movs	r1, #96	; 0x60
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fe49 	bl	80012d8 <lsm303agr_write_reg>
 8001646:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 8001648:	68fb      	ldr	r3, [r7, #12]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <lsm303agr_mag_set_rst_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_set_rst_mode_set(stmdev_ctx_t *ctx,
                                       lsm303agr_set_rst_m_t val)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
 800165e:	f107 0208 	add.w	r2, r7, #8
 8001662:	2301      	movs	r3, #1
 8001664:	2161      	movs	r1, #97	; 0x61
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fe1e 	bl	80012a8 <lsm303agr_read_reg>
 800166c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_b_m, 1);
  if(ret == 0){
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10f      	bne.n	8001694 <lsm303agr_mag_set_rst_mode_set+0x42>
    cfg_reg_b_m.set_rst = (uint8_t)val;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	7a3b      	ldrb	r3, [r7, #8]
 800167e:	f362 0342 	bfi	r3, r2, #1, #2
 8001682:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	2301      	movs	r3, #1
 800168a:	2161      	movs	r1, #97	; 0x61
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fe23 	bl	80012d8 <lsm303agr_write_reg>
 8001692:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_b_m, 1);
  }

  return ret;
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80016aa:	f107 0208 	add.w	r2, r7, #8
 80016ae:	2301      	movs	r3, #1
 80016b0:	2162      	movs	r1, #98	; 0x62
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fdf8 	bl	80012a8 <lsm303agr_read_reg>
 80016b8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_c_m, 1);
  if(ret == 0){
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	7a3b      	ldrb	r3, [r7, #8]
 80016ca:	f362 1304 	bfi	r3, r2, #4, #1
 80016ce:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80016d0:	f107 0208 	add.w	r2, r7, #8
 80016d4:	2301      	movs	r3, #1
 80016d6:	2162      	movs	r1, #98	; 0x62
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fdfd 	bl	80012d8 <lsm303agr_write_reg>
 80016de:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_c_m, 1);
  }

  return ret;
 80016e0:	68fb      	ldr	r3, [r7, #12]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80016f4:	2306      	movs	r3, #6
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	2168      	movs	r1, #104	; 0x68
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fdd4 	bl	80012a8 <lsm303agr_read_reg>
 8001700:	60f8      	str	r0, [r7, #12]
  return ret;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8001716:	2301      	movs	r3, #1
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	210f      	movs	r1, #15
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fdc3 	bl	80012a8 <lsm303agr_read_reg>
 8001722:	60f8      	str	r0, [r7, #12]
  return ret;
 8001724:	68fb      	ldr	r3, [r7, #12]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <lsm303agr_xl_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_status_get(stmdev_ctx_t *ctx,
                                lsm303agr_status_reg_a_t *val)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_A, (uint8_t*) val, 1);
 8001738:	2301      	movs	r3, #1
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	2127      	movs	r1, #39	; 0x27
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fdb2 	bl	80012a8 <lsm303agr_read_reg>
 8001744:	60f8      	str	r0, [r7, #12]
  return ret;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 800175a:	2301      	movs	r3, #1
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	214f      	movs	r1, #79	; 0x4f
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fda1 	bl	80012a8 <lsm303agr_read_reg>
 8001766:	60f8      	str	r0, [r7, #12]
  return ret;
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <lsm303agr_mag_reset_set>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	2301      	movs	r3, #1
 8001784:	2160      	movs	r1, #96	; 0x60
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fd8e 	bl	80012a8 <lsm303agr_read_reg>
 800178c:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  if(ret == 0){
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10f      	bne.n	80017b4 <lsm303agr_mag_reset_set+0x42>
    cfg_reg_a_m.soft_rst = (uint8_t)val;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7a3b      	ldrb	r3, [r7, #8]
 800179e:	f362 1345 	bfi	r3, r2, #5, #1
 80017a2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	2301      	movs	r3, #1
 80017aa:	2160      	movs	r1, #96	; 0x60
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fd93 	bl	80012d8 <lsm303agr_write_reg>
 80017b2:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&cfg_reg_a_m, 1);
  }

  return ret;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <lsm303agr_mag_reset_get>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80017c8:	f107 0208 	add.w	r2, r7, #8
 80017cc:	2301      	movs	r3, #1
 80017ce:	2160      	movs	r1, #96	; 0x60
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fd69 	bl	80012a8 <lsm303agr_read_reg>
 80017d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&cfg_reg_a_m, 1);
  *val = cfg_reg_a_m.soft_rst;
 80017d8:	7a3b      	ldrb	r3, [r7, #8]
 80017da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	701a      	strb	r2, [r3, #0]

  return ret;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <lsm303agr_mag_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_status_get(stmdev_ctx_t *ctx,
                                 lsm303agr_status_reg_m_t *val)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M, (uint8_t*) val, 1);
 80017fa:	2301      	movs	r3, #1
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	2167      	movs	r1, #103	; 0x67
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fd51 	bl	80012a8 <lsm303agr_read_reg>
 8001806:	60f8      	str	r0, [r7, #12]
  return ret;
 8001808:	68fb      	ldr	r3, [r7, #12]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001812:	b590      	push	{r4, r7, lr}
 8001814:	b087      	sub	sp, #28
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	461a      	mov	r2, r3
 800181e:	460b      	mov	r3, r1
 8001820:	72fb      	strb	r3, [r7, #11]
 8001822:	4613      	mov	r3, r2
 8001824:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	685c      	ldr	r4, [r3, #4]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6898      	ldr	r0, [r3, #8]
 800182e:	893b      	ldrh	r3, [r7, #8]
 8001830:	7af9      	ldrb	r1, [r7, #11]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	47a0      	blx	r4
 8001836:	6178      	str	r0, [r7, #20]
  return ret;
 8001838:	697b      	ldr	r3, [r7, #20]
}
 800183a:	4618      	mov	r0, r3
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}

08001842 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001842:	b590      	push	{r4, r7, lr}
 8001844:	b087      	sub	sp, #28
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	461a      	mov	r2, r3
 800184e:	460b      	mov	r3, r1
 8001850:	72fb      	strb	r3, [r7, #11]
 8001852:	4613      	mov	r3, r2
 8001854:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6898      	ldr	r0, [r3, #8]
 800185e:	893b      	ldrh	r3, [r7, #8]
 8001860:	7af9      	ldrb	r1, [r7, #11]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	47a0      	blx	r4
 8001866:	6178      	str	r0, [r7, #20]
  return ret;
 8001868:	697b      	ldr	r3, [r7, #20]
}
 800186a:	4618      	mov	r0, r3
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
	...

08001874 <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018a0 <lsm6dsl_from_fs2g_to_mg+0x2c>
 800188e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	3d79db23 	.word	0x3d79db23

080018a4 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80018ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018d0 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 80018be:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	428c0000 	.word	0x428c0000

080018d4 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80018e0:	f107 0208 	add.w	r2, r7, #8
 80018e4:	2301      	movs	r3, #1
 80018e6:	2110      	movs	r1, #16
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff92 	bl	8001812 <lsm6dsl_read_reg>
 80018ee:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	7a3b      	ldrb	r3, [r7, #8]
 8001900:	f362 0383 	bfi	r3, r2, #2, #2
 8001904:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8001906:	f107 0208 	add.w	r2, r7, #8
 800190a:	2301      	movs	r3, #1
 800190c:	2110      	movs	r1, #16
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff97 	bl	8001842 <lsm6dsl_write_reg>
 8001914:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800192c:	f107 0208 	add.w	r2, r7, #8
 8001930:	2301      	movs	r3, #1
 8001932:	2110      	movs	r1, #16
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff6c 	bl	8001812 <lsm6dsl_read_reg>
 800193a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10f      	bne.n	8001962 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	b2da      	uxtb	r2, r3
 800194a:	7a3b      	ldrb	r3, [r7, #8]
 800194c:	f362 1307 	bfi	r3, r2, #4, #4
 8001950:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8001952:	f107 0208 	add.w	r2, r7, #8
 8001956:	2301      	movs	r3, #1
 8001958:	2110      	movs	r1, #16
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff71 	bl	8001842 <lsm6dsl_write_reg>
 8001960:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	2301      	movs	r3, #1
 800197e:	2111      	movs	r1, #17
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff46 	bl	8001812 <lsm6dsl_read_reg>
 8001986:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2da      	uxtb	r2, r3
 8001996:	7a3b      	ldrb	r3, [r7, #8]
 8001998:	f362 0343 	bfi	r3, r2, #1, #3
 800199c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800199e:	f107 0208 	add.w	r2, r7, #8
 80019a2:	2301      	movs	r3, #1
 80019a4:	2111      	movs	r1, #17
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff4b 	bl	8001842 <lsm6dsl_write_reg>
 80019ac:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80019c4:	f107 0208 	add.w	r2, r7, #8
 80019c8:	2301      	movs	r3, #1
 80019ca:	2111      	movs	r1, #17
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff20 	bl	8001812 <lsm6dsl_read_reg>
 80019d2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10f      	bne.n	80019fa <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	7a3b      	ldrb	r3, [r7, #8]
 80019e4:	f362 1307 	bfi	r3, r2, #4, #4
 80019e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80019ea:	f107 0208 	add.w	r2, r7, #8
 80019ee:	2301      	movs	r3, #1
 80019f0:	2111      	movs	r1, #17
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff25 	bl	8001842 <lsm6dsl_write_reg>
 80019f8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001a10:	f107 0208 	add.w	r2, r7, #8
 8001a14:	2301      	movs	r3, #1
 8001a16:	2112      	movs	r1, #18
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fefa 	bl	8001812 <lsm6dsl_read_reg>
 8001a1e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	7a3b      	ldrb	r3, [r7, #8]
 8001a30:	f362 1386 	bfi	r3, r2, #6, #1
 8001a34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001a36:	f107 0208 	add.w	r2, r7, #8
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	2112      	movs	r1, #18
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff feff 	bl	8001842 <lsm6dsl_write_reg>
 8001a44:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <lsm6dsl_status_reg_get>:
  * @param  val    Registers STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx, lsm6dsl_status_reg_t *val)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	211e      	movs	r1, #30
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff fed6 	bl	8001812 <lsm6dsl_read_reg>
 8001a66:	60f8      	str	r0, [r7, #12]
  return ret;
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	2122      	movs	r1, #34	; 0x22
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fec5 	bl	8001812 <lsm6dsl_read_reg>
 8001a88:	60f8      	str	r0, [r7, #12]
  return ret;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	2128      	movs	r1, #40	; 0x28
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff feb4 	bl	8001812 <lsm6dsl_read_reg>
 8001aaa:	60f8      	str	r0, [r7, #12]
  return ret;
 8001aac:	68fb      	ldr	r3, [r7, #12]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fea3 	bl	8001812 <lsm6dsl_read_reg>
 8001acc:	60f8      	str	r0, [r7, #12]
  return ret;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001ae4:	f107 0208 	add.w	r2, r7, #8
 8001ae8:	2301      	movs	r3, #1
 8001aea:	2112      	movs	r1, #18
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fe90 	bl	8001812 <lsm6dsl_read_reg>
 8001af2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	7a3b      	ldrb	r3, [r7, #8]
 8001b04:	f362 0300 	bfi	r3, r2, #0, #1
 8001b08:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001b0a:	f107 0208 	add.w	r2, r7, #8
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2112      	movs	r1, #18
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fe95 	bl	8001842 <lsm6dsl_write_reg>
 8001b18:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8001b2e:	f107 0208 	add.w	r2, r7, #8
 8001b32:	2301      	movs	r3, #1
 8001b34:	2112      	movs	r1, #18
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fe6b 	bl	8001812 <lsm6dsl_read_reg>
 8001b3c:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001b3e:	7a3b      	ldrb	r3, [r7, #8]
 8001b40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	701a      	strb	r2, [r3, #0]

  return ret;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8001b62:	f107 0208 	add.w	r2, r7, #8
 8001b66:	2301      	movs	r3, #1
 8001b68:	2110      	movs	r1, #16
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fe51 	bl	8001812 <lsm6dsl_read_reg>
 8001b70:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10f      	bne.n	8001b98 <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	7a3b      	ldrb	r3, [r7, #8]
 8001b82:	f362 0300 	bfi	r3, r2, #0, #1
 8001b86:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8001b88:	f107 0208 	add.w	r2, r7, #8
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	2110      	movs	r1, #16
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fe56 	bl	8001842 <lsm6dsl_write_reg>
 8001b96:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8001bae:	f107 0208 	add.w	r2, r7, #8
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	2117      	movs	r1, #23
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fe2b 	bl	8001812 <lsm6dsl_read_reg>
 8001bbc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d120      	bne.n	8001c06 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	7a3b      	ldrb	r3, [r7, #8]
 8001bd0:	f362 03c3 	bfi	r3, r2, #3, #1
 8001bd4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	7a3b      	ldrb	r3, [r7, #8]
 8001be0:	f362 1346 	bfi	r3, r2, #5, #2
 8001be4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001be6:	7a3b      	ldrb	r3, [r7, #8]
 8001be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bec:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001bee:	7a3b      	ldrb	r3, [r7, #8]
 8001bf0:	f36f 0382 	bfc	r3, #2, #1
 8001bf4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8001bf6:	f107 0208 	add.w	r2, r7, #8
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	2117      	movs	r1, #23
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fe1f 	bl	8001842 <lsm6dsl_write_reg>
 8001c04:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8001c1c:	f107 0208 	add.w	r2, r7, #8
 8001c20:	2301      	movs	r3, #1
 8001c22:	2116      	movs	r1, #22
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fdf4 	bl	8001812 <lsm6dsl_read_reg>
 8001c2a:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d157      	bne.n	8001ce2 <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	7a3b      	ldrb	r3, [r7, #8]
 8001c3e:	f362 1305 	bfi	r3, r2, #4, #2
 8001c42:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	09db      	lsrs	r3, r3, #7
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	7a3b      	ldrb	r3, [r7, #8]
 8001c52:	f362 1386 	bfi	r3, r2, #6, #1
 8001c56:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8001c58:	f107 0208 	add.w	r2, r7, #8
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	2116      	movs	r1, #22
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff fdee 	bl	8001842 <lsm6dsl_write_reg>
 8001c66:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d139      	bne.n	8001ce2 <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8001c6e:	f107 020c 	add.w	r2, r7, #12
 8001c72:	2301      	movs	r3, #1
 8001c74:	2115      	movs	r1, #21
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fdcb 	bl	8001812 <lsm6dsl_read_reg>
 8001c7c:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d12e      	bne.n	8001ce2 <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	f362 0301 	bfi	r3, r2, #0, #2
 8001c92:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8001c94:	f107 020c 	add.w	r2, r7, #12
 8001c98:	2301      	movs	r3, #1
 8001c9a:	2115      	movs	r1, #21
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fdd0 	bl	8001842 <lsm6dsl_write_reg>
 8001ca2:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d11b      	bne.n	8001ce2 <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001caa:	f107 0210 	add.w	r2, r7, #16
 8001cae:	2301      	movs	r3, #1
 8001cb0:	2113      	movs	r1, #19
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fdad 	bl	8001812 <lsm6dsl_read_reg>
 8001cb8:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d110      	bne.n	8001ce2 <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	7c3b      	ldrb	r3, [r7, #16]
 8001ccc:	f362 0341 	bfi	r3, r2, #1, #1
 8001cd0:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8001cd2:	f107 0210 	add.w	r2, r7, #16
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	2113      	movs	r1, #19
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fdb1 	bl	8001842 <lsm6dsl_write_reg>
 8001ce0:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001ce2:	697b      	ldr	r3, [r7, #20]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf0:	f001 f88d 	bl	8002e0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf4:	f000 f81a 	bl	8001d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf8:	f7ff f83e 	bl	8000d78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cfc:	f7ff f854 	bl	8000da8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001d00:	f000 ffe8 	bl	8002cd4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	lcdInit(&hi2c1);
 8001d04:	4808      	ldr	r0, [pc, #32]	; (8001d28 <main+0x3c>)
 8001d06:	f7ff f8e3 	bl	8000ed0 <lcdInit>

	H_LCD_Button_InitFSM();
 8001d0a:	f000 fad3 	bl	80022b4 <H_LCD_Button_InitFSM>

	D_LSM303AGR_Init();
 8001d0e:	f000 fd7b 	bl	8002808 <D_LSM303AGR_Init>
	D_LSM6DSL_Init();
 8001d12:	f000 fedf 	bl	8002ad4 <D_LSM6DSL_Init>
	D_LPS22HB_Init();
 8001d16:	f000 fcbd 	bl	8002694 <D_LPS22HB_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001d1a:	f005 f8af 	bl	8006e7c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001d1e:	f7fe fc8b 	bl	8000638 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001d22:	f005 f8df 	bl	8006ee4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001d26:	e7fe      	b.n	8001d26 <main+0x3a>
 8001d28:	20004bd8 	.word	0x20004bd8

08001d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0b8      	sub	sp, #224	; 0xe0
 8001d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d32:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d36:	2234      	movs	r2, #52	; 0x34
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f007 ff03 	bl	8009b46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2290      	movs	r2, #144	; 0x90
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f007 fef4 	bl	8009b46 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <SystemClock_Config+0x120>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a3a      	ldr	r2, [pc, #232]	; (8001e4c <SystemClock_Config+0x120>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <SystemClock_Config+0x120>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d76:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <SystemClock_Config+0x124>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d7e:	4a34      	ldr	r2, [pc, #208]	; (8001e50 <SystemClock_Config+0x124>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <SystemClock_Config+0x124>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d9e:	2310      	movs	r3, #16
 8001da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da4:	2302      	movs	r3, #2
 8001da6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001db0:	2308      	movs	r3, #8
 8001db2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001db6:	2364      	movs	r3, #100	; 0x64
 8001db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 f823 	bl	8004e18 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001dd8:	f000 f84e 	bl	8001e78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ddc:	f002 ffcc 	bl	8004d78 <HAL_PWREx_EnableOverDrive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001de6:	f000 f847 	bl	8001e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dea:	230f      	movs	r3, #15
 8001dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df0:	2302      	movs	r3, #2
 8001df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e0e:	2103      	movs	r1, #3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 faaf 	bl	8005374 <HAL_RCC_ClockConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001e1c:	f000 f82c 	bl	8001e78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001e20:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001e24:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fca2 	bl	800577c <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001e3e:	f000 f81b 	bl	8001e78 <Error_Handler>
  }
}
 8001e42:	bf00      	nop
 8001e44:	37e0      	adds	r7, #224	; 0xe0
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000

08001e54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e66:	f000 ffdf 	bl	8002e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	f06f 0001 	mvn.w	r0, #1
 8001ec6:	f001 f8a9 	bl	800301c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	2019      	movs	r0, #25
 8001eee:	f001 f895 	bl	800301c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ef2:	2019      	movs	r0, #25
 8001ef4:	f001 f8ae 	bl	8003054 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_InitTick+0x9c>)
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_InitTick+0x9c>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6453      	str	r3, [r2, #68]	; 0x44
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_InitTick+0x9c>)
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f10:	f107 0210 	add.w	r2, r7, #16
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fbfc 	bl	8005718 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f20:	f003 fbe6 	bl	80056f0 <HAL_RCC_GetPCLK2Freq>
 8001f24:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <HAL_InitTick+0xa0>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9b      	lsrs	r3, r3, #18
 8001f30:	3b01      	subs	r3, #1
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f42:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f54:	4809      	ldr	r0, [pc, #36]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f56:	f004 f837 	bl	8005fc8 <HAL_TIM_Base_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d104      	bne.n	8001f6a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f60:	4806      	ldr	r0, [pc, #24]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f62:	f004 f867 	bl	8006034 <HAL_TIM_Base_Start_IT>
 8001f66:	4603      	mov	r3, r0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3730      	adds	r7, #48	; 0x30
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	431bde83 	.word	0x431bde83
 8001f7c:	20004da4 	.word	0x20004da4
 8001f80:	40010000 	.word	0x40010000

08001f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fbe:	f004 f863 	bl	8006088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20004da4 	.word	0x20004da4

08001fcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <I2C1_EV_IRQHandler+0x10>)
 8001fd2:	f001 fec1 	bl	8003d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20004bd8 	.word	0x20004bd8

08001fe0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <I2C1_ER_IRQHandler+0x10>)
 8001fe6:	f001 fed1 	bl	8003d8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20004bd8 	.word	0x20004bd8

08001ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
	return 1;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_kill>:

int _kill(int pid, int sig)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800200e:	f007 fd4b 	bl	8009aa8 <__errno>
 8002012:	4602      	mov	r2, r0
 8002014:	2316      	movs	r3, #22
 8002016:	6013      	str	r3, [r2, #0]
	return -1;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_exit>:

void _exit (int status)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ffe7 	bl	8002004 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002036:	e7fe      	b.n	8002036 <_exit+0x12>

08002038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e00a      	b.n	8002060 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800204a:	f3af 8000 	nop.w
 800204e:	4601      	mov	r1, r0
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	60ba      	str	r2, [r7, #8]
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	dbf0      	blt.n	800204a <_read+0x12>
	}

return len;
 8002068:	687b      	ldr	r3, [r7, #4]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e009      	b.n	8002098 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	60ba      	str	r2, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf1      	blt.n	8002084 <_write+0x12>
	}
	return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_close>:

int _close(int file)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
	return -1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d2:	605a      	str	r2, [r3, #4]
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_isatty>:

int _isatty(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
	return 1;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
	return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <_sbrk+0x50>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x16>
		heap_end = &end;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <_sbrk+0x50>)
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <_sbrk+0x54>)
 8002128:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <_sbrk+0x50>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <_sbrk+0x50>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	466a      	mov	r2, sp
 800213a:	4293      	cmp	r3, r2
 800213c:	d907      	bls.n	800214e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800213e:	f007 fcb3 	bl	8009aa8 <__errno>
 8002142:	4602      	mov	r2, r0
 8002144:	230c      	movs	r3, #12
 8002146:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
 800214c:	e006      	b.n	800215c <_sbrk+0x48>
	}

	heap_end += incr;
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <_sbrk+0x50>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a03      	ldr	r2, [pc, #12]	; (8002164 <_sbrk+0x50>)
 8002158:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000020c 	.word	0x2000020c
 8002168:	20004e30 	.word	0x20004e30

0800216c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <SystemInit+0x28>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	4a07      	ldr	r2, [pc, #28]	; (8002194 <SystemInit+0x28>)
 8002178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800217c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SystemInit+0x28>)
 8002182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002186:	609a      	str	r2, [r3, #8]
#endif
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <H_LCD_Perform_Tx>:
static inline void H_LCD_Perform_Tx(row_t row) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, lcd_tx_buffer, strlen((char const*) lcd_tx_buffer), 1000);
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <H_LCD_Perform_Tx+0x40>)
 80021a4:	f7fe f84c 	bl	8000240 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b0:	4909      	ldr	r1, [pc, #36]	; (80021d8 <H_LCD_Perform_Tx+0x40>)
 80021b2:	480a      	ldr	r0, [pc, #40]	; (80021dc <H_LCD_Perform_Tx+0x44>)
 80021b4:	f004 f9bc 	bl	8006530 <HAL_UART_Transmit>
	HAL_Delay(H_LCD_TX_GRACE);
 80021b8:	2032      	movs	r0, #50	; 0x32
 80021ba:	f000 fe55 	bl	8002e68 <HAL_Delay>
	lcdSetCursor(0, row);
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	4619      	mov	r1, r3
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7fe fee8 	bl	8000f98 <lcdSetCursor>
	lcdPrint((char const*) lcd_tx_buffer);
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <H_LCD_Perform_Tx+0x40>)
 80021ca:	f7fe ff07 	bl	8000fdc <lcdPrint>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20004c60 	.word	0x20004c60
 80021dc:	20004b58 	.word	0x20004b58

080021e0 <H_LCD_Round_Error>:
 *
 */

#include "u_lcd_helper.h"

void H_LCD_Round_Error(const float mean, int *round, int *error) {
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80021ea:	60b8      	str	r0, [r7, #8]
 80021ec:	6079      	str	r1, [r7, #4]
	float tmp = mean;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	617b      	str	r3, [r7, #20]
	*round = (int) tmp;
 80021f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fa:	ee17 2a90 	vmov	r2, s15
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	601a      	str	r2, [r3, #0]
	tmp -= *round;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002216:	edc7 7a05 	vstr	s15, [r7, #20]
	tmp *= 100;
 800221a:	edd7 7a05 	vldr	s15, [r7, #20]
 800221e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002250 <H_LCD_Round_Error+0x70>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	edc7 7a05 	vstr	s15, [r7, #20]
	*error = abs((int) tmp);
 800222a:	edd7 7a05 	vldr	s15, [r7, #20]
 800222e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002232:	ee17 3a90 	vmov	r3, s15
 8002236:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800223a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	42c80000 	.word	0x42c80000

08002254 <H_LCD_Print>:

// _tttt:-0000.00_
void H_LCD_Print(char const* text, const int num_a, const int num_b, row_t row) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	70fb      	strb	r3, [r7, #3]
	sprintf((char*) lcd_tx_buffer, " %s:%.5d.%.2d ", text, num_a, num_b);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4906      	ldr	r1, [pc, #24]	; (8002284 <H_LCD_Print+0x30>)
 800226c:	4806      	ldr	r0, [pc, #24]	; (8002288 <H_LCD_Print+0x34>)
 800226e:	f008 faa7 	bl	800a7c0 <siprintf>
	H_LCD_Perform_Tx(row);
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff8f 	bl	8002198 <H_LCD_Perform_Tx>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	0800c574 	.word	0x0800c574
 8002288:	20004c60 	.word	0x20004c60

0800228c <H_LCD_Blank>:

void H_LCD_Blank(row_t row) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
	memset(lcd_tx_buffer, '\0', 16);
 8002296:	2210      	movs	r2, #16
 8002298:	2100      	movs	r1, #0
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <H_LCD_Blank+0x24>)
 800229c:	f007 fc53 	bl	8009b46 <memset>
	H_LCD_Perform_Tx(row);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff78 	bl	8002198 <H_LCD_Perform_Tx>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20004c60 	.word	0x20004c60

080022b4 <H_LCD_Button_InitFSM>:

void H_LCD_Button_InitFSM() {
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

	pAc1A.transitions[0] = &pAc2A;
 80022b8:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 80022ba:	4a3c      	ldr	r2, [pc, #240]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 80022bc:	601a      	str	r2, [r3, #0]
	pAc1A.transitions[1] = &pAc1B;
 80022be:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 80022c0:	4a3b      	ldr	r2, [pc, #236]	; (80023b0 <H_LCD_Button_InitFSM+0xfc>)
 80022c2:	605a      	str	r2, [r3, #4]
	pAc1A.transitions[2] = &pAc1A;
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 80022c6:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 80022c8:	609a      	str	r2, [r3, #8]
	pAc1A.transitions[3] = &pPrs;
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 80022cc:	4a39      	ldr	r2, [pc, #228]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 80022ce:	60da      	str	r2, [r3, #12]

	pAc1B.transitions[0] = &pAc2A;
 80022d0:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <H_LCD_Button_InitFSM+0xfc>)
 80022d2:	4a36      	ldr	r2, [pc, #216]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 80022d4:	601a      	str	r2, [r3, #0]
	pAc1B.transitions[1] = &pAc1A;
 80022d6:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <H_LCD_Button_InitFSM+0xfc>)
 80022d8:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 80022da:	605a      	str	r2, [r3, #4]
	pAc1B.transitions[2] = &pAc1B;
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <H_LCD_Button_InitFSM+0xfc>)
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <H_LCD_Button_InitFSM+0xfc>)
 80022e0:	609a      	str	r2, [r3, #8]
	pAc1B.transitions[3] = &pPrs;
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <H_LCD_Button_InitFSM+0xfc>)
 80022e4:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 80022e6:	60da      	str	r2, [r3, #12]

	pAc2A.transitions[0] = &pGyrA;
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 80022ea:	4a33      	ldr	r2, [pc, #204]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 80022ec:	601a      	str	r2, [r3, #0]
	pAc2A.transitions[1] = &pAc2B;
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 80022f0:	4a32      	ldr	r2, [pc, #200]	; (80023bc <H_LCD_Button_InitFSM+0x108>)
 80022f2:	605a      	str	r2, [r3, #4]
	pAc2A.transitions[2] = &pAc2A;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 80022f6:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 80022f8:	609a      	str	r2, [r3, #8]
	pAc2A.transitions[3] = &pAc1A;
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 80022fc:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 80022fe:	60da      	str	r2, [r3, #12]

	pAc2B.transitions[0] = &pGyrA;
 8002300:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <H_LCD_Button_InitFSM+0x108>)
 8002302:	4a2d      	ldr	r2, [pc, #180]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 8002304:	601a      	str	r2, [r3, #0]
	pAc2B.transitions[1] = &pAc2A;
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <H_LCD_Button_InitFSM+0x108>)
 8002308:	4a28      	ldr	r2, [pc, #160]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 800230a:	605a      	str	r2, [r3, #4]
	pAc2B.transitions[2] = &pAc2B;
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <H_LCD_Button_InitFSM+0x108>)
 800230e:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <H_LCD_Button_InitFSM+0x108>)
 8002310:	609a      	str	r2, [r3, #8]
	pAc2B.transitions[3] = &pAc1A;
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <H_LCD_Button_InitFSM+0x108>)
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 8002316:	60da      	str	r2, [r3, #12]

	pGyrA.transitions[0] = &pMagA;
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 800231a:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 800231c:	601a      	str	r2, [r3, #0]
	pGyrA.transitions[1] = &pGyrB;
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 8002320:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <H_LCD_Button_InitFSM+0x110>)
 8002322:	605a      	str	r2, [r3, #4]
	pGyrA.transitions[2] = &pGyrA;
 8002324:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 8002326:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 8002328:	609a      	str	r2, [r3, #8]
	pGyrA.transitions[3] = &pAc2A;
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 800232e:	60da      	str	r2, [r3, #12]

	pGyrB.transitions[0] = &pMagA;
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <H_LCD_Button_InitFSM+0x110>)
 8002332:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 8002334:	601a      	str	r2, [r3, #0]
	pGyrB.transitions[1] = &pGyrA;
 8002336:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <H_LCD_Button_InitFSM+0x110>)
 8002338:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 800233a:	605a      	str	r2, [r3, #4]
	pGyrB.transitions[2] = &pGyrB;
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <H_LCD_Button_InitFSM+0x110>)
 800233e:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <H_LCD_Button_InitFSM+0x110>)
 8002340:	609a      	str	r2, [r3, #8]
	pGyrB.transitions[3] = &pAc2A;
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <H_LCD_Button_InitFSM+0x110>)
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <H_LCD_Button_InitFSM+0xf8>)
 8002346:	60da      	str	r2, [r3, #12]

	pMagA.transitions[0] = &pPrs;
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 800234c:	601a      	str	r2, [r3, #0]
	pMagA.transitions[1] = &pMagB;
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 8002350:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <H_LCD_Button_InitFSM+0x114>)
 8002352:	605a      	str	r2, [r3, #4]
	pMagA.transitions[2] = &pMagA;
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 8002356:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 8002358:	609a      	str	r2, [r3, #8]
	pMagA.transitions[3] = &pGyrA;
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 800235c:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 800235e:	60da      	str	r2, [r3, #12]

	pMagB.transitions[0] = &pPrs;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <H_LCD_Button_InitFSM+0x114>)
 8002362:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 8002364:	601a      	str	r2, [r3, #0]
	pMagB.transitions[1] = &pMagA;
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <H_LCD_Button_InitFSM+0x114>)
 8002368:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 800236a:	605a      	str	r2, [r3, #4]
	pMagB.transitions[2] = &pMagB;
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <H_LCD_Button_InitFSM+0x114>)
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <H_LCD_Button_InitFSM+0x114>)
 8002370:	609a      	str	r2, [r3, #8]
	pMagB.transitions[3] = &pGyrA;
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <H_LCD_Button_InitFSM+0x114>)
 8002374:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <H_LCD_Button_InitFSM+0x104>)
 8002376:	60da      	str	r2, [r3, #12]

	pPrs.transitions[0] = &pAc1A;
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 800237c:	601a      	str	r2, [r3, #0]
	pPrs.transitions[1] = &pPrs;
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 8002382:	605a      	str	r2, [r3, #4]
	pPrs.transitions[2] = &pPrs;
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 8002388:	609a      	str	r2, [r3, #8]
	pPrs.transitions[3] = &pMagA;
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <H_LCD_Button_InitFSM+0x100>)
 800238c:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <H_LCD_Button_InitFSM+0x10c>)
 800238e:	60da      	str	r2, [r3, #12]

	fsm_state_buffer[0] = &pAc1A;
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <H_LCD_Button_InitFSM+0x118>)
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 8002394:	601a      	str	r2, [r3, #0]
	fsm_state_buffer[1] = &pAc1A;
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <H_LCD_Button_InitFSM+0x118>)
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <H_LCD_Button_InitFSM+0xf4>)
 800239a:	605a      	str	r2, [r3, #4]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20004d10 	.word	0x20004d10
 80023ac:	20004ce4 	.word	0x20004ce4
 80023b0:	20004c50 	.word	0x20004c50
 80023b4:	20004d60 	.word	0x20004d60
 80023b8:	20004d70 	.word	0x20004d70
 80023bc:	20004c28 	.word	0x20004c28
 80023c0:	20004b20 	.word	0x20004b20
 80023c4:	20004b30 	.word	0x20004b30
 80023c8:	20004cf4 	.word	0x20004cf4
 80023cc:	20004b4c 	.word	0x20004b4c

080023d0 <H_LCD_Button_StepFSM>:

void H_LCD_Button_StepFSM(uint8_t but) {
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	int tid = -1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	60fb      	str	r3, [r7, #12]
	if (!(but & D_BUTTON1_MASK)) tid = 0;
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <H_LCD_Button_StepFSM+0x20>
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e016      	b.n	800241e <H_LCD_Button_StepFSM+0x4e>
	else if (!(but & D_BUTTON2_MASK)) tid = 1;
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <H_LCD_Button_StepFSM+0x30>
 80023fa:	2301      	movs	r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e00e      	b.n	800241e <H_LCD_Button_StepFSM+0x4e>
	else if (!(but & D_BUTTON3_MASK)) tid = 2;
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <H_LCD_Button_StepFSM+0x40>
 800240a:	2302      	movs	r3, #2
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e006      	b.n	800241e <H_LCD_Button_StepFSM+0x4e>
	else if (!(but & D_BUTTON4_MASK)) tid = 3;
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <H_LCD_Button_StepFSM+0x4e>
 800241a:	2303      	movs	r3, #3
 800241c:	60fb      	str	r3, [r7, #12]
	if(tid != -1) {
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d006      	beq.n	8002434 <H_LCD_Button_StepFSM+0x64>
		fsm_state_buffer[1] = fsm_state_buffer[0]->transitions[tid];
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <H_LCD_Button_StepFSM+0x70>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <H_LCD_Button_StepFSM+0x70>)
 8002432:	6053      	str	r3, [r2, #4]
	}
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	20004b4c 	.word	0x20004b4c

08002444 <L_New>:
 * Copyright 2020 Jacopo Maltagliati <j.maltagliati@campus.unimib.it>
 */

#include "u_list.h"

list_t* L_New(unsigned int maxsize) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	list_t *ret = (list_t*) malloc(sizeof(list_t));
 800244c:	2014      	movs	r0, #20
 800244e:	f007 fb67 	bl	8009b20 <malloc>
 8002452:	4603      	mov	r3, r0
 8002454:	60fb      	str	r3, [r7, #12]
	assert(ret != NULL);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <L_New+0x24>
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <L_New+0x50>)
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <L_New+0x54>)
 8002460:	210d      	movs	r1, #13
 8002462:	480e      	ldr	r0, [pc, #56]	; (800249c <L_New+0x58>)
 8002464:	f007 fb02 	bl	8009a6c <__assert_func>
	ret->maxsize = maxsize;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	601a      	str	r2, [r3, #0]
	ret->first = NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
	ret->last = ret->first;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]
	ret->size = 0;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
	ret->mean = 0;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
	return ret;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	0800c584 	.word	0x0800c584
 8002498:	0800c754 	.word	0x0800c754
 800249c:	0800c590 	.word	0x0800c590

080024a0 <L_Insert>:

void L_Insert(list_t *list, float content) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	ed87 0a00 	vstr	s0, [r7]
	lnode_t *newnode = (lnode_t*) pvPortMalloc(sizeof(lnode_t));
 80024ac:	2008      	movs	r0, #8
 80024ae:	f007 f8fd 	bl	80096ac <pvPortMalloc>
 80024b2:	60f8      	str	r0, [r7, #12]
	assert(newnode != NULL);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <L_Insert+0x26>
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <L_Insert+0xc0>)
 80024bc:	4a29      	ldr	r2, [pc, #164]	; (8002564 <L_Insert+0xc4>)
 80024be:	2118      	movs	r1, #24
 80024c0:	4829      	ldr	r0, [pc, #164]	; (8002568 <L_Insert+0xc8>)
 80024c2:	f007 fad3 	bl	8009a6c <__assert_func>
	newnode->content = content;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	601a      	str	r2, [r3, #0]
	newnode->next = NULL;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
	if (list->size == list->maxsize) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d11a      	bne.n	8002514 <L_Insert+0x74>
		lnode_t *dednode;
		dednode = list->first;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	60bb      	str	r3, [r7, #8]
		list->first = dednode->next;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	605a      	str	r2, [r3, #4]
		assert(list->first != NULL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <L_Insert+0x60>
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <L_Insert+0xcc>)
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <L_Insert+0xc4>)
 80024f8:	211f      	movs	r1, #31
 80024fa:	481b      	ldr	r0, [pc, #108]	; (8002568 <L_Insert+0xc8>)
 80024fc:	f007 fab6 	bl	8009a6c <__assert_func>
		list->size--;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	1e5a      	subs	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60da      	str	r2, [r3, #12]
		vPortFree(dednode);
 800250a:	68b8      	ldr	r0, [r7, #8]
 800250c:	f007 f996 	bl	800983c <vPortFree>
		dednode = NULL;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
	}
	if (list->last != NULL) {
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d011      	beq.n	8002540 <L_Insert+0xa0>
		assert(list->first != NULL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <L_Insert+0x90>
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <L_Insert+0xcc>)
 8002526:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <L_Insert+0xc4>)
 8002528:	2125      	movs	r1, #37	; 0x25
 800252a:	480f      	ldr	r0, [pc, #60]	; (8002568 <L_Insert+0xc8>)
 800252c:	f007 fa9e 	bl	8009a6c <__assert_func>
		list->last->next = newnode;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
		list->last = newnode;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	e005      	b.n	800254c <L_Insert+0xac>
	} else {
		list->first = newnode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
		list->last = newnode;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	609a      	str	r2, [r3, #8]
	}
	list->size++;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60da      	str	r2, [r3, #12]
	return;
 8002556:	bf00      	nop
}
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	0800c5a8 	.word	0x0800c5a8
 8002564:	0800c75c 	.word	0x0800c75c
 8002568:	0800c590 	.word	0x0800c590
 800256c:	0800c5b8 	.word	0x0800c5b8

08002570 <L_UpdateMean>:

void L_UpdateMean(list_t *list) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	list->mean = 0;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
	if (list->first == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d033      	beq.n	80025f0 <L_UpdateMean+0x80>
		return;
	lnode_t *curnode = list->first;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60fb      	str	r3, [r7, #12]
	unsigned int asize = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
	do {
		asize++;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
		list->mean += curnode->content;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	ed93 7a04 	vldr	s14, [r3, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	edc3 7a04 	vstr	s15, [r3, #16]
		curnode = curnode->next;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60fb      	str	r3, [r7, #12]
	} while (curnode != NULL);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1eb      	bne.n	8002592 <L_UpdateMean+0x22>
	assert(asize == list->size);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d005      	beq.n	80025d0 <L_UpdateMean+0x60>
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <L_UpdateMean+0x88>)
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <L_UpdateMean+0x8c>)
 80025c8:	213b      	movs	r1, #59	; 0x3b
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <L_UpdateMean+0x90>)
 80025cc:	f007 fa4e 	bl	8009a6c <__assert_func>
	list->mean /= list->size;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	edd3 6a04 	vldr	s13, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 80025ec:	bf00      	nop
 80025ee:	e000      	b.n	80025f2 <L_UpdateMean+0x82>
		return;
 80025f0:	bf00      	nop
}
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	0800c5cc 	.word	0x0800c5cc
 80025fc:	0800c768 	.word	0x0800c768
 8002600:	0800c590 	.word	0x0800c590

08002604 <lps22hb_platform_write>:
 */

#include "u_lps22hb_driver.h"

int32_t lps22hb_platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af04      	add	r7, sp, #16
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	461a      	mov	r2, r3
 8002610:	460b      	mov	r3, r1
 8002612:	72fb      	strb	r3, [r7, #11]
 8002614:	4613      	mov	r3, r2
 8002616:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <lps22hb_platform_write+0x44>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d10d      	bne.n	800263c <lps22hb_platform_write+0x38>
		/* Write multiple command */
		HAL_I2C_Mem_Write(handle, LPS22HB_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT,
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	b29a      	uxth	r2, r3
 8002624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002628:	9302      	str	r3, [sp, #8]
 800262a:	893b      	ldrh	r3, [r7, #8]
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	21bb      	movs	r1, #187	; 0xbb
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f001 f960 	bl	80038fc <HAL_I2C_Mem_Write>
				bufp, len, 1000);
	}
	return 0;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20004bd8 	.word	0x20004bd8

0800264c <lps22hb_platform_read>:

int32_t lps22hb_platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af04      	add	r7, sp, #16
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	460b      	mov	r3, r1
 800265a:	72fb      	strb	r3, [r7, #11]
 800265c:	4613      	mov	r3, r2
 800265e:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <lps22hb_platform_read+0x44>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10d      	bne.n	8002684 <lps22hb_platform_read+0x38>
		/* Read multiple command */
		HAL_I2C_Mem_Read(handle, LPS22HB_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp,
 8002668:	7afb      	ldrb	r3, [r7, #11]
 800266a:	b29a      	uxth	r2, r3
 800266c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002670:	9302      	str	r3, [sp, #8]
 8002672:	893b      	ldrh	r3, [r7, #8]
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2301      	movs	r3, #1
 800267c:	21bb      	movs	r1, #187	; 0xbb
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f001 fa50 	bl	8003b24 <HAL_I2C_Mem_Read>
				len, 1000);
	}
	return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20004bd8 	.word	0x20004bd8

08002694 <D_LPS22HB_Init>:

void D_LPS22HB_Init() {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
	uint8_t id, rst = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	71bb      	strb	r3, [r7, #6]

	lps22hb_hPa_list = L_New(LPS22HB_LIST_SIZE);
 800269e:	2028      	movs	r0, #40	; 0x28
 80026a0:	f7ff fed0 	bl	8002444 <L_New>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <D_LPS22HB_Init+0x6c>)
 80026a8:	601a      	str	r2, [r3, #0]

	lps22hb_dev_ctx.write_reg = lps22hb_platform_write;
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <D_LPS22HB_Init+0x70>)
 80026ac:	4a16      	ldr	r2, [pc, #88]	; (8002708 <D_LPS22HB_Init+0x74>)
 80026ae:	601a      	str	r2, [r3, #0]
	lps22hb_dev_ctx.read_reg = lps22hb_platform_read;
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <D_LPS22HB_Init+0x70>)
 80026b2:	4a16      	ldr	r2, [pc, #88]	; (800270c <D_LPS22HB_Init+0x78>)
 80026b4:	605a      	str	r2, [r3, #4]
	lps22hb_dev_ctx.handle = &hi2c1;
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <D_LPS22HB_Init+0x70>)
 80026b8:	4a15      	ldr	r2, [pc, #84]	; (8002710 <D_LPS22HB_Init+0x7c>)
 80026ba:	609a      	str	r2, [r3, #8]

	// Poll device
	while (id != LPS22HB_ID) {
 80026bc:	e004      	b.n	80026c8 <D_LPS22HB_Init+0x34>
		lps22hb_device_id_get(&lps22hb_dev_ctx, &id);
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	4619      	mov	r1, r3
 80026c2:	4810      	ldr	r0, [pc, #64]	; (8002704 <D_LPS22HB_Init+0x70>)
 80026c4:	f7fe fda0 	bl	8001208 <lps22hb_device_id_get>
	while (id != LPS22HB_ID) {
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	2bb1      	cmp	r3, #177	; 0xb1
 80026cc:	d1f7      	bne.n	80026be <D_LPS22HB_Init+0x2a>
	}

	// Restore default configuration
	lps22hb_reset_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);
 80026ce:	2101      	movs	r1, #1
 80026d0:	480c      	ldr	r0, [pc, #48]	; (8002704 <D_LPS22HB_Init+0x70>)
 80026d2:	f7fe fdaa 	bl	800122a <lps22hb_reset_set>
	do {
		lps22hb_reset_get(&lps22hb_dev_ctx, &rst);
 80026d6:	1dbb      	adds	r3, r7, #6
 80026d8:	4619      	mov	r1, r3
 80026da:	480a      	ldr	r0, [pc, #40]	; (8002704 <D_LPS22HB_Init+0x70>)
 80026dc:	f7fe fdcb 	bl	8001276 <lps22hb_reset_get>
	} while (rst);
 80026e0:	79bb      	ldrb	r3, [r7, #6]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f7      	bne.n	80026d6 <D_LPS22HB_Init+0x42>

	// Enable Block Data Update
	//lps22hb_block_data_update_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);

	// Enable low pass filter on output
	lps22hb_low_pass_filter_mode_set(&lps22hb_dev_ctx, LPS22HB_LPF_ODR_DIV_2);
 80026e6:	2100      	movs	r1, #0
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <D_LPS22HB_Init+0x70>)
 80026ea:	f7fe fd17 	bl	800111c <lps22hb_low_pass_filter_mode_set>

	// Set Data-ready signal on INT_DRDY pin
	//lps22hb_drdy_on_int_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);

	// Set Output Data Rate
	lps22hb_data_rate_set(&lps22hb_dev_ctx, LPS22HB_ODR_10_Hz);
 80026ee:	2102      	movs	r1, #2
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <D_LPS22HB_Init+0x70>)
 80026f2:	f7fe fd39 	bl	8001168 <lps22hb_data_rate_set>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20004ca0 	.word	0x20004ca0
 8002704:	20004ca4 	.word	0x20004ca4
 8002708:	08002605 	.word	0x08002605
 800270c:	0800264d 	.word	0x0800264d
 8002710:	20004bd8 	.word	0x20004bd8

08002714 <D_LPS22HB_Read>:

void D_LPS22HB_Read() {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
	uint8_t reg;

	/* Read output only if new value is available */
	lps22hb_press_data_ready_get(&lps22hb_dev_ctx, &reg);
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	4619      	mov	r1, r3
 800271e:	480e      	ldr	r0, [pc, #56]	; (8002758 <D_LPS22HB_Read+0x44>)
 8002720:	f7fe fd48 	bl	80011b4 <lps22hb_press_data_ready_get>
	if (reg) {
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d012      	beq.n	8002750 <D_LPS22HB_Read+0x3c>
		memset(lps22hb_data.raw.u8bit, 0x00, sizeof(int32_t));
 800272a:	2204      	movs	r2, #4
 800272c:	2100      	movs	r1, #0
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <D_LPS22HB_Read+0x48>)
 8002730:	f007 fa09 	bl	8009b46 <memset>
		lps22hb_pressure_raw_get(&lps22hb_dev_ctx, lps22hb_data.raw.u8bit);
 8002734:	4909      	ldr	r1, [pc, #36]	; (800275c <D_LPS22HB_Read+0x48>)
 8002736:	4808      	ldr	r0, [pc, #32]	; (8002758 <D_LPS22HB_Read+0x44>)
 8002738:	f7fe fd55 	bl	80011e6 <lps22hb_pressure_raw_get>
		lps22hb_data.hPa = lps22hb_from_lsb_to_hpa(lps22hb_data.raw.i32bit);
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <D_LPS22HB_Read+0x48>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fcd3 	bl	80010ec <lps22hb_from_lsb_to_hpa>
 8002746:	eef0 7a40 	vmov.f32	s15, s0
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <D_LPS22HB_Read+0x48>)
 800274c:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20004ca4 	.word	0x20004ca4
 800275c:	20004d54 	.word	0x20004d54

08002760 <lsm303agr_platform_write>:
 */

#include "u_lsm303agr_driver.h"

int32_t lsm303agr_platform_write(void *handle, uint8_t Reg,
		uint8_t *Bufp, uint16_t len) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af04      	add	r7, sp, #16
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	461a      	mov	r2, r3
 800276c:	460b      	mov	r3, r1
 800276e:	72fb      	strb	r3, [r7, #11]
 8002770:	4613      	mov	r3, r2
 8002772:	813b      	strh	r3, [r7, #8]
	uint32_t i2c_add = (uint32_t) handle;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	617b      	str	r3, [r7, #20]
	if (i2c_add == LSM303AGR_I2C_ADD_XL) {
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b33      	cmp	r3, #51	; 0x33
 800277c:	d103      	bne.n	8002786 <lsm303agr_platform_write+0x26>
		/* enable auto incremented in multiple read/write commands */
		Reg |= 0x80;
 800277e:	7afb      	ldrb	r3, [r7, #11]
 8002780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002784:	72fb      	strb	r3, [r7, #11]
	}
	HAL_I2C_Mem_Write(&hi2c1, i2c_add, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len,
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	b299      	uxth	r1, r3
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	b29a      	uxth	r2, r3
 800278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002792:	9302      	str	r3, [sp, #8]
 8002794:	893b      	ldrh	r3, [r7, #8]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	4804      	ldr	r0, [pc, #16]	; (80027b0 <lsm303agr_platform_write+0x50>)
 80027a0:	f001 f8ac 	bl	80038fc <HAL_I2C_Mem_Write>
			1000);
	return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20004bd8 	.word	0x20004bd8

080027b4 <lsm303agr_platform_read>:

int32_t lsm303agr_platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	461a      	mov	r2, r3
 80027c0:	460b      	mov	r3, r1
 80027c2:	72fb      	strb	r3, [r7, #11]
 80027c4:	4613      	mov	r3, r2
 80027c6:	813b      	strh	r3, [r7, #8]
	uint32_t i2c_add = (uint32_t) handle;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	617b      	str	r3, [r7, #20]
	if (i2c_add == LSM303AGR_I2C_ADD_XL) {
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b33      	cmp	r3, #51	; 0x33
 80027d0:	d103      	bne.n	80027da <lsm303agr_platform_read+0x26>
		/* enable auto incremented in multiple read/write commands */
		Reg |= 0x80;
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027d8:	72fb      	strb	r3, [r7, #11]
	}
	HAL_I2C_Mem_Read(&hi2c1, (uint8_t) i2c_add, Reg, I2C_MEMADD_SIZE_8BIT, Bufp,
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	b299      	uxth	r1, r3
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	893b      	ldrh	r3, [r7, #8]
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2301      	movs	r3, #1
 80027f4:	4803      	ldr	r0, [pc, #12]	; (8002804 <lsm303agr_platform_read+0x50>)
 80027f6:	f001 f995 	bl	8003b24 <HAL_I2C_Mem_Read>
			len, 1000);
	return 0;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20004bd8 	.word	0x20004bd8

08002808 <D_LSM303AGR_Init>:

void D_LSM303AGR_Init() {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
	uint8_t id, rst = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	71bb      	strb	r3, [r7, #6]

	lsm303agr_acc_x_list = L_New(LSM303AGR_XL_LIST_SIZE);
 8002812:	200a      	movs	r0, #10
 8002814:	f7ff fe16 	bl	8002444 <L_New>
 8002818:	4602      	mov	r2, r0
 800281a:	4b40      	ldr	r3, [pc, #256]	; (800291c <D_LSM303AGR_Init+0x114>)
 800281c:	601a      	str	r2, [r3, #0]
	lsm303agr_acc_y_list = L_New(LSM303AGR_XL_LIST_SIZE);
 800281e:	200a      	movs	r0, #10
 8002820:	f7ff fe10 	bl	8002444 <L_New>
 8002824:	4602      	mov	r2, r0
 8002826:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <D_LSM303AGR_Init+0x118>)
 8002828:	601a      	str	r2, [r3, #0]
	lsm303agr_acc_z_list = L_New(LSM303AGR_XL_LIST_SIZE);
 800282a:	200a      	movs	r0, #10
 800282c:	f7ff fe0a 	bl	8002444 <L_New>
 8002830:	4602      	mov	r2, r0
 8002832:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <D_LSM303AGR_Init+0x11c>)
 8002834:	601a      	str	r2, [r3, #0]

	// Accelerometro
	lsm303agr_dev_ctx_xl.write_reg = lsm303agr_platform_write;
 8002836:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <D_LSM303AGR_Init+0x120>)
 8002838:	4a3c      	ldr	r2, [pc, #240]	; (800292c <D_LSM303AGR_Init+0x124>)
 800283a:	601a      	str	r2, [r3, #0]
	lsm303agr_dev_ctx_xl.read_reg = lsm303agr_platform_read;
 800283c:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <D_LSM303AGR_Init+0x120>)
 800283e:	4a3c      	ldr	r2, [pc, #240]	; (8002930 <D_LSM303AGR_Init+0x128>)
 8002840:	605a      	str	r2, [r3, #4]
	lsm303agr_dev_ctx_xl.handle = (void*) LSM303AGR_I2C_ADD_XL;
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <D_LSM303AGR_Init+0x120>)
 8002844:	2233      	movs	r2, #51	; 0x33
 8002846:	609a      	str	r2, [r3, #8]

	// Poll device
	while (id != LSM303AGR_ID_XL) {
 8002848:	e004      	b.n	8002854 <D_LSM303AGR_Init+0x4c>
		lsm303agr_xl_device_id_get(&lsm303agr_dev_ctx_xl, &id);
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	4619      	mov	r1, r3
 800284e:	4836      	ldr	r0, [pc, #216]	; (8002928 <D_LSM303AGR_Init+0x120>)
 8002850:	f7fe ff5c 	bl	800170c <lsm303agr_xl_device_id_get>
	while (id != LSM303AGR_ID_XL) {
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b33      	cmp	r3, #51	; 0x33
 8002858:	d1f7      	bne.n	800284a <D_LSM303AGR_Init+0x42>
	}

	/* Enable Block Data Update */
	lsm303agr_xl_block_data_update_set(&lsm303agr_dev_ctx_xl, PROPERTY_ENABLE);
 800285a:	2101      	movs	r1, #1
 800285c:	4832      	ldr	r0, [pc, #200]	; (8002928 <D_LSM303AGR_Init+0x120>)
 800285e:	f7fe fe4f 	bl	8001500 <lsm303agr_xl_block_data_update_set>

	/* Set Output Data Rate */
	lsm303agr_xl_data_rate_set(&lsm303agr_dev_ctx_xl, LSM303AGR_XL_ODR_1Hz);
 8002862:	2101      	movs	r1, #1
 8002864:	4830      	ldr	r0, [pc, #192]	; (8002928 <D_LSM303AGR_Init+0x120>)
 8002866:	f7fe fdff 	bl	8001468 <lsm303agr_xl_data_rate_set>

	/* Set accelerometer full scale */
	lsm303agr_xl_full_scale_set(&lsm303agr_dev_ctx_xl, LSM303AGR_2g);
 800286a:	2100      	movs	r1, #0
 800286c:	482e      	ldr	r0, [pc, #184]	; (8002928 <D_LSM303AGR_Init+0x120>)
 800286e:	f7fe fe21 	bl	80014b4 <lsm303agr_xl_full_scale_set>

	/* Enable temperature sensor */
	lsm303agr_temperature_meas_set(&lsm303agr_dev_ctx_xl, LSM303AGR_TEMP_ENABLE);
 8002872:	2103      	movs	r1, #3
 8002874:	482c      	ldr	r0, [pc, #176]	; (8002928 <D_LSM303AGR_Init+0x120>)
 8002876:	f7fe fd79 	bl	800136c <lsm303agr_temperature_meas_set>
	/* Set device in continuos mode */
	lsm303agr_xl_operating_mode_set(&lsm303agr_dev_ctx_xl, LSM303AGR_HR_12bit);
 800287a:	2100      	movs	r1, #0
 800287c:	482a      	ldr	r0, [pc, #168]	; (8002928 <D_LSM303AGR_Init+0x120>)
 800287e:	f7fe fd9b 	bl	80013b8 <lsm303agr_xl_operating_mode_set>

	// Magnetometro
	id = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
	rst = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	71bb      	strb	r3, [r7, #6]

	lsm303agr_mag_x_list = L_New(LSM303AGR_MG_LIST_SIZE);
 800288a:	2003      	movs	r0, #3
 800288c:	f7ff fdda 	bl	8002444 <L_New>
 8002890:	4602      	mov	r2, r0
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <D_LSM303AGR_Init+0x12c>)
 8002894:	601a      	str	r2, [r3, #0]
	lsm303agr_mag_y_list = L_New(LSM303AGR_MG_LIST_SIZE);
 8002896:	2003      	movs	r0, #3
 8002898:	f7ff fdd4 	bl	8002444 <L_New>
 800289c:	4602      	mov	r2, r0
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <D_LSM303AGR_Init+0x130>)
 80028a0:	601a      	str	r2, [r3, #0]
	lsm303agr_mag_z_list = L_New(LSM303AGR_MG_LIST_SIZE);
 80028a2:	2003      	movs	r0, #3
 80028a4:	f7ff fdce 	bl	8002444 <L_New>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <D_LSM303AGR_Init+0x134>)
 80028ac:	601a      	str	r2, [r3, #0]

	lsm303agr_dev_ctx_mg.write_reg = lsm303agr_platform_write;
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <D_LSM303AGR_Init+0x124>)
 80028b2:	601a      	str	r2, [r3, #0]
	lsm303agr_dev_ctx_mg.read_reg = lsm303agr_platform_read;
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028b6:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <D_LSM303AGR_Init+0x128>)
 80028b8:	605a      	str	r2, [r3, #4]
	lsm303agr_dev_ctx_mg.handle = (void*) LSM303AGR_I2C_ADD_MG;
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028bc:	223d      	movs	r2, #61	; 0x3d
 80028be:	609a      	str	r2, [r3, #8]

	// Poll device
	while (id != LSM303AGR_ID_MG) {
 80028c0:	e004      	b.n	80028cc <D_LSM303AGR_Init+0xc4>
		lsm303agr_mag_device_id_get(&lsm303agr_dev_ctx_mg, &id);
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	4619      	mov	r1, r3
 80028c6:	481e      	ldr	r0, [pc, #120]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028c8:	f7fe ff42 	bl	8001750 <lsm303agr_mag_device_id_get>
	while (id != LSM303AGR_ID_MG) {
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d1f7      	bne.n	80028c2 <D_LSM303AGR_Init+0xba>
	}

	/* Restore default configuration for magnetometer */
	lsm303agr_mag_reset_set(&lsm303agr_dev_ctx_mg, PROPERTY_ENABLE);
 80028d2:	2101      	movs	r1, #1
 80028d4:	481a      	ldr	r0, [pc, #104]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028d6:	f7fe ff4c 	bl	8001772 <lsm303agr_mag_reset_set>
	do {
		lsm303agr_mag_reset_get(&lsm303agr_dev_ctx_mg, &rst);
 80028da:	1dbb      	adds	r3, r7, #6
 80028dc:	4619      	mov	r1, r3
 80028de:	4818      	ldr	r0, [pc, #96]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028e0:	f7fe ff6d 	bl	80017be <lsm303agr_mag_reset_get>
	} while (rst);
 80028e4:	79bb      	ldrb	r3, [r7, #6]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f7      	bne.n	80028da <D_LSM303AGR_Init+0xd2>

	/* Enable Block Data Update */
	lsm303agr_mag_block_data_update_set(&lsm303agr_dev_ctx_mg, PROPERTY_ENABLE);
 80028ea:	2101      	movs	r1, #1
 80028ec:	4814      	ldr	r0, [pc, #80]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028ee:	f7fe fed6 	bl	800169e <lsm303agr_mag_block_data_update_set>

	/* Set Output Data Rate */
	lsm303agr_mag_data_rate_set(&lsm303agr_dev_ctx_mg, LSM303AGR_MG_ODR_10Hz);
 80028f2:	2100      	movs	r1, #0
 80028f4:	4812      	ldr	r0, [pc, #72]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028f6:	f7fe fe60 	bl	80015ba <lsm303agr_mag_data_rate_set>

	/* Set / Reset magnetic sensor mode */
	lsm303agr_mag_set_rst_mode_set(&lsm303agr_dev_ctx_mg,
 80028fa:	2101      	movs	r1, #1
 80028fc:	4810      	ldr	r0, [pc, #64]	; (8002940 <D_LSM303AGR_Init+0x138>)
 80028fe:	f7fe fea8 	bl	8001652 <lsm303agr_mag_set_rst_mode_set>
			LSM303AGR_SENS_OFF_CANC_EVERY_ODR);

	/* Enable temperature compensation on mag sensor */
	lsm303agr_mag_offset_temp_comp_set(&lsm303agr_dev_ctx_mg, PROPERTY_ENABLE);
 8002902:	2101      	movs	r1, #1
 8002904:	480e      	ldr	r0, [pc, #56]	; (8002940 <D_LSM303AGR_Init+0x138>)
 8002906:	f7fe fe7e 	bl	8001606 <lsm303agr_mag_offset_temp_comp_set>

	/* Set magnetometer in continuos mode */
	lsm303agr_mag_operating_mode_set(&lsm303agr_dev_ctx_mg,
 800290a:	2100      	movs	r1, #0
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <D_LSM303AGR_Init+0x138>)
 800290e:	f7fe fe2e 	bl	800156e <lsm303agr_mag_operating_mode_set>
			LSM303AGR_CONTINUOUS_MODE);
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20004cc4 	.word	0x20004cc4
 8002920:	20004d90 	.word	0x20004d90
 8002924:	20004d84 	.word	0x20004d84
 8002928:	20004d94 	.word	0x20004d94
 800292c:	08002761 	.word	0x08002761
 8002930:	080027b5 	.word	0x080027b5
 8002934:	20004c24 	.word	0x20004c24
 8002938:	20004ce0 	.word	0x20004ce0
 800293c:	20004d5c 	.word	0x20004d5c
 8002940:	20004cd0 	.word	0x20004cd0

08002944 <D_LSM303AGR_XL_Read>:

void D_LSM303AGR_XL_Read() {
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
	/* Read output only if new value is available */
	lsm303agr_reg_t reg;
	lsm303agr_xl_status_get(&lsm303agr_dev_ctx_xl, &reg.status_reg_a);
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	4619      	mov	r1, r3
 800294e:	481b      	ldr	r0, [pc, #108]	; (80029bc <D_LSM303AGR_XL_Read+0x78>)
 8002950:	f7fe feed 	bl	800172e <lsm303agr_xl_status_get>

	if (reg.status_reg_a.zyxda) {
 8002954:	793b      	ldrb	r3, [r7, #4]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d029      	beq.n	80029b4 <D_LSM303AGR_XL_Read+0x70>
		/* Read accelerometer data */
		memset(lsm303agr_xl_data.raw.u8bit, 0x00, 3 * sizeof(int16_t));
 8002960:	2206      	movs	r2, #6
 8002962:	2100      	movs	r1, #0
 8002964:	4816      	ldr	r0, [pc, #88]	; (80029c0 <D_LSM303AGR_XL_Read+0x7c>)
 8002966:	f007 f8ee 	bl	8009b46 <memset>
		lsm303agr_acceleration_raw_get(&lsm303agr_dev_ctx_xl,
 800296a:	4915      	ldr	r1, [pc, #84]	; (80029c0 <D_LSM303AGR_XL_Read+0x7c>)
 800296c:	4813      	ldr	r0, [pc, #76]	; (80029bc <D_LSM303AGR_XL_Read+0x78>)
 800296e:	f7fe fded 	bl	800154c <lsm303agr_acceleration_raw_get>
				lsm303agr_xl_data.raw.u8bit);
		lsm303agr_xl_data.x = lsm303agr_from_fs_2g_hr_to_mg(
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <D_LSM303AGR_XL_Read+0x7c>)
 8002974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fcc5 	bl	8001308 <lsm303agr_from_fs_2g_hr_to_mg>
 800297e:	eef0 7a40 	vmov.f32	s15, s0
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <D_LSM303AGR_XL_Read+0x7c>)
 8002984:	edc3 7a02 	vstr	s15, [r3, #8]
				lsm303agr_xl_data.raw.i16bit[0]);
		lsm303agr_xl_data.y = lsm303agr_from_fs_2g_hr_to_mg(
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <D_LSM303AGR_XL_Read+0x7c>)
 800298a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fcba 	bl	8001308 <lsm303agr_from_fs_2g_hr_to_mg>
 8002994:	eef0 7a40 	vmov.f32	s15, s0
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <D_LSM303AGR_XL_Read+0x7c>)
 800299a:	edc3 7a03 	vstr	s15, [r3, #12]
				lsm303agr_xl_data.raw.i16bit[1]);
		lsm303agr_xl_data.z = lsm303agr_from_fs_2g_hr_to_mg(
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <D_LSM303AGR_XL_Read+0x7c>)
 80029a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fcaf 	bl	8001308 <lsm303agr_from_fs_2g_hr_to_mg>
 80029aa:	eef0 7a40 	vmov.f32	s15, s0
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <D_LSM303AGR_XL_Read+0x7c>)
 80029b0:	edc3 7a04 	vstr	s15, [r3, #16]
				lsm303agr_xl_data.raw.i16bit[2]);
	}
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20004d94 	.word	0x20004d94
 80029c0:	20004d40 	.word	0x20004d40

080029c4 <D_LSM303AGR_MG_Read>:

void D_LSM303AGR_MG_Read() {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
	/* Read output only if new value is available */
	lsm303agr_reg_t reg;

	lsm303agr_mag_status_get(&lsm303agr_dev_ctx_mg, &reg.status_reg_m);
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	481b      	ldr	r0, [pc, #108]	; (8002a3c <D_LSM303AGR_MG_Read+0x78>)
 80029d0:	f7fe ff0e 	bl	80017f0 <lsm303agr_mag_status_get>
	if (reg.status_reg_m.zyxda) {
 80029d4:	793b      	ldrb	r3, [r7, #4]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d029      	beq.n	8002a34 <D_LSM303AGR_MG_Read+0x70>
		/* Read magnetic field data */
		memset(lsm303agr_mg_data.raw.u8bit, 0x00, 3 * sizeof(int16_t));
 80029e0:	2206      	movs	r2, #6
 80029e2:	2100      	movs	r1, #0
 80029e4:	4816      	ldr	r0, [pc, #88]	; (8002a40 <D_LSM303AGR_MG_Read+0x7c>)
 80029e6:	f007 f8ae 	bl	8009b46 <memset>
		lsm303agr_magnetic_raw_get(&lsm303agr_dev_ctx_mg, lsm303agr_mg_data.raw.u8bit);
 80029ea:	4915      	ldr	r1, [pc, #84]	; (8002a40 <D_LSM303AGR_MG_Read+0x7c>)
 80029ec:	4813      	ldr	r0, [pc, #76]	; (8002a3c <D_LSM303AGR_MG_Read+0x78>)
 80029ee:	f7fe fe7c 	bl	80016ea <lsm303agr_magnetic_raw_get>
		lsm303agr_mg_data.x = lsm303agr_from_lsb_to_mgauss(
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <D_LSM303AGR_MG_Read+0x7c>)
 80029f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fca1 	bl	8001340 <lsm303agr_from_lsb_to_mgauss>
 80029fe:	eef0 7a40 	vmov.f32	s15, s0
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <D_LSM303AGR_MG_Read+0x7c>)
 8002a04:	edc3 7a02 	vstr	s15, [r3, #8]
				lsm303agr_mg_data.raw.i16bit[0]);
		lsm303agr_mg_data.y = lsm303agr_from_lsb_to_mgauss(
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <D_LSM303AGR_MG_Read+0x7c>)
 8002a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fc96 	bl	8001340 <lsm303agr_from_lsb_to_mgauss>
 8002a14:	eef0 7a40 	vmov.f32	s15, s0
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <D_LSM303AGR_MG_Read+0x7c>)
 8002a1a:	edc3 7a03 	vstr	s15, [r3, #12]
				lsm303agr_mg_data.raw.i16bit[1]);
		lsm303agr_mg_data.z = lsm303agr_from_lsb_to_mgauss(
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <D_LSM303AGR_MG_Read+0x7c>)
 8002a20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fc8b 	bl	8001340 <lsm303agr_from_lsb_to_mgauss>
 8002a2a:	eef0 7a40 	vmov.f32	s15, s0
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <D_LSM303AGR_MG_Read+0x7c>)
 8002a30:	edc3 7a04 	vstr	s15, [r3, #16]
				lsm303agr_mg_data.raw.i16bit[2]);
	}
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20004cd0 	.word	0x20004cd0
 8002a40:	20004cb0 	.word	0x20004cb0

08002a44 <lsm6dsl_platform_write>:
 */

#include "u_lsm6dsl_driver.h"

int32_t lsm6dsl_platform_write(void *handle, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af04      	add	r7, sp, #16
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	460b      	mov	r3, r1
 8002a52:	72fb      	strb	r3, [r7, #11]
 8002a54:	4613      	mov	r3, r2
 8002a56:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <lsm6dsl_platform_write+0x44>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10d      	bne.n	8002a7c <lsm6dsl_platform_write+0x38>
		HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg,
 8002a60:	7afb      	ldrb	r3, [r7, #11]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a68:	9302      	str	r3, [sp, #8]
 8002a6a:	893b      	ldrh	r3, [r7, #8]
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	21d7      	movs	r1, #215	; 0xd7
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 ff40 	bl	80038fc <HAL_I2C_Mem_Write>
		I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
	}
	return 0;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20004bd8 	.word	0x20004bd8

08002a8c <lsm6dsl_platform_read>:

int32_t lsm6dsl_platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	460b      	mov	r3, r1
 8002a9a:	72fb      	strb	r3, [r7, #11]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <lsm6dsl_platform_read+0x44>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10d      	bne.n	8002ac4 <lsm6dsl_platform_read+0x38>
		HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg,
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	893b      	ldrh	r3, [r7, #8]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2301      	movs	r3, #1
 8002abc:	21d7      	movs	r1, #215	; 0xd7
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f001 f830 	bl	8003b24 <HAL_I2C_Mem_Read>
		I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
	}
	return 0;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20004bd8 	.word	0x20004bd8

08002ad4 <D_LSM6DSL_Init>:

void D_LSM6DSL_Init() {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
	uint8_t id, rst = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	71bb      	strb	r3, [r7, #6]

	lsm6dsl_lin_x_list = L_New(LSM6DSL_LIN_LIST_SIZE);
 8002ade:	200a      	movs	r0, #10
 8002ae0:	f7ff fcb0 	bl	8002444 <L_New>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <D_LSM6DSL_Init+0xd8>)
 8002ae8:	601a      	str	r2, [r3, #0]
	lsm6dsl_lin_y_list = L_New(LSM6DSL_LIN_LIST_SIZE);
 8002aea:	200a      	movs	r0, #10
 8002aec:	f7ff fcaa 	bl	8002444 <L_New>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <D_LSM6DSL_Init+0xdc>)
 8002af4:	601a      	str	r2, [r3, #0]
	lsm6dsl_lin_z_list = L_New(LSM6DSL_LIN_LIST_SIZE);
 8002af6:	200a      	movs	r0, #10
 8002af8:	f7ff fca4 	bl	8002444 <L_New>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <D_LSM6DSL_Init+0xe0>)
 8002b00:	601a      	str	r2, [r3, #0]

	lsm6dsl_ang_x_list = L_New(LSM6DSL_ANG_LIST_SIZE);
 8002b02:	200a      	movs	r0, #10
 8002b04:	f7ff fc9e 	bl	8002444 <L_New>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <D_LSM6DSL_Init+0xe4>)
 8002b0c:	601a      	str	r2, [r3, #0]
	lsm6dsl_ang_y_list = L_New(LSM6DSL_ANG_LIST_SIZE);
 8002b0e:	200a      	movs	r0, #10
 8002b10:	f7ff fc98 	bl	8002444 <L_New>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <D_LSM6DSL_Init+0xe8>)
 8002b18:	601a      	str	r2, [r3, #0]
	lsm6dsl_ang_z_list = L_New(LSM6DSL_ANG_LIST_SIZE);
 8002b1a:	200a      	movs	r0, #10
 8002b1c:	f7ff fc92 	bl	8002444 <L_New>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <D_LSM6DSL_Init+0xec>)
 8002b24:	601a      	str	r2, [r3, #0]

	lsm6dsl_dev_ctx.write_reg = lsm6dsl_platform_write;
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b28:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <D_LSM6DSL_Init+0xf4>)
 8002b2a:	601a      	str	r2, [r3, #0]
	lsm6dsl_dev_ctx.read_reg = lsm6dsl_platform_read;
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b2e:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <D_LSM6DSL_Init+0xf8>)
 8002b30:	605a      	str	r2, [r3, #4]
	lsm6dsl_dev_ctx.handle = &hi2c1;
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <D_LSM6DSL_Init+0xfc>)
 8002b36:	609a      	str	r2, [r3, #8]

	// Poll device
	while (id != LSM6DSL_ID) {
 8002b38:	e004      	b.n	8002b44 <D_LSM6DSL_Init+0x70>
		lsm6dsl_device_id_get(&lsm6dsl_dev_ctx, &id);
 8002b3a:	1dfb      	adds	r3, r7, #7
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4821      	ldr	r0, [pc, #132]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b40:	f7fe ffb9 	bl	8001ab6 <lsm6dsl_device_id_get>
	while (id != LSM6DSL_ID) {
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	2b6a      	cmp	r3, #106	; 0x6a
 8002b48:	d1f7      	bne.n	8002b3a <D_LSM6DSL_Init+0x66>
	}

	/*
	 *  Restore default configuration
	 */
	lsm6dsl_reset_set(&lsm6dsl_dev_ctx, PROPERTY_ENABLE);
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	481d      	ldr	r0, [pc, #116]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b4e:	f7fe ffc3 	bl	8001ad8 <lsm6dsl_reset_set>
	do {
		lsm6dsl_reset_get(&lsm6dsl_dev_ctx, &rst);
 8002b52:	1dbb      	adds	r3, r7, #6
 8002b54:	4619      	mov	r1, r3
 8002b56:	481b      	ldr	r0, [pc, #108]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b58:	f7fe ffe4 	bl	8001b24 <lsm6dsl_reset_get>
	} while (rst);
 8002b5c:	79bb      	ldrb	r3, [r7, #6]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f7      	bne.n	8002b52 <D_LSM6DSL_Init+0x7e>
	/*
	 *  Enable Block Data Update
	 */
	lsm6dsl_block_data_update_set(&lsm6dsl_dev_ctx, PROPERTY_ENABLE);
 8002b62:	2101      	movs	r1, #1
 8002b64:	4817      	ldr	r0, [pc, #92]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b66:	f7fe ff4d 	bl	8001a04 <lsm6dsl_block_data_update_set>
	/*
	 * Set Output Data Rate
	 */
	lsm6dsl_xl_data_rate_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_ODR_12Hz5);
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4815      	ldr	r0, [pc, #84]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b6e:	f7fe fed7 	bl	8001920 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&lsm6dsl_dev_ctx, LSM6DSL_GY_ODR_12Hz5);
 8002b72:	2101      	movs	r1, #1
 8002b74:	4813      	ldr	r0, [pc, #76]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b76:	f7fe ff1f 	bl	80019b8 <lsm6dsl_gy_data_rate_set>
	/*
	 * Set full scale
	 */
	lsm6dsl_xl_full_scale_set(&lsm6dsl_dev_ctx, LSM6DSL_2g);
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4811      	ldr	r0, [pc, #68]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b7e:	f7fe fea9 	bl	80018d4 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&lsm6dsl_dev_ctx, LSM6DSL_2000dps);
 8002b82:	2106      	movs	r1, #6
 8002b84:	480f      	ldr	r0, [pc, #60]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b86:	f7fe fef1 	bl	800196c <lsm6dsl_gy_full_scale_set>

	/*
	 * Configure filtering chain(No aux interface)
	 */
	/* Accelerometer - analog filter */
	lsm6dsl_xl_filter_analog_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b8e:	f7fe ffe2 	bl	8001b56 <lsm6dsl_xl_filter_analog_set>

	/* Accelerometer - LPF1 path ( LPF2 not used )*/
	//lsm6dsl_xl_lp1_bandwidth_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_LP1_ODR_DIV_4);
	/* Accelerometer - LPF1 + LPF2 path */
	lsm6dsl_xl_lp2_bandwidth_set(&lsm6dsl_dev_ctx,
 8002b92:	2111      	movs	r1, #17
 8002b94:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b96:	f7ff f804 	bl	8001ba2 <lsm6dsl_xl_lp2_bandwidth_set>

	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&lsm6dsl_dev_ctx, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&lsm6dsl_dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8002b9a:	21a8      	movs	r1, #168	; 0xa8
 8002b9c:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <D_LSM6DSL_Init+0xf0>)
 8002b9e:	f7ff f837 	bl	8001c10 <lsm6dsl_gy_band_pass_set>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20004cc8 	.word	0x20004cc8
 8002bb0:	20004d08 	.word	0x20004d08
 8002bb4:	20004d04 	.word	0x20004d04
 8002bb8:	20004d8c 	.word	0x20004d8c
 8002bbc:	20004b44 	.word	0x20004b44
 8002bc0:	20004ccc 	.word	0x20004ccc
 8002bc4:	20004d20 	.word	0x20004d20
 8002bc8:	08002a45 	.word	0x08002a45
 8002bcc:	08002a8d 	.word	0x08002a8d
 8002bd0:	20004bd8 	.word	0x20004bd8

08002bd4 <D_LSM6DSL_XL_Read>:

void D_LSM6DSL_XL_Read() {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
	/* Read output only if new value is available */
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(&lsm6dsl_dev_ctx, &reg.status_reg);
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	481b      	ldr	r0, [pc, #108]	; (8002c4c <D_LSM6DSL_XL_Read+0x78>)
 8002be0:	f7fe ff36 	bl	8001a50 <lsm6dsl_status_reg_get>
	if (reg.status_reg.xlda) {
 8002be4:	793b      	ldrb	r3, [r7, #4]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d029      	beq.n	8002c44 <D_LSM6DSL_XL_Read+0x70>
		memset(lsm6dsl_xl_data.raw.u8bit, 0x00, 3 * sizeof(int16_t));
 8002bf0:	2206      	movs	r2, #6
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4816      	ldr	r0, [pc, #88]	; (8002c50 <D_LSM6DSL_XL_Read+0x7c>)
 8002bf6:	f006 ffa6 	bl	8009b46 <memset>
		lsm6dsl_acceleration_raw_get(&lsm6dsl_dev_ctx, lsm6dsl_xl_data.raw.u8bit);
 8002bfa:	4915      	ldr	r1, [pc, #84]	; (8002c50 <D_LSM6DSL_XL_Read+0x7c>)
 8002bfc:	4813      	ldr	r0, [pc, #76]	; (8002c4c <D_LSM6DSL_XL_Read+0x78>)
 8002bfe:	f7fe ff49 	bl	8001a94 <lsm6dsl_acceleration_raw_get>
		lsm6dsl_xl_data.x = lsm6dsl_from_fs2g_to_mg(lsm6dsl_xl_data.raw.i16bit[0]);
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <D_LSM6DSL_XL_Read+0x7c>)
 8002c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fe33 	bl	8001874 <lsm6dsl_from_fs2g_to_mg>
 8002c0e:	eef0 7a40 	vmov.f32	s15, s0
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <D_LSM6DSL_XL_Read+0x7c>)
 8002c14:	edc3 7a02 	vstr	s15, [r3, #8]
		lsm6dsl_xl_data.y = lsm6dsl_from_fs2g_to_mg(lsm6dsl_xl_data.raw.i16bit[1]);
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <D_LSM6DSL_XL_Read+0x7c>)
 8002c1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fe28 	bl	8001874 <lsm6dsl_from_fs2g_to_mg>
 8002c24:	eef0 7a40 	vmov.f32	s15, s0
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <D_LSM6DSL_XL_Read+0x7c>)
 8002c2a:	edc3 7a03 	vstr	s15, [r3, #12]
		lsm6dsl_xl_data.z = lsm6dsl_from_fs2g_to_mg(lsm6dsl_xl_data.raw.i16bit[2]);
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <D_LSM6DSL_XL_Read+0x7c>)
 8002c30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fe1d 	bl	8001874 <lsm6dsl_from_fs2g_to_mg>
 8002c3a:	eef0 7a40 	vmov.f32	s15, s0
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <D_LSM6DSL_XL_Read+0x7c>)
 8002c40:	edc3 7a04 	vstr	s15, [r3, #16]
	}
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20004d20 	.word	0x20004d20
 8002c50:	20004c38 	.word	0x20004c38

08002c54 <D_LSM6DSL_G_Read>:

void D_LSM6DSL_G_Read() {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
	/* Read output only if new value is available */
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(&lsm6dsl_dev_ctx, &reg.status_reg);
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	481b      	ldr	r0, [pc, #108]	; (8002ccc <D_LSM6DSL_G_Read+0x78>)
 8002c60:	f7fe fef6 	bl	8001a50 <lsm6dsl_status_reg_get>
	if (reg.status_reg.gda) {
 8002c64:	793b      	ldrb	r3, [r7, #4]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d029      	beq.n	8002cc4 <D_LSM6DSL_G_Read+0x70>
		memset(lsm6dsl_g_data.raw.u8bit, 0x00, 3 * sizeof(int16_t));
 8002c70:	2206      	movs	r2, #6
 8002c72:	2100      	movs	r1, #0
 8002c74:	4816      	ldr	r0, [pc, #88]	; (8002cd0 <D_LSM6DSL_G_Read+0x7c>)
 8002c76:	f006 ff66 	bl	8009b46 <memset>
		lsm6dsl_angular_rate_raw_get(&lsm6dsl_dev_ctx, lsm6dsl_g_data.raw.u8bit);
 8002c7a:	4915      	ldr	r1, [pc, #84]	; (8002cd0 <D_LSM6DSL_G_Read+0x7c>)
 8002c7c:	4813      	ldr	r0, [pc, #76]	; (8002ccc <D_LSM6DSL_G_Read+0x78>)
 8002c7e:	f7fe fef8 	bl	8001a72 <lsm6dsl_angular_rate_raw_get>
		lsm6dsl_g_data.x = lsm6dsl_from_fs2000dps_to_mdps(
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <D_LSM6DSL_G_Read+0x7c>)
 8002c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe fe0b 	bl	80018a4 <lsm6dsl_from_fs2000dps_to_mdps>
 8002c8e:	eef0 7a40 	vmov.f32	s15, s0
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <D_LSM6DSL_G_Read+0x7c>)
 8002c94:	edc3 7a02 	vstr	s15, [r3, #8]
				lsm6dsl_g_data.raw.i16bit[0]);
		lsm6dsl_g_data.y = lsm6dsl_from_fs2000dps_to_mdps(
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <D_LSM6DSL_G_Read+0x7c>)
 8002c9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fe00 	bl	80018a4 <lsm6dsl_from_fs2000dps_to_mdps>
 8002ca4:	eef0 7a40 	vmov.f32	s15, s0
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <D_LSM6DSL_G_Read+0x7c>)
 8002caa:	edc3 7a03 	vstr	s15, [r3, #12]
				lsm6dsl_g_data.raw.i16bit[1]);
		lsm6dsl_g_data.z = lsm6dsl_from_fs2000dps_to_mdps(
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <D_LSM6DSL_G_Read+0x7c>)
 8002cb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fdf5 	bl	80018a4 <lsm6dsl_from_fs2000dps_to_mdps>
 8002cba:	eef0 7a40 	vmov.f32	s15, s0
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <D_LSM6DSL_G_Read+0x7c>)
 8002cc0:	edc3 7a04 	vstr	s15, [r3, #16]
				lsm6dsl_g_data.raw.i16bit[2]);
	}
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20004d20 	.word	0x20004d20
 8002cd0:	20004d2c 	.word	0x20004d2c

08002cd4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002cda:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <MX_USART3_UART_Init+0x5c>)
 8002cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ce4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_USART3_UART_Init+0x58>)
 8002d18:	f003 fbbc 	bl	8006494 <HAL_UART_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002d22:	f7ff f8a9 	bl	8001e78 <Error_Handler>
  }

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20004b58 	.word	0x20004b58
 8002d30:	40004800 	.word	0x40004800

08002d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_UART_MspInit+0x7c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d128      	bne.n	8002da8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <HAL_UART_MspInit+0x80>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <HAL_UART_MspInit+0x80>)
 8002d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_UART_MspInit+0x80>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_UART_MspInit+0x80>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <HAL_UART_MspInit+0x80>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_UART_MspInit+0x80>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d98:	2307      	movs	r3, #7
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4619      	mov	r1, r3
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <HAL_UART_MspInit+0x84>)
 8002da4:	f000 f986 	bl	80030b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40004800 	.word	0x40004800
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40020400 	.word	0x40020400

08002dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dc2:	e003      	b.n	8002dcc <LoopCopyDataInit>

08002dc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dca:	3104      	adds	r1, #4

08002dcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dcc:	480b      	ldr	r0, [pc, #44]	; (8002dfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dd4:	d3f6      	bcc.n	8002dc4 <CopyDataInit>
  ldr  r2, =_sbss
 8002dd6:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dd8:	e002      	b.n	8002de0 <LoopFillZerobss>

08002dda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ddc:	f842 3b04 	str.w	r3, [r2], #4

08002de0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002de2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002de4:	d3f9      	bcc.n	8002dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002de6:	f7ff f9c1 	bl	800216c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dea:	f006 fe75 	bl	8009ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dee:	f7fe ff7d 	bl	8001cec <main>
  bx  lr    
 8002df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002df4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002df8:	0800ca88 	.word	0x0800ca88
  ldr  r0, =_sdata
 8002dfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e00:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002e04:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002e08:	20004e2c 	.word	0x20004e2c

08002e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC_IRQHandler>

08002e0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e12:	2003      	movs	r0, #3
 8002e14:	f000 f8f7 	bl	8003006 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7ff f85d 	bl	8001ed8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e1e:	f7ff f833 	bl	8001e88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_IncTick+0x20>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_IncTick+0x24>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_IncTick+0x24>)
 8002e3a:	6013      	str	r3, [r2, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000008 	.word	0x20000008
 8002e4c:	20004de4 	.word	0x20004de4

08002e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return uwTick;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_GetTick+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20004de4 	.word	0x20004de4

08002e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff ffee 	bl	8002e50 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d005      	beq.n	8002e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_Delay+0x40>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e8e:	bf00      	nop
 8002e90:	f7ff ffde 	bl	8002e50 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8f7      	bhi.n	8002e90 <HAL_Delay+0x28>
  {
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000008 	.word	0x20000008

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <__NVIC_SetPriorityGrouping+0x40>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <__NVIC_SetPriorityGrouping+0x40>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00
 8002ef0:	05fa0000 	.word	0x05fa0000

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	; (8002f48 <__NVIC_EnableIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0a      	blt.n	8002f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	; (8002f98 <__NVIC_SetPriority+0x4c>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f74:	e00a      	b.n	8002f8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4908      	ldr	r1, [pc, #32]	; (8002f9c <__NVIC_SetPriority+0x50>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	3b04      	subs	r3, #4
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	440b      	add	r3, r1
 8002f8a:	761a      	strb	r2, [r3, #24]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	; 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f1c3 0307 	rsb	r3, r3, #7
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf28      	it	cs
 8002fbe:	2304      	movcs	r3, #4
 8002fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d902      	bls.n	8002fd0 <NVIC_EncodePriority+0x30>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3b03      	subs	r3, #3
 8002fce:	e000      	b.n	8002fd2 <NVIC_EncodePriority+0x32>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	4313      	orrs	r3, r2
         );
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff4c 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800302e:	f7ff ff61 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 8003032:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	6978      	ldr	r0, [r7, #20]
 800303a:	f7ff ffb1 	bl	8002fa0 <NVIC_EncodePriority>
 800303e:	4602      	mov	r2, r0
 8003040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff80 	bl	8002f4c <__NVIC_SetPriority>
}
 800304c:	bf00      	nop
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff54 	bl	8002f10 <__NVIC_EnableIRQ>
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d004      	beq.n	800308e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2280      	movs	r2, #128	; 0x80
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e00c      	b.n	80030a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2205      	movs	r2, #5
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e175      	b.n	80033c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8164 	bne.w	80033ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d00b      	beq.n	8003112 <HAL_GPIO_Init+0x5e>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003106:	2b11      	cmp	r3, #17
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b12      	cmp	r3, #18
 8003110:	d130      	bne.n	8003174 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2203      	movs	r2, #3
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003148:	2201      	movs	r2, #1
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 0201 	and.w	r2, r3, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x100>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b12      	cmp	r3, #18
 80031b2:	d123      	bne.n	80031fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80be 	beq.w	80033ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_GPIO_Init+0x320>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a64      	ldr	r2, [pc, #400]	; (80033d4 <HAL_GPIO_Init+0x320>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <HAL_GPIO_Init+0x320>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003256:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <HAL_GPIO_Init+0x324>)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a57      	ldr	r2, [pc, #348]	; (80033dc <HAL_GPIO_Init+0x328>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d037      	beq.n	80032f2 <HAL_GPIO_Init+0x23e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a56      	ldr	r2, [pc, #344]	; (80033e0 <HAL_GPIO_Init+0x32c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_GPIO_Init+0x23a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a55      	ldr	r2, [pc, #340]	; (80033e4 <HAL_GPIO_Init+0x330>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02b      	beq.n	80032ea <HAL_GPIO_Init+0x236>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a54      	ldr	r2, [pc, #336]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d025      	beq.n	80032e6 <HAL_GPIO_Init+0x232>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a53      	ldr	r2, [pc, #332]	; (80033ec <HAL_GPIO_Init+0x338>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01f      	beq.n	80032e2 <HAL_GPIO_Init+0x22e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a52      	ldr	r2, [pc, #328]	; (80033f0 <HAL_GPIO_Init+0x33c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d019      	beq.n	80032de <HAL_GPIO_Init+0x22a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a51      	ldr	r2, [pc, #324]	; (80033f4 <HAL_GPIO_Init+0x340>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0x226>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a50      	ldr	r2, [pc, #320]	; (80033f8 <HAL_GPIO_Init+0x344>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00d      	beq.n	80032d6 <HAL_GPIO_Init+0x222>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4f      	ldr	r2, [pc, #316]	; (80033fc <HAL_GPIO_Init+0x348>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x21e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4e      	ldr	r2, [pc, #312]	; (8003400 <HAL_GPIO_Init+0x34c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_GPIO_Init+0x21a>
 80032ca:	2309      	movs	r3, #9
 80032cc:	e012      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032ce:	230a      	movs	r3, #10
 80032d0:	e010      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032d2:	2308      	movs	r3, #8
 80032d4:	e00e      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032d6:	2307      	movs	r3, #7
 80032d8:	e00c      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032da:	2306      	movs	r3, #6
 80032dc:	e00a      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032de:	2305      	movs	r3, #5
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x240>
 80032f2:	2300      	movs	r3, #0
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003304:	4934      	ldr	r1, [pc, #208]	; (80033d8 <HAL_GPIO_Init+0x324>)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003312:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <HAL_GPIO_Init+0x350>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003336:	4a33      	ldr	r2, [pc, #204]	; (8003404 <HAL_GPIO_Init+0x350>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_GPIO_Init+0x350>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003360:	4a28      	ldr	r2, [pc, #160]	; (8003404 <HAL_GPIO_Init+0x350>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003366:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_GPIO_Init+0x350>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338a:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <HAL_GPIO_Init+0x350>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003390:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <HAL_GPIO_Init+0x350>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b4:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_GPIO_Init+0x350>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	f67f ae86 	bls.w	80030d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	3724      	adds	r7, #36	; 0x24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40020800 	.word	0x40020800
 80033e8:	40020c00 	.word	0x40020c00
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40021400 	.word	0x40021400
 80033f4:	40021800 	.word	0x40021800
 80033f8:	40021c00 	.word	0x40021c00
 80033fc:	40022000 	.word	0x40022000
 8003400:	40022400 	.word	0x40022400
 8003404:	40013c00 	.word	0x40013c00

08003408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fcfa 	bl	8000e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	e006      	b.n	8003490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800348e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d104      	bne.n	80034a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_I2C_Init+0x11c>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	ea42 0103 	orr.w	r1, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69d9      	ldr	r1, [r3, #28]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	02008000 	.word	0x02008000

08003528 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	460b      	mov	r3, r1
 8003536:	817b      	strh	r3, [r7, #10]
 8003538:	4613      	mov	r3, r2
 800353a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b20      	cmp	r3, #32
 8003546:	f040 80da 	bne.w	80036fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_I2C_Master_Transmit+0x30>
 8003554:	2302      	movs	r3, #2
 8003556:	e0d3      	b.n	8003700 <HAL_I2C_Master_Transmit+0x1d8>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003560:	f7ff fc76 	bl	8002e50 <HAL_GetTick>
 8003564:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	2319      	movs	r3, #25
 800356c:	2201      	movs	r2, #1
 800356e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f001 f948 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0be      	b.n	8003700 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2221      	movs	r2, #33	; 0x21
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2210      	movs	r2, #16
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	893a      	ldrh	r2, [r7, #8]
 80035a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2bff      	cmp	r3, #255	; 0xff
 80035b2:	d90e      	bls.n	80035d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	22ff      	movs	r2, #255	; 0xff
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	8979      	ldrh	r1, [r7, #10]
 80035c2:	4b51      	ldr	r3, [pc, #324]	; (8003708 <HAL_I2C_Master_Transmit+0x1e0>)
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f001 faaa 	bl	8004b24 <I2C_TransferConfig>
 80035d0:	e06c      	b.n	80036ac <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	8979      	ldrh	r1, [r7, #10]
 80035e4:	4b48      	ldr	r3, [pc, #288]	; (8003708 <HAL_I2C_Master_Transmit+0x1e0>)
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f001 fa99 	bl	8004b24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80035f2:	e05b      	b.n	80036ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	6a39      	ldr	r1, [r7, #32]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f001 f945 	bl	8004888 <I2C_WaitOnTXISFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e07b      	b.n	8003700 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d034      	beq.n	80036ac <HAL_I2C_Master_Transmit+0x184>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d130      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	2200      	movs	r2, #0
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f001 f8d7 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e04d      	b.n	8003700 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2bff      	cmp	r3, #255	; 0xff
 800366c:	d90e      	bls.n	800368c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f001 fa4d 	bl	8004b24 <I2C_TransferConfig>
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	b2da      	uxtb	r2, r3
 800369c:	8979      	ldrh	r1, [r7, #10]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f001 fa3c 	bl	8004b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d19e      	bne.n	80035f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f001 f924 	bl	8004908 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e01a      	b.n	8003700 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2220      	movs	r2, #32
 80036d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_I2C_Master_Transmit+0x1e4>)
 80036de:	400b      	ands	r3, r1
 80036e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	80002000 	.word	0x80002000
 800370c:	fe00e800 	.word	0xfe00e800

08003710 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	461a      	mov	r2, r3
 800371c:	460b      	mov	r3, r1
 800371e:	817b      	strh	r3, [r7, #10]
 8003720:	4613      	mov	r3, r2
 8003722:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	f040 80db 	bne.w	80038e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_I2C_Master_Receive+0x30>
 800373c:	2302      	movs	r3, #2
 800373e:	e0d4      	b.n	80038ea <HAL_I2C_Master_Receive+0x1da>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003748:	f7ff fb82 	bl	8002e50 <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2319      	movs	r3, #25
 8003754:	2201      	movs	r2, #1
 8003756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f001 f854 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0bf      	b.n	80038ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2222      	movs	r2, #34	; 0x22
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2210      	movs	r2, #16
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	893a      	ldrh	r2, [r7, #8]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2bff      	cmp	r3, #255	; 0xff
 800379a:	d90e      	bls.n	80037ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	8979      	ldrh	r1, [r7, #10]
 80037aa:	4b52      	ldr	r3, [pc, #328]	; (80038f4 <HAL_I2C_Master_Receive+0x1e4>)
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f001 f9b6 	bl	8004b24 <I2C_TransferConfig>
 80037b8:	e06d      	b.n	8003896 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	8979      	ldrh	r1, [r7, #10]
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_I2C_Master_Receive+0x1e4>)
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f001 f9a5 	bl	8004b24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80037da:	e05c      	b.n	8003896 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	6a39      	ldr	r1, [r7, #32]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f001 f8cd 	bl	8004980 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e07c      	b.n	80038ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d034      	beq.n	8003896 <HAL_I2C_Master_Receive+0x186>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d130      	bne.n	8003896 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 ffe2 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e04d      	b.n	80038ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	2bff      	cmp	r3, #255	; 0xff
 8003856:	d90e      	bls.n	8003876 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	22ff      	movs	r2, #255	; 0xff
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	b2da      	uxtb	r2, r3
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f001 f958 	bl	8004b24 <I2C_TransferConfig>
 8003874:	e00f      	b.n	8003896 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	b2da      	uxtb	r2, r3
 8003886:	8979      	ldrh	r1, [r7, #10]
 8003888:	2300      	movs	r3, #0
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f001 f947 	bl	8004b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19d      	bne.n	80037dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	6a39      	ldr	r1, [r7, #32]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f001 f82f 	bl	8004908 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e01a      	b.n	80038ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2220      	movs	r2, #32
 80038ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_I2C_Master_Receive+0x1e8>)
 80038c8:	400b      	ands	r3, r1
 80038ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	80002400 	.word	0x80002400
 80038f8:	fe00e800 	.word	0xfe00e800

080038fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	461a      	mov	r2, r3
 800390a:	4603      	mov	r3, r0
 800390c:	817b      	strh	r3, [r7, #10]
 800390e:	460b      	mov	r3, r1
 8003910:	813b      	strh	r3, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	f040 80f9 	bne.w	8003b16 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_I2C_Mem_Write+0x34>
 800392a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0ed      	b.n	8003b18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_I2C_Mem_Write+0x4e>
 8003946:	2302      	movs	r3, #2
 8003948:	e0e6      	b.n	8003b18 <HAL_I2C_Mem_Write+0x21c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003952:	f7ff fa7d 	bl	8002e50 <HAL_GetTick>
 8003956:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	2319      	movs	r3, #25
 800395e:	2201      	movs	r2, #1
 8003960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 ff4f 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0d1      	b.n	8003b18 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2221      	movs	r2, #33	; 0x21
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800399c:	88f8      	ldrh	r0, [r7, #6]
 800399e:	893a      	ldrh	r2, [r7, #8]
 80039a0:	8979      	ldrh	r1, [r7, #10]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4603      	mov	r3, r0
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fb91 	bl	80040d4 <I2C_RequestMemoryWrite>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0a9      	b.n	8003b18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2bff      	cmp	r3, #255	; 0xff
 80039cc:	d90e      	bls.n	80039ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	22ff      	movs	r2, #255	; 0xff
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	8979      	ldrh	r1, [r7, #10]
 80039dc:	2300      	movs	r3, #0
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f001 f89d 	bl	8004b24 <I2C_TransferConfig>
 80039ea:	e00f      	b.n	8003a0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	8979      	ldrh	r1, [r7, #10]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f001 f88c 	bl	8004b24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 ff39 	bl	8004888 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e07b      	b.n	8003b18 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d034      	beq.n	8003ac4 <HAL_I2C_Mem_Write+0x1c8>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d130      	bne.n	8003ac4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fecb 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e04d      	b.n	8003b18 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2bff      	cmp	r3, #255	; 0xff
 8003a84:	d90e      	bls.n	8003aa4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	22ff      	movs	r2, #255	; 0xff
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	8979      	ldrh	r1, [r7, #10]
 8003a94:	2300      	movs	r3, #0
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f001 f841 	bl	8004b24 <I2C_TransferConfig>
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	8979      	ldrh	r1, [r7, #10]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f001 f830 	bl	8004b24 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d19e      	bne.n	8003a0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 ff18 	bl	8004908 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e01a      	b.n	8003b18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_I2C_Mem_Write+0x224>)
 8003af6:	400b      	ands	r3, r1
 8003af8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	fe00e800 	.word	0xfe00e800

08003b24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	817b      	strh	r3, [r7, #10]
 8003b36:	460b      	mov	r3, r1
 8003b38:	813b      	strh	r3, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	f040 80fd 	bne.w	8003d46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_I2C_Mem_Read+0x34>
 8003b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d105      	bne.n	8003b64 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0f1      	b.n	8003d48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2C_Mem_Read+0x4e>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e0ea      	b.n	8003d48 <HAL_I2C_Mem_Read+0x224>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b7a:	f7ff f969 	bl	8002e50 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	2319      	movs	r3, #25
 8003b86:	2201      	movs	r2, #1
 8003b88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fe3b 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0d5      	b.n	8003d48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2222      	movs	r2, #34	; 0x22
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bc4:	88f8      	ldrh	r0, [r7, #6]
 8003bc6:	893a      	ldrh	r2, [r7, #8]
 8003bc8:	8979      	ldrh	r1, [r7, #10]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fad1 	bl	800417c <I2C_RequestMemoryRead>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0ad      	b.n	8003d48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2bff      	cmp	r3, #255	; 0xff
 8003bf4:	d90e      	bls.n	8003c14 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	4b52      	ldr	r3, [pc, #328]	; (8003d50 <HAL_I2C_Mem_Read+0x22c>)
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 ff89 	bl	8004b24 <I2C_TransferConfig>
 8003c12:	e00f      	b.n	8003c34 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_I2C_Mem_Read+0x22c>)
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 ff78 	bl	8004b24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2104      	movs	r1, #4
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fde2 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07c      	b.n	8003d48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d034      	beq.n	8003cf4 <HAL_I2C_Mem_Read+0x1d0>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d130      	bne.n	8003cf4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fdb3 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e04d      	b.n	8003d48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2bff      	cmp	r3, #255	; 0xff
 8003cb4:	d90e      	bls.n	8003cd4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	22ff      	movs	r2, #255	; 0xff
 8003cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 ff29 	bl	8004b24 <I2C_TransferConfig>
 8003cd2:	e00f      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	8979      	ldrh	r1, [r7, #10]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 ff18 	bl	8004b24 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d19a      	bne.n	8003c34 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fe00 	bl	8004908 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e01a      	b.n	8003d48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2220      	movs	r2, #32
 8003d18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_I2C_Mem_Read+0x230>)
 8003d26:	400b      	ands	r3, r1
 8003d28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	80002400 	.word	0x80002400
 8003d54:	fe00e800 	.word	0xfe00e800

08003d58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
  }
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d010      	beq.n	8003dd2 <HAL_I2C_ER_IRQHandler+0x46>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	09db      	lsrs	r3, r3, #7
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	0a9b      	lsrs	r3, r3, #10
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d010      	beq.n	8003e00 <HAL_I2C_ER_IRQHandler+0x74>
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	09db      	lsrs	r3, r3, #7
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f043 0208 	orr.w	r2, r3, #8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	0a5b      	lsrs	r3, r3, #9
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d010      	beq.n	8003e2e <HAL_I2C_ER_IRQHandler+0xa2>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	09db      	lsrs	r3, r3, #7
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f043 0202 	orr.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 030b 	and.w	r3, r3, #11
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003e3e:	68f9      	ldr	r1, [r7, #12]
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fbd9 	bl	80045f8 <I2C_ITError>
  }
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	70fb      	strb	r3, [r7, #3]
 8003e82:	4613      	mov	r3, r2
 8003e84:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <I2C_Slave_ISR_IT+0x24>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e0ec      	b.n	80040cc <I2C_Slave_ISR_IT+0x1fe>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <I2C_Slave_ISR_IT+0x4c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f12:	6939      	ldr	r1, [r7, #16]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fa45 	bl	80043a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d04d      	beq.n	8003fc2 <I2C_Slave_ISR_IT+0xf4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d047      	beq.n	8003fc2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d128      	bne.n	8003f8e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b28      	cmp	r3, #40	; 0x28
 8003f46:	d108      	bne.n	8003f5a <I2C_Slave_ISR_IT+0x8c>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f4e:	d104      	bne.n	8003f5a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f50:	6939      	ldr	r1, [r7, #16]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fafc 	bl	8004550 <I2C_ITListenCplt>
 8003f58:	e032      	b.n	8003fc0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b29      	cmp	r3, #41	; 0x29
 8003f64:	d10e      	bne.n	8003f84 <I2C_Slave_ISR_IT+0xb6>
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f6c:	d00a      	beq.n	8003f84 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2210      	movs	r2, #16
 8003f74:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fbfe 	bl	8004778 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f9d3 	bl	8004328 <I2C_ITSlaveSeqCplt>
 8003f82:	e01d      	b.n	8003fc0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f8c:	e096      	b.n	80040bc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2210      	movs	r2, #16
 8003f94:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f043 0204 	orr.w	r2, r3, #4
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <I2C_Slave_ISR_IT+0xe4>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fae:	f040 8085 	bne.w	80040bc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fb1d 	bl	80045f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003fbe:	e07d      	b.n	80040bc <I2C_Slave_ISR_IT+0x1ee>
 8003fc0:	e07c      	b.n	80040bc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d030      	beq.n	8004030 <I2C_Slave_ISR_IT+0x162>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02a      	beq.n	8004030 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d018      	beq.n	8004016 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d14f      	bne.n	80040c0 <I2C_Slave_ISR_IT+0x1f2>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004026:	d04b      	beq.n	80040c0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f97d 	bl	8004328 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800402e:	e047      	b.n	80040c0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	08db      	lsrs	r3, r3, #3
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <I2C_Slave_ISR_IT+0x184>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d004      	beq.n	8004052 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004048:	6939      	ldr	r1, [r7, #16]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8ea 	bl	8004224 <I2C_ITAddrCplt>
 8004050:	e037      	b.n	80040c2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d031      	beq.n	80040c2 <I2C_Slave_ISR_IT+0x1f4>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02b      	beq.n	80040c2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d018      	beq.n	80040a6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80040a4:	e00d      	b.n	80040c2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ac:	d002      	beq.n	80040b4 <I2C_Slave_ISR_IT+0x1e6>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f937 	bl	8004328 <I2C_ITSlaveSeqCplt>
 80040ba:	e002      	b.n	80040c2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80040c0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	817b      	strh	r3, [r7, #10]
 80040e6:	460b      	mov	r3, r1
 80040e8:	813b      	strh	r3, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	4b20      	ldr	r3, [pc, #128]	; (8004178 <I2C_RequestMemoryWrite+0xa4>)
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fd11 	bl	8004b24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fbbe 	bl	8004888 <I2C_WaitOnTXISFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e02c      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800411c:	893b      	ldrh	r3, [r7, #8]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	629a      	str	r2, [r3, #40]	; 0x28
 8004126:	e015      	b.n	8004154 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004128:	893b      	ldrh	r3, [r7, #8]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fba4 	bl	8004888 <I2C_WaitOnTXISFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e012      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800414a:	893b      	ldrh	r3, [r7, #8]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2200      	movs	r2, #0
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fb52 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	80002000 	.word	0x80002000

0800417c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	460b      	mov	r3, r1
 8004190:	813b      	strh	r3, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <I2C_RequestMemoryRead+0xa4>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2300      	movs	r3, #0
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fcbe 	bl	8004b24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	69b9      	ldr	r1, [r7, #24]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fb6b 	bl	8004888 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e02c      	b.n	8004216 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c2:	893b      	ldrh	r3, [r7, #8]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
 80041cc:	e015      	b.n	80041fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041ce:	893b      	ldrh	r3, [r7, #8]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fb51 	bl	8004888 <I2C_WaitOnTXISFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e012      	b.n	8004216 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041f0:	893b      	ldrh	r3, [r7, #8]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2200      	movs	r2, #0
 8004202:	2140      	movs	r1, #64	; 0x40
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 faff 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	80002000 	.word	0x80002000

08004224 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800423a:	2b28      	cmp	r3, #40	; 0x28
 800423c:	d168      	bne.n	8004310 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	b29b      	uxth	r3, r3
 8004258:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800425c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004278:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d137      	bne.n	80042f2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004282:	897b      	ldrh	r3, [r7, #10]
 8004284:	09db      	lsrs	r3, r3, #7
 8004286:	b29a      	uxth	r2, r3
 8004288:	89bb      	ldrh	r3, [r7, #12]
 800428a:	4053      	eors	r3, r2
 800428c:	b29b      	uxth	r3, r3
 800428e:	f003 0306 	and.w	r3, r3, #6
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11c      	bne.n	80042d0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d139      	bne.n	8004320 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2208      	movs	r2, #8
 80042b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042c2:	89ba      	ldrh	r2, [r7, #12]
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fdd4 	bl	8003e76 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042ce:	e027      	b.n	8004320 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80042d0:	893b      	ldrh	r3, [r7, #8]
 80042d2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80042d4:	2104      	movs	r1, #4
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fc52 	bl	8004b80 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042e4:	89ba      	ldrh	r2, [r7, #12]
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fdc3 	bl	8003e76 <HAL_I2C_AddrCallback>
}
 80042f0:	e016      	b.n	8004320 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80042f2:	2104      	movs	r1, #4
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fc43 	bl	8004b80 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004302:	89ba      	ldrh	r2, [r7, #12]
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fdb4 	bl	8003e76 <HAL_I2C_AddrCallback>
}
 800430e:	e007      	b.n	8004320 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2208      	movs	r2, #8
 8004316:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b29      	cmp	r3, #41	; 0x29
 8004342:	d112      	bne.n	800436a <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2228      	movs	r2, #40	; 0x28
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2221      	movs	r2, #33	; 0x21
 8004350:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004352:	2101      	movs	r1, #1
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fc13 	bl	8004b80 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fd73 	bl	8003e4e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004368:	e017      	b.n	800439a <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b2a      	cmp	r3, #42	; 0x2a
 8004374:	d111      	bne.n	800439a <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2228      	movs	r2, #40	; 0x28
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2222      	movs	r2, #34	; 0x22
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004384:	2102      	movs	r1, #2
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fbfa 	bl	8004b80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fd64 	bl	8003e62 <HAL_I2C_SlaveRxCpltCallback>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2220      	movs	r2, #32
 80043c0:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80043c2:	2107      	movs	r1, #7
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fbdb 	bl	8004b80 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b58      	ldr	r3, [pc, #352]	; (8004548 <I2C_ITSlaveCplt+0x1a4>)
 80043e6:	400b      	ands	r3, r1
 80043e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9c4 	bl	8004778 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	0b9b      	lsrs	r3, r3, #14
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d018      	beq.n	8004436 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004412:	e010      	b.n	8004436 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	0bdb      	lsrs	r3, r3, #15
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d006      	beq.n	8004436 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	b29a      	uxth	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d020      	beq.n	8004484 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f023 0304 	bic.w	r3, r3, #4
 8004448:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d010      	beq.n	80044d8 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	4619      	mov	r1, r3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f89b 	bl	80045f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b28      	cmp	r3, #40	; 0x28
 80044cc:	d138      	bne.n	8004540 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f83d 	bl	8004550 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044d6:	e033      	b.n	8004540 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044e0:	d011      	beq.n	8004506 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff ff20 	bl	8004328 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <I2C_ITSlaveCplt+0x1a8>)
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fcc7 	bl	8003e92 <HAL_I2C_ListenCpltCallback>
}
 8004504:	e01c      	b.n	8004540 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b22      	cmp	r3, #34	; 0x22
 8004510:	d10b      	bne.n	800452a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fc9d 	bl	8003e62 <HAL_I2C_SlaveRxCpltCallback>
}
 8004528:	e00a      	b.n	8004540 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fc87 	bl	8003e4e <HAL_I2C_SlaveTxCpltCallback>
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	fe00e800 	.word	0xfe00e800
 800454c:	ffff0000 	.word	0xffff0000

08004550 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a25      	ldr	r2, [pc, #148]	; (80045f4 <I2C_ITListenCplt+0xa4>)
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d022      	beq.n	80045ce <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f043 0204 	orr.w	r2, r3, #4
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045ce:	2107      	movs	r1, #7
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fad5 	bl	8004b80 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fc53 	bl	8003e92 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	ffff0000 	.word	0xffff0000

080045f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004608:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a55      	ldr	r2, [pc, #340]	; (800476c <I2C_ITError+0x174>)
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b28      	cmp	r3, #40	; 0x28
 800462e:	d005      	beq.n	800463c <I2C_ITError+0x44>
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b29      	cmp	r3, #41	; 0x29
 8004634:	d002      	beq.n	800463c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b2a      	cmp	r3, #42	; 0x2a
 800463a:	d10e      	bne.n	800465a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800463c:	2103      	movs	r1, #3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fa9e 	bl	8004b80 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2228      	movs	r2, #40	; 0x28
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a46      	ldr	r2, [pc, #280]	; (8004770 <I2C_ITError+0x178>)
 8004656:	635a      	str	r2, [r3, #52]	; 0x34
 8004658:	e013      	b.n	8004682 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800465a:	2107      	movs	r1, #7
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fa8f 	bl	8004b80 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b60      	cmp	r3, #96	; 0x60
 800466c:	d003      	beq.n	8004676 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004690:	d123      	bne.n	80046da <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d05c      	beq.n	8004764 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	4a31      	ldr	r2, [pc, #196]	; (8004774 <I2C_ITError+0x17c>)
 80046b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fcd6 	bl	8003070 <HAL_DMA_Abort_IT>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d04c      	beq.n	8004764 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046d4:	4610      	mov	r0, r2
 80046d6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046d8:	e044      	b.n	8004764 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e8:	d123      	bne.n	8004732 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046f8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d030      	beq.n	8004764 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <I2C_ITError+0x17c>)
 8004708:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fcaa 	bl	8003070 <HAL_DMA_Abort_IT>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d020      	beq.n	8004764 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800472c:	4610      	mov	r0, r2
 800472e:	4798      	blx	r3
}
 8004730:	e018      	b.n	8004764 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b60      	cmp	r3, #96	; 0x60
 800473c:	d10b      	bne.n	8004756 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fbb3 	bl	8003eba <HAL_I2C_AbortCpltCallback>
}
 8004754:	e006      	b.n	8004764 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fba1 	bl	8003ea6 <HAL_I2C_ErrorCallback>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	ffff0000 	.word	0xffff0000
 8004770:	08003ecf 	.word	0x08003ecf
 8004774:	080047c1 	.word	0x080047c1

08004778 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	d103      	bne.n	8004796 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2200      	movs	r2, #0
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d007      	beq.n	80047b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	619a      	str	r2, [r3, #24]
  }
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	2200      	movs	r2, #0
 80047d4:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	2200      	movs	r2, #0
 80047dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b60      	cmp	r3, #96	; 0x60
 80047e8:	d107      	bne.n	80047fa <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff fb61 	bl	8003eba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047f8:	e002      	b.n	8004800 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fb53 	bl	8003ea6 <HAL_I2C_ErrorCallback>
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004818:	e022      	b.n	8004860 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d01e      	beq.n	8004860 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004822:	f7fe fb15 	bl	8002e50 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d302      	bcc.n	8004838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d113      	bne.n	8004860 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f043 0220 	orr.w	r2, r3, #32
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e00f      	b.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	429a      	cmp	r2, r3
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	429a      	cmp	r2, r3
 800487c:	d0cd      	beq.n	800481a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004894:	e02c      	b.n	80048f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f8dc 	bl	8004a58 <I2C_IsAcknowledgeFailed>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e02a      	b.n	8004900 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d01e      	beq.n	80048f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fe facd 	bl	8002e50 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d113      	bne.n	80048f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e007      	b.n	8004900 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d1cb      	bne.n	8004896 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004914:	e028      	b.n	8004968 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f89c 	bl	8004a58 <I2C_IsAcknowledgeFailed>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e026      	b.n	8004978 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492a:	f7fe fa91 	bl	8002e50 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d302      	bcc.n	8004940 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d113      	bne.n	8004968 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d1cf      	bne.n	8004916 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800498c:	e055      	b.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f860 	bl	8004a58 <I2C_IsAcknowledgeFailed>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e053      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d129      	bne.n	8004a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d105      	bne.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e03f      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2220      	movs	r2, #32
 80049d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80049de:	400b      	ands	r3, r1
 80049e0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e022      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a04:	f7fe fa24 	bl	8002e50 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d302      	bcc.n	8004a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10f      	bne.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e007      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d1a2      	bne.n	800498e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	fe00e800 	.word	0xfe00e800

08004a58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d151      	bne.n	8004b16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a72:	e022      	b.n	8004aba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d01e      	beq.n	8004aba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7fe f9e8 	bl	8002e50 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <I2C_IsAcknowledgeFailed+0x3a>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d113      	bne.n	8004aba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e02e      	b.n	8004b18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d1d5      	bne.n	8004a74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2210      	movs	r2, #16
 8004ace:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff fe4d 	bl	8004778 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <I2C_IsAcknowledgeFailed+0xc8>)
 8004aea:	400b      	ands	r3, r1
 8004aec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	fe00e800 	.word	0xfe00e800

08004b24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	817b      	strh	r3, [r7, #10]
 8004b32:	4613      	mov	r3, r2
 8004b34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	0d5b      	lsrs	r3, r3, #21
 8004b40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <I2C_TransferConfig+0x58>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	ea02 0103 	and.w	r1, r2, r3
 8004b4e:	897b      	ldrh	r3, [r7, #10]
 8004b50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b54:	7a7b      	ldrb	r3, [r7, #9]
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	03ff63ff 	.word	0x03ff63ff

08004b80 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b90:	887b      	ldrh	r3, [r7, #2]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00f      	beq.n	8004bba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004ba0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bae:	2b28      	cmp	r3, #40	; 0x28
 8004bb0:	d003      	beq.n	8004bba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004bb8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00f      	beq.n	8004be4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004bca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bd8:	2b28      	cmp	r3, #40	; 0x28
 8004bda:	d003      	beq.n	8004be4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004be2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004be4:	887b      	ldrh	r3, [r7, #2]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	f003 0311 	and.w	r3, r3, #17
 8004bfc:	2b11      	cmp	r3, #17
 8004bfe:	d103      	bne.n	8004c08 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004c06:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004c08:	887b      	ldrh	r3, [r7, #2]
 8004c0a:	f003 0312 	and.w	r3, r3, #18
 8004c0e:	2b12      	cmp	r3, #18
 8004c10:	d103      	bne.n	8004c1a <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f043 0320 	orr.w	r3, r3, #32
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004c1a:	887b      	ldrh	r3, [r7, #2]
 8004c1c:	f003 0312 	and.w	r3, r3, #18
 8004c20:	2b12      	cmp	r3, #18
 8004c22:	d103      	bne.n	8004c2c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d138      	bne.n	8004cd2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e032      	b.n	8004cd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2224      	movs	r2, #36	; 0x24
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6819      	ldr	r1, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e000      	b.n	8004cd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
  }
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d139      	bne.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e033      	b.n	8004d6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	; 0x24
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e000      	b.n	8004d6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
  }
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d82:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	4a22      	ldr	r2, [pc, #136]	; (8004e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da6:	f7fe f853 	bl	8002e50 <HAL_GetTick>
 8004daa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dac:	e009      	b.n	8004dc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dae:	f7fe f84f 	bl	8002e50 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dbc:	d901      	bls.n	8004dc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e022      	b.n	8004e08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dc2:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dce:	d1ee      	bne.n	8004dae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004dd0:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ddc:	f7fe f838 	bl	8002e50 <HAL_GetTick>
 8004de0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004de2:	e009      	b.n	8004df8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004de4:	f7fe f834 	bl	8002e50 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df2:	d901      	bls.n	8004df8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e007      	b.n	8004e08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e04:	d1ee      	bne.n	8004de4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40007000 	.word	0x40007000

08004e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e29b      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8087 	beq.w	8004f4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e3c:	4b96      	ldr	r3, [pc, #600]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d00c      	beq.n	8004e62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e48:	4b93      	ldr	r3, [pc, #588]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d112      	bne.n	8004e7a <HAL_RCC_OscConfig+0x62>
 8004e54:	4b90      	ldr	r3, [pc, #576]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e60:	d10b      	bne.n	8004e7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e62:	4b8d      	ldr	r3, [pc, #564]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d06c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x130>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d168      	bne.n	8004f48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e275      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x7a>
 8004e84:	4b84      	ldr	r3, [pc, #528]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a83      	ldr	r2, [pc, #524]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e02e      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x9c>
 8004e9a:	4b7f      	ldr	r3, [pc, #508]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a7e      	ldr	r2, [pc, #504]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b7c      	ldr	r3, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a7b      	ldr	r2, [pc, #492]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e01d      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xc0>
 8004ebe:	4b76      	ldr	r3, [pc, #472]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a75      	ldr	r2, [pc, #468]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b73      	ldr	r3, [pc, #460]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a72      	ldr	r2, [pc, #456]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd8>
 8004ed8:	4b6f      	ldr	r3, [pc, #444]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6e      	ldr	r2, [pc, #440]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a6b      	ldr	r2, [pc, #428]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd ffaa 	bl	8002e50 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f00:	f7fd ffa6 	bl	8002e50 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	; 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e229      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b61      	ldr	r3, [pc, #388]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0xe8>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fd ff96 	bl	8002e50 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fd ff92 	bl	8002e50 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e215      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	4b57      	ldr	r3, [pc, #348]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x110>
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d069      	beq.n	800502a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f56:	4b50      	ldr	r3, [pc, #320]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f62:	4b4d      	ldr	r3, [pc, #308]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x190>
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d116      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	4b47      	ldr	r3, [pc, #284]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_RCC_OscConfig+0x17a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e1e9      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f92:	4b41      	ldr	r3, [pc, #260]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	493d      	ldr	r1, [pc, #244]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	e040      	b.n	800502a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d023      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb0:	4b39      	ldr	r3, [pc, #228]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a38      	ldr	r2, [pc, #224]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fd ff48 	bl	8002e50 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc4:	f7fd ff44 	bl	8002e50 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e1c7      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd6:	4b30      	ldr	r3, [pc, #192]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4929      	ldr	r1, [pc, #164]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
 8004ff6:	e018      	b.n	800502a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff8:	4b27      	ldr	r3, [pc, #156]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fd ff24 	bl	8002e50 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500c:	f7fd ff20 	bl	8002e50 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e1a3      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501e:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d038      	beq.n	80050a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d019      	beq.n	8005072 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503e:	4b16      	ldr	r3, [pc, #88]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8005040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fd ff01 	bl	8002e50 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005052:	f7fd fefd 	bl	8002e50 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e180      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8005066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x23a>
 8005070:	e01a      	b.n	80050a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8005074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <HAL_RCC_OscConfig+0x280>)
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fd fee7 	bl	8002e50 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005086:	f7fd fee3 	bl	8002e50 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d903      	bls.n	800509c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e166      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
 8005098:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	4b92      	ldr	r3, [pc, #584]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800509e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ee      	bne.n	8005086 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80a4 	beq.w	80051fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b6:	4b8c      	ldr	r3, [pc, #560]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10d      	bne.n	80050de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	4b89      	ldr	r3, [pc, #548]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a88      	ldr	r2, [pc, #544]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b86      	ldr	r3, [pc, #536]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050de:	4b83      	ldr	r3, [pc, #524]	; (80052ec <HAL_RCC_OscConfig+0x4d4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d118      	bne.n	800511c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050ea:	4b80      	ldr	r3, [pc, #512]	; (80052ec <HAL_RCC_OscConfig+0x4d4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a7f      	ldr	r2, [pc, #508]	; (80052ec <HAL_RCC_OscConfig+0x4d4>)
 80050f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f6:	f7fd feab 	bl	8002e50 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fe:	f7fd fea7 	bl	8002e50 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b64      	cmp	r3, #100	; 0x64
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e12a      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005110:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCC_OscConfig+0x4d4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x31a>
 8005124:	4b70      	ldr	r3, [pc, #448]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	4a6f      	ldr	r2, [pc, #444]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6713      	str	r3, [r2, #112]	; 0x70
 8005130:	e02d      	b.n	800518e <HAL_RCC_OscConfig+0x376>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x33c>
 800513a:	4b6b      	ldr	r3, [pc, #428]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a6a      	ldr	r2, [pc, #424]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
 8005146:	4b68      	ldr	r3, [pc, #416]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a67      	ldr	r2, [pc, #412]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
 8005152:	e01c      	b.n	800518e <HAL_RCC_OscConfig+0x376>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b05      	cmp	r3, #5
 800515a:	d10c      	bne.n	8005176 <HAL_RCC_OscConfig+0x35e>
 800515c:	4b62      	ldr	r3, [pc, #392]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	4a61      	ldr	r2, [pc, #388]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005162:	f043 0304 	orr.w	r3, r3, #4
 8005166:	6713      	str	r3, [r2, #112]	; 0x70
 8005168:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a5e      	ldr	r2, [pc, #376]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	e00b      	b.n	800518e <HAL_RCC_OscConfig+0x376>
 8005176:	4b5c      	ldr	r3, [pc, #368]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	4a5b      	ldr	r2, [pc, #364]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6713      	str	r3, [r2, #112]	; 0x70
 8005182:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	4a58      	ldr	r2, [pc, #352]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d015      	beq.n	80051c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fd fe5b 	bl	8002e50 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fd fe57 	bl	8002e50 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0d8      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b4:	4b4c      	ldr	r3, [pc, #304]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ee      	beq.n	800519e <HAL_RCC_OscConfig+0x386>
 80051c0:	e014      	b.n	80051ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c2:	f7fd fe45 	bl	8002e50 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c8:	e00a      	b.n	80051e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ca:	f7fd fe41 	bl	8002e50 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e0c2      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e0:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ee      	bne.n	80051ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d105      	bne.n	80051fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f2:	4b3d      	ldr	r3, [pc, #244]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	4a3c      	ldr	r2, [pc, #240]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80051f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80ae 	beq.w	8005364 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005208:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 030c 	and.w	r3, r3, #12
 8005210:	2b08      	cmp	r3, #8
 8005212:	d06d      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d14b      	bne.n	80052b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a31      	ldr	r2, [pc, #196]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fd fe12 	bl	8002e50 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fd fe0e 	bl	8002e50 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e091      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69da      	ldr	r2, [r3, #28]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	3b01      	subs	r3, #1
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	071b      	lsls	r3, r3, #28
 800527a:	491b      	ldr	r1, [pc, #108]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800528a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fd fde0 	bl	8002e50 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fd fddc 	bl	8002e50 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e05f      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x47c>
 80052b2:	e057      	b.n	8005364 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a0b      	ldr	r2, [pc, #44]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fd fdc6 	bl	8002e50 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fd fdc2 	bl	8002e50 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e045      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4b0>
 80052e6:	e03d      	b.n	8005364 <HAL_RCC_OscConfig+0x54c>
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052f0:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <HAL_RCC_OscConfig+0x558>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d030      	beq.n	8005360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d129      	bne.n	8005360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d122      	bne.n	8005360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005320:	4013      	ands	r3, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005326:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005328:	4293      	cmp	r3, r2
 800532a:	d119      	bne.n	8005360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	3b01      	subs	r3, #1
 800533a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800533c:	429a      	cmp	r2, r3
 800533e:	d10f      	bne.n	8005360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d107      	bne.n	8005360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800

08005374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0d0      	b.n	800552e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b6a      	ldr	r3, [pc, #424]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d910      	bls.n	80053bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b67      	ldr	r3, [pc, #412]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 020f 	bic.w	r2, r3, #15
 80053a2:	4965      	ldr	r1, [pc, #404]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a58      	ldr	r2, [pc, #352]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 80053da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a52      	ldr	r2, [pc, #328]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 80053f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d040      	beq.n	8005498 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d115      	bne.n	8005456 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b41      	ldr	r3, [pc, #260]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e073      	b.n	800552e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005446:	4b3d      	ldr	r3, [pc, #244]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e06b      	b.n	800552e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4936      	ldr	r1, [pc, #216]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005468:	f7fd fcf2 	bl	8002e50 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7fd fcee 	bl	8002e50 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e053      	b.n	800552e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	4b2d      	ldr	r3, [pc, #180]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 020c 	and.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	429a      	cmp	r2, r3
 8005496:	d1eb      	bne.n	8005470 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b27      	ldr	r3, [pc, #156]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d210      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 020f 	bic.w	r2, r3, #15
 80054ae:	4922      	ldr	r1, [pc, #136]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f821 	bl	800554c <HAL_RCC_GetSysClockFreq>
 800550a:	4601      	mov	r1, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <HAL_RCC_ClockConfig+0x1cc>)
 8005518:	5cd3      	ldrb	r3, [r2, r3]
 800551a:	fa21 f303 	lsr.w	r3, r1, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1d0>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCC_ClockConfig+0x1d4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc fcd6 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00
 800553c:	40023800 	.word	0x40023800
 8005540:	0800c73c 	.word	0x0800c73c
 8005544:	20000000 	.word	0x20000000
 8005548:	20000004 	.word	0x20000004

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	2300      	movs	r3, #0
 800555c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005562:	4b50      	ldr	r3, [pc, #320]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b04      	cmp	r3, #4
 800556c:	d007      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x32>
 800556e:	2b08      	cmp	r3, #8
 8005570:	d008      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x38>
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 808d 	bne.w	8005692 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005578:	4b4b      	ldr	r3, [pc, #300]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800557a:	60bb      	str	r3, [r7, #8]
      break;
 800557c:	e08c      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557e:	4b4b      	ldr	r3, [pc, #300]	; (80056ac <HAL_RCC_GetSysClockFreq+0x160>)
 8005580:	60bb      	str	r3, [r7, #8]
      break;
 8005582:	e089      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005584:	4b47      	ldr	r3, [pc, #284]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800558e:	4b45      	ldr	r3, [pc, #276]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d023      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559a:	4b42      	ldr	r3, [pc, #264]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	f04f 0400 	mov.w	r4, #0
 80055a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	ea03 0501 	and.w	r5, r3, r1
 80055b0:	ea04 0602 	and.w	r6, r4, r2
 80055b4:	4a3d      	ldr	r2, [pc, #244]	; (80056ac <HAL_RCC_GetSysClockFreq+0x160>)
 80055b6:	fb02 f106 	mul.w	r1, r2, r6
 80055ba:	2200      	movs	r2, #0
 80055bc:	fb02 f205 	mul.w	r2, r2, r5
 80055c0:	440a      	add	r2, r1
 80055c2:	493a      	ldr	r1, [pc, #232]	; (80056ac <HAL_RCC_GetSysClockFreq+0x160>)
 80055c4:	fba5 0101 	umull	r0, r1, r5, r1
 80055c8:	1853      	adds	r3, r2, r1
 80055ca:	4619      	mov	r1, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f04f 0400 	mov.w	r4, #0
 80055d2:	461a      	mov	r2, r3
 80055d4:	4623      	mov	r3, r4
 80055d6:	f7fa fe8b 	bl	80002f0 <__aeabi_uldivmod>
 80055da:	4603      	mov	r3, r0
 80055dc:	460c      	mov	r4, r1
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e049      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e2:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	f04f 0400 	mov.w	r4, #0
 80055ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	ea03 0501 	and.w	r5, r3, r1
 80055f8:	ea04 0602 	and.w	r6, r4, r2
 80055fc:	4629      	mov	r1, r5
 80055fe:	4632      	mov	r2, r6
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	0154      	lsls	r4, r2, #5
 800560a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800560e:	014b      	lsls	r3, r1, #5
 8005610:	4619      	mov	r1, r3
 8005612:	4622      	mov	r2, r4
 8005614:	1b49      	subs	r1, r1, r5
 8005616:	eb62 0206 	sbc.w	r2, r2, r6
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	f04f 0400 	mov.w	r4, #0
 8005622:	0194      	lsls	r4, r2, #6
 8005624:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005628:	018b      	lsls	r3, r1, #6
 800562a:	1a5b      	subs	r3, r3, r1
 800562c:	eb64 0402 	sbc.w	r4, r4, r2
 8005630:	f04f 0100 	mov.w	r1, #0
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	00e2      	lsls	r2, r4, #3
 800563a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800563e:	00d9      	lsls	r1, r3, #3
 8005640:	460b      	mov	r3, r1
 8005642:	4614      	mov	r4, r2
 8005644:	195b      	adds	r3, r3, r5
 8005646:	eb44 0406 	adc.w	r4, r4, r6
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	02a2      	lsls	r2, r4, #10
 8005654:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005658:	0299      	lsls	r1, r3, #10
 800565a:	460b      	mov	r3, r1
 800565c:	4614      	mov	r4, r2
 800565e:	4618      	mov	r0, r3
 8005660:	4621      	mov	r1, r4
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	461a      	mov	r2, r3
 800566a:	4623      	mov	r3, r4
 800566c:	f7fa fe40 	bl	80002f0 <__aeabi_uldivmod>
 8005670:	4603      	mov	r3, r0
 8005672:	460c      	mov	r4, r1
 8005674:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	0c1b      	lsrs	r3, r3, #16
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	3301      	adds	r3, #1
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	60bb      	str	r3, [r7, #8]
      break;
 8005690:	e002      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005694:	60bb      	str	r3, [r7, #8]
      break;
 8005696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005698:	68bb      	ldr	r3, [r7, #8]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40023800 	.word	0x40023800
 80056a8:	00f42400 	.word	0x00f42400
 80056ac:	017d7840 	.word	0x017d7840

080056b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000000 	.word	0x20000000

080056c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056cc:	f7ff fff0 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056d0:	4601      	mov	r1, r0
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	0a9b      	lsrs	r3, r3, #10
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4a03      	ldr	r2, [pc, #12]	; (80056ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80056de:	5cd3      	ldrb	r3, [r2, r3]
 80056e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40023800 	.word	0x40023800
 80056ec:	0800c74c 	.word	0x0800c74c

080056f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056f4:	f7ff ffdc 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056f8:	4601      	mov	r1, r0
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	0b5b      	lsrs	r3, r3, #13
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	4a03      	ldr	r2, [pc, #12]	; (8005714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005706:	5cd3      	ldrb	r3, [r2, r3]
 8005708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40023800 	.word	0x40023800
 8005714:	0800c74c 	.word	0x0800c74c

08005718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	220f      	movs	r2, #15
 8005726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005728:	4b12      	ldr	r3, [pc, #72]	; (8005774 <HAL_RCC_GetClockConfig+0x5c>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 0203 	and.w	r2, r3, #3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <HAL_RCC_GetClockConfig+0x5c>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <HAL_RCC_GetClockConfig+0x5c>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_GetClockConfig+0x5c>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <HAL_RCC_GetClockConfig+0x60>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 020f 	and.w	r2, r3, #15
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	40023c00 	.word	0x40023c00

0800577c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d012      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057a4:	4b69      	ldr	r3, [pc, #420]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	4a68      	ldr	r2, [pc, #416]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80057ae:	6093      	str	r3, [r2, #8]
 80057b0:	4b66      	ldr	r3, [pc, #408]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	4964      	ldr	r1, [pc, #400]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057c6:	2301      	movs	r3, #1
 80057c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d017      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057d6:	4b5d      	ldr	r3, [pc, #372]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	4959      	ldr	r1, [pc, #356]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f4:	d101      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005802:	2301      	movs	r3, #1
 8005804:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d017      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005812:	4b4e      	ldr	r3, [pc, #312]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	494a      	ldr	r1, [pc, #296]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005830:	d101      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800583e:	2301      	movs	r3, #1
 8005840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800584e:	2301      	movs	r3, #1
 8005850:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 808b 	beq.w	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005860:	4b3a      	ldr	r3, [pc, #232]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	4a39      	ldr	r2, [pc, #228]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586a:	6413      	str	r3, [r2, #64]	; 0x40
 800586c:	4b37      	ldr	r3, [pc, #220]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005874:	60bb      	str	r3, [r7, #8]
 8005876:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005878:	4b35      	ldr	r3, [pc, #212]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a34      	ldr	r2, [pc, #208]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800587e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005884:	f7fd fae4 	bl	8002e50 <HAL_GetTick>
 8005888:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800588a:	e008      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588c:	f7fd fae0 	bl	8002e50 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	; 0x64
 8005898:	d901      	bls.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e38d      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800589e:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058aa:	4b28      	ldr	r3, [pc, #160]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d035      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d02e      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058c8:	4b20      	ldr	r3, [pc, #128]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058d2:	4b1e      	ldr	r3, [pc, #120]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	4a1d      	ldr	r2, [pc, #116]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058de:	4b1b      	ldr	r3, [pc, #108]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	4a1a      	ldr	r2, [pc, #104]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058f0:	4b16      	ldr	r3, [pc, #88]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d114      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fd faa8 	bl	8002e50 <HAL_GetTick>
 8005900:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005902:	e00a      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fd faa4 	bl	8002e50 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e34f      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ee      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005932:	d111      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005942:	400b      	ands	r3, r1
 8005944:	4901      	ldr	r1, [pc, #4]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
 800594a:	e00b      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800594c:	40023800 	.word	0x40023800
 8005950:	40007000 	.word	0x40007000
 8005954:	0ffffcff 	.word	0x0ffffcff
 8005958:	4bb3      	ldr	r3, [pc, #716]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4ab2      	ldr	r2, [pc, #712]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800595e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005962:	6093      	str	r3, [r2, #8]
 8005964:	4bb0      	ldr	r3, [pc, #704]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005966:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005970:	49ad      	ldr	r1, [pc, #692]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005972:	4313      	orrs	r3, r2
 8005974:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b00      	cmp	r3, #0
 8005980:	d010      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005982:	4ba9      	ldr	r3, [pc, #676]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005988:	4aa7      	ldr	r2, [pc, #668]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800598a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005992:	4ba5      	ldr	r3, [pc, #660]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005994:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	49a2      	ldr	r1, [pc, #648]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059b0:	4b9d      	ldr	r3, [pc, #628]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059be:	499a      	ldr	r1, [pc, #616]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059d2:	4b95      	ldr	r3, [pc, #596]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e0:	4991      	ldr	r1, [pc, #580]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059f4:	4b8c      	ldr	r3, [pc, #560]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a02:	4989      	ldr	r1, [pc, #548]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a16:	4b84      	ldr	r3, [pc, #528]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	4980      	ldr	r1, [pc, #512]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a38:	4b7b      	ldr	r3, [pc, #492]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f023 0203 	bic.w	r2, r3, #3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	4978      	ldr	r1, [pc, #480]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a5a:	4b73      	ldr	r3, [pc, #460]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a60:	f023 020c 	bic.w	r2, r3, #12
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a68:	496f      	ldr	r1, [pc, #444]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a7c:	4b6a      	ldr	r3, [pc, #424]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8a:	4967      	ldr	r1, [pc, #412]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a9e:	4b62      	ldr	r3, [pc, #392]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	495e      	ldr	r1, [pc, #376]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ac0:	4b59      	ldr	r3, [pc, #356]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	4956      	ldr	r1, [pc, #344]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ae2:	4b51      	ldr	r3, [pc, #324]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	494d      	ldr	r1, [pc, #308]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b04:	4b48      	ldr	r3, [pc, #288]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b12:	4945      	ldr	r1, [pc, #276]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b26:	4b40      	ldr	r3, [pc, #256]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b34:	493c      	ldr	r1, [pc, #240]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b48:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b56:	4934      	ldr	r1, [pc, #208]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d011      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b78:	492b      	ldr	r1, [pc, #172]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b88:	d101      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005baa:	4b1f      	ldr	r3, [pc, #124]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb8:	491b      	ldr	r1, [pc, #108]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bcc:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bdc:	4912      	ldr	r1, [pc, #72]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c00:	4909      	ldr	r1, [pc, #36]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00f      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c24:	e002      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	4985      	ldr	r1, [pc, #532]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c40:	4b80      	ldr	r3, [pc, #512]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c50:	497c      	ldr	r1, [pc, #496]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d005      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c66:	f040 80d6 	bne.w	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c6a:	4b76      	ldr	r3, [pc, #472]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a75      	ldr	r2, [pc, #468]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c76:	f7fd f8eb 	bl	8002e50 <HAL_GetTick>
 8005c7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c7c:	e008      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c7e:	f7fd f8e7 	bl	8002e50 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b64      	cmp	r3, #100	; 0x64
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e194      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c90:	4b6c      	ldr	r3, [pc, #432]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f0      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d021      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11d      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cb0:	4b64      	ldr	r3, [pc, #400]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cbe:	4b61      	ldr	r3, [pc, #388]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc4:	0e1b      	lsrs	r3, r3, #24
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	019a      	lsls	r2, r3, #6
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	071b      	lsls	r3, r3, #28
 8005ce4:	4957      	ldr	r1, [pc, #348]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d00:	d00a      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02e      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d16:	d129      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d18:	4b4a      	ldr	r3, [pc, #296]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1e:	0c1b      	lsrs	r3, r3, #16
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d26:	4b47      	ldr	r3, [pc, #284]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d2c:	0f1b      	lsrs	r3, r3, #28
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	019a      	lsls	r2, r3, #6
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	431a      	orrs	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	071b      	lsls	r3, r3, #28
 8005d4c:	493d      	ldr	r1, [pc, #244]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d54:	4b3b      	ldr	r3, [pc, #236]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d5a:	f023 021f 	bic.w	r2, r3, #31
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	3b01      	subs	r3, #1
 8005d64:	4937      	ldr	r1, [pc, #220]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01d      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d78:	4b32      	ldr	r3, [pc, #200]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7e:	0e1b      	lsrs	r3, r3, #24
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8c:	0f1b      	lsrs	r3, r3, #28
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	019a      	lsls	r2, r3, #6
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	431a      	orrs	r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	061b      	lsls	r3, r3, #24
 8005da6:	431a      	orrs	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	071b      	lsls	r3, r3, #28
 8005dac:	4925      	ldr	r1, [pc, #148]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d011      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	019a      	lsls	r2, r3, #6
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	061b      	lsls	r3, r3, #24
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	071b      	lsls	r3, r3, #28
 8005ddc:	4919      	ldr	r1, [pc, #100]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005de4:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df0:	f7fd f82e 	bl	8002e50 <HAL_GetTick>
 8005df4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005df8:	f7fd f82a 	bl	8002e50 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	; 0x64
 8005e04:	d901      	bls.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e0d7      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	f040 80cd 	bne.w	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e2a:	f7fd f811 	bl	8002e50 <HAL_GetTick>
 8005e2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e30:	e00a      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e32:	f7fd f80d 	bl	8002e50 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b64      	cmp	r3, #100	; 0x64
 8005e3e:	d903      	bls.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e0ba      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005e44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e48:	4b5e      	ldr	r3, [pc, #376]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e54:	d0ed      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d02e      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d12a      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e7e:	4b51      	ldr	r3, [pc, #324]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e8c:	4b4d      	ldr	r3, [pc, #308]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	0f1b      	lsrs	r3, r3, #28
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	019a      	lsls	r2, r3, #6
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	061b      	lsls	r3, r3, #24
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	071b      	lsls	r3, r3, #28
 8005eb2:	4944      	ldr	r1, [pc, #272]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005eba:	4b42      	ldr	r3, [pc, #264]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	493d      	ldr	r1, [pc, #244]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d022      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee8:	d11d      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005eea:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef0:	0e1b      	lsrs	r3, r3, #24
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ef8:	4b32      	ldr	r3, [pc, #200]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	0f1b      	lsrs	r3, r3, #28
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	019a      	lsls	r2, r3, #6
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	431a      	orrs	r2, r3
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	061b      	lsls	r3, r3, #24
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	071b      	lsls	r3, r3, #28
 8005f1e:	4929      	ldr	r1, [pc, #164]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d028      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f32:	4b24      	ldr	r3, [pc, #144]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f38:	0e1b      	lsrs	r3, r3, #24
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f40:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f46:	0c1b      	lsrs	r3, r3, #16
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	019a      	lsls	r2, r3, #6
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	041b      	lsls	r3, r3, #16
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	061b      	lsls	r3, r3, #24
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	071b      	lsls	r3, r3, #28
 8005f66:	4917      	ldr	r1, [pc, #92]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f6e:	4b15      	ldr	r3, [pc, #84]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	4911      	ldr	r1, [pc, #68]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f90:	f7fc ff5e 	bl	8002e50 <HAL_GetTick>
 8005f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f98:	f7fc ff5a 	bl	8002e50 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b64      	cmp	r3, #100	; 0x64
 8005fa4:	d901      	bls.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e007      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb6:	d1ef      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40023800 	.word	0x40023800

08005fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e01d      	b.n	8006016 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f815 	bl	800601e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f000 f986 	bl	8006318 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <HAL_TIM_Base_Start_IT+0x50>)
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b06      	cmp	r3, #6
 800605c:	d00b      	beq.n	8006076 <HAL_TIM_Base_Start_IT+0x42>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d007      	beq.n	8006076 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	00010007 	.word	0x00010007

08006088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d122      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d11b      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0202 	mvn.w	r2, #2
 80060b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f905 	bl	80062da <HAL_TIM_IC_CaptureCallback>
 80060d0:	e005      	b.n	80060de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8f7 	bl	80062c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f908 	bl	80062ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d122      	bne.n	8006138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d11b      	bne.n	8006138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0204 	mvn.w	r2, #4
 8006108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f8db 	bl	80062da <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8cd 	bl	80062c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8de 	bl	80062ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b08      	cmp	r3, #8
 8006144:	d122      	bne.n	800618c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b08      	cmp	r3, #8
 8006152:	d11b      	bne.n	800618c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0208 	mvn.w	r2, #8
 800615c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2204      	movs	r2, #4
 8006162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8b1 	bl	80062da <HAL_TIM_IC_CaptureCallback>
 8006178:	e005      	b.n	8006186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f8a3 	bl	80062c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8b4 	bl	80062ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b10      	cmp	r3, #16
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0210 	mvn.w	r2, #16
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2208      	movs	r2, #8
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f887 	bl	80062da <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f879 	bl	80062c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f88a 	bl	80062ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d10e      	bne.n	800620c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0201 	mvn.w	r2, #1
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fb fe24 	bl	8001e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d10e      	bne.n	8006238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d107      	bne.n	8006238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f91a 	bl	800646c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006246:	d10e      	bne.n	8006266 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b80      	cmp	r3, #128	; 0x80
 8006254:	d107      	bne.n	8006266 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800625e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f90d 	bl	8006480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d10e      	bne.n	8006292 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d107      	bne.n	8006292 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f838 	bl	8006302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b20      	cmp	r3, #32
 800629e:	d10e      	bne.n	80062be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d107      	bne.n	80062be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0220 	mvn.w	r2, #32
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8cd 	bl	8006458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a40      	ldr	r2, [pc, #256]	; (800642c <TIM_Base_SetConfig+0x114>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006336:	d00f      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3b      	ldr	r2, [pc, #236]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3a      	ldr	r2, [pc, #232]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d108      	bne.n	800636a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2f      	ldr	r2, [pc, #188]	; (800642c <TIM_Base_SetConfig+0x114>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d02b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006378:	d027      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2c      	ldr	r2, [pc, #176]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d023      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2b      	ldr	r2, [pc, #172]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a29      	ldr	r2, [pc, #164]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d017      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a28      	ldr	r2, [pc, #160]	; (8006440 <TIM_Base_SetConfig+0x128>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a27      	ldr	r2, [pc, #156]	; (8006444 <TIM_Base_SetConfig+0x12c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a26      	ldr	r2, [pc, #152]	; (8006448 <TIM_Base_SetConfig+0x130>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a25      	ldr	r2, [pc, #148]	; (800644c <TIM_Base_SetConfig+0x134>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a24      	ldr	r2, [pc, #144]	; (8006450 <TIM_Base_SetConfig+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <TIM_Base_SetConfig+0x13c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d108      	bne.n	80063dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a0a      	ldr	r2, [pc, #40]	; (800642c <TIM_Base_SetConfig+0x114>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_Base_SetConfig+0xf8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0c      	ldr	r2, [pc, #48]	; (800643c <TIM_Base_SetConfig+0x124>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	40001800 	.word	0x40001800
 8006450:	40001c00 	.word	0x40001c00
 8006454:	40002000 	.word	0x40002000

08006458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e040      	b.n	8006528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fc fc3c 	bl	8002d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2224      	movs	r2, #36	; 0x24
 80064c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8be 	bl	8006654 <UART_SetConfig>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e022      	b.n	8006528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fb5c 	bl	8006ba8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800650e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fbe3 	bl	8006cec <UART_CheckIdleState>
 8006526:	4603      	mov	r3, r0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006544:	2b20      	cmp	r3, #32
 8006546:	d17f      	bne.n	8006648 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_UART_Transmit+0x24>
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e078      	b.n	800664a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_UART_Transmit+0x36>
 8006562:	2302      	movs	r3, #2
 8006564:	e071      	b.n	800664a <HAL_UART_Transmit+0x11a>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2221      	movs	r2, #33	; 0x21
 8006578:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800657a:	f7fc fc69 	bl	8002e50 <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	88fa      	ldrh	r2, [r7, #6]
 8006584:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006598:	d108      	bne.n	80065ac <HAL_UART_Transmit+0x7c>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d104      	bne.n	80065ac <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	e003      	b.n	80065b4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80065bc:	e02c      	b.n	8006618 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	2180      	movs	r1, #128	; 0x80
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 fbd4 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e038      	b.n	800664a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	3302      	adds	r3, #2
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	e007      	b.n	8006606 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	781a      	ldrb	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	3301      	adds	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1cc      	bne.n	80065be <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	2140      	movs	r1, #64	; 0x40
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fba1 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e005      	b.n	800664a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	e000      	b.n	800664a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006648:	2302      	movs	r3, #2
  }
}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4bb1      	ldr	r3, [pc, #708]	; (8006948 <UART_SetConfig+0x2f4>)
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	6939      	ldr	r1, [r7, #16]
 800668c:	430b      	orrs	r3, r1
 800668e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a9f      	ldr	r2, [pc, #636]	; (800694c <UART_SetConfig+0x2f8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d121      	bne.n	8006718 <UART_SetConfig+0xc4>
 80066d4:	4b9e      	ldr	r3, [pc, #632]	; (8006950 <UART_SetConfig+0x2fc>)
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d816      	bhi.n	8006710 <UART_SetConfig+0xbc>
 80066e2:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <UART_SetConfig+0x94>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	080066f9 	.word	0x080066f9
 80066ec:	08006705 	.word	0x08006705
 80066f0:	080066ff 	.word	0x080066ff
 80066f4:	0800670b 	.word	0x0800670b
 80066f8:	2301      	movs	r3, #1
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e151      	b.n	80069a2 <UART_SetConfig+0x34e>
 80066fe:	2302      	movs	r3, #2
 8006700:	77fb      	strb	r3, [r7, #31]
 8006702:	e14e      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006704:	2304      	movs	r3, #4
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e14b      	b.n	80069a2 <UART_SetConfig+0x34e>
 800670a:	2308      	movs	r3, #8
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e148      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006710:	2310      	movs	r3, #16
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	bf00      	nop
 8006716:	e144      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a8d      	ldr	r2, [pc, #564]	; (8006954 <UART_SetConfig+0x300>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d134      	bne.n	800678c <UART_SetConfig+0x138>
 8006722:	4b8b      	ldr	r3, [pc, #556]	; (8006950 <UART_SetConfig+0x2fc>)
 8006724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006728:	f003 030c 	and.w	r3, r3, #12
 800672c:	2b0c      	cmp	r3, #12
 800672e:	d829      	bhi.n	8006784 <UART_SetConfig+0x130>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <UART_SetConfig+0xe4>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	0800676d 	.word	0x0800676d
 800673c:	08006785 	.word	0x08006785
 8006740:	08006785 	.word	0x08006785
 8006744:	08006785 	.word	0x08006785
 8006748:	08006779 	.word	0x08006779
 800674c:	08006785 	.word	0x08006785
 8006750:	08006785 	.word	0x08006785
 8006754:	08006785 	.word	0x08006785
 8006758:	08006773 	.word	0x08006773
 800675c:	08006785 	.word	0x08006785
 8006760:	08006785 	.word	0x08006785
 8006764:	08006785 	.word	0x08006785
 8006768:	0800677f 	.word	0x0800677f
 800676c:	2300      	movs	r3, #0
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e117      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006772:	2302      	movs	r3, #2
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e114      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006778:	2304      	movs	r3, #4
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e111      	b.n	80069a2 <UART_SetConfig+0x34e>
 800677e:	2308      	movs	r3, #8
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e10e      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006784:	2310      	movs	r3, #16
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	bf00      	nop
 800678a:	e10a      	b.n	80069a2 <UART_SetConfig+0x34e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a71      	ldr	r2, [pc, #452]	; (8006958 <UART_SetConfig+0x304>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d120      	bne.n	80067d8 <UART_SetConfig+0x184>
 8006796:	4b6e      	ldr	r3, [pc, #440]	; (8006950 <UART_SetConfig+0x2fc>)
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d00f      	beq.n	80067c4 <UART_SetConfig+0x170>
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d802      	bhi.n	80067ae <UART_SetConfig+0x15a>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <UART_SetConfig+0x164>
 80067ac:	e010      	b.n	80067d0 <UART_SetConfig+0x17c>
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d005      	beq.n	80067be <UART_SetConfig+0x16a>
 80067b2:	2b30      	cmp	r3, #48	; 0x30
 80067b4:	d009      	beq.n	80067ca <UART_SetConfig+0x176>
 80067b6:	e00b      	b.n	80067d0 <UART_SetConfig+0x17c>
 80067b8:	2300      	movs	r3, #0
 80067ba:	77fb      	strb	r3, [r7, #31]
 80067bc:	e0f1      	b.n	80069a2 <UART_SetConfig+0x34e>
 80067be:	2302      	movs	r3, #2
 80067c0:	77fb      	strb	r3, [r7, #31]
 80067c2:	e0ee      	b.n	80069a2 <UART_SetConfig+0x34e>
 80067c4:	2304      	movs	r3, #4
 80067c6:	77fb      	strb	r3, [r7, #31]
 80067c8:	e0eb      	b.n	80069a2 <UART_SetConfig+0x34e>
 80067ca:	2308      	movs	r3, #8
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e0e8      	b.n	80069a2 <UART_SetConfig+0x34e>
 80067d0:	2310      	movs	r3, #16
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	bf00      	nop
 80067d6:	e0e4      	b.n	80069a2 <UART_SetConfig+0x34e>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a5f      	ldr	r2, [pc, #380]	; (800695c <UART_SetConfig+0x308>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d120      	bne.n	8006824 <UART_SetConfig+0x1d0>
 80067e2:	4b5b      	ldr	r3, [pc, #364]	; (8006950 <UART_SetConfig+0x2fc>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	d00f      	beq.n	8006810 <UART_SetConfig+0x1bc>
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d802      	bhi.n	80067fa <UART_SetConfig+0x1a6>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <UART_SetConfig+0x1b0>
 80067f8:	e010      	b.n	800681c <UART_SetConfig+0x1c8>
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d005      	beq.n	800680a <UART_SetConfig+0x1b6>
 80067fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006800:	d009      	beq.n	8006816 <UART_SetConfig+0x1c2>
 8006802:	e00b      	b.n	800681c <UART_SetConfig+0x1c8>
 8006804:	2300      	movs	r3, #0
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e0cb      	b.n	80069a2 <UART_SetConfig+0x34e>
 800680a:	2302      	movs	r3, #2
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e0c8      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006810:	2304      	movs	r3, #4
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e0c5      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006816:	2308      	movs	r3, #8
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	e0c2      	b.n	80069a2 <UART_SetConfig+0x34e>
 800681c:	2310      	movs	r3, #16
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	bf00      	nop
 8006822:	e0be      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a4d      	ldr	r2, [pc, #308]	; (8006960 <UART_SetConfig+0x30c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d124      	bne.n	8006878 <UART_SetConfig+0x224>
 800682e:	4b48      	ldr	r3, [pc, #288]	; (8006950 <UART_SetConfig+0x2fc>)
 8006830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683c:	d012      	beq.n	8006864 <UART_SetConfig+0x210>
 800683e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006842:	d802      	bhi.n	800684a <UART_SetConfig+0x1f6>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <UART_SetConfig+0x204>
 8006848:	e012      	b.n	8006870 <UART_SetConfig+0x21c>
 800684a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684e:	d006      	beq.n	800685e <UART_SetConfig+0x20a>
 8006850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006854:	d009      	beq.n	800686a <UART_SetConfig+0x216>
 8006856:	e00b      	b.n	8006870 <UART_SetConfig+0x21c>
 8006858:	2300      	movs	r3, #0
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e0a1      	b.n	80069a2 <UART_SetConfig+0x34e>
 800685e:	2302      	movs	r3, #2
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	e09e      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006864:	2304      	movs	r3, #4
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e09b      	b.n	80069a2 <UART_SetConfig+0x34e>
 800686a:	2308      	movs	r3, #8
 800686c:	77fb      	strb	r3, [r7, #31]
 800686e:	e098      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006870:	2310      	movs	r3, #16
 8006872:	77fb      	strb	r3, [r7, #31]
 8006874:	bf00      	nop
 8006876:	e094      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a39      	ldr	r2, [pc, #228]	; (8006964 <UART_SetConfig+0x310>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d124      	bne.n	80068cc <UART_SetConfig+0x278>
 8006882:	4b33      	ldr	r3, [pc, #204]	; (8006950 <UART_SetConfig+0x2fc>)
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d012      	beq.n	80068b8 <UART_SetConfig+0x264>
 8006892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006896:	d802      	bhi.n	800689e <UART_SetConfig+0x24a>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <UART_SetConfig+0x258>
 800689c:	e012      	b.n	80068c4 <UART_SetConfig+0x270>
 800689e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a2:	d006      	beq.n	80068b2 <UART_SetConfig+0x25e>
 80068a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a8:	d009      	beq.n	80068be <UART_SetConfig+0x26a>
 80068aa:	e00b      	b.n	80068c4 <UART_SetConfig+0x270>
 80068ac:	2301      	movs	r3, #1
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e077      	b.n	80069a2 <UART_SetConfig+0x34e>
 80068b2:	2302      	movs	r3, #2
 80068b4:	77fb      	strb	r3, [r7, #31]
 80068b6:	e074      	b.n	80069a2 <UART_SetConfig+0x34e>
 80068b8:	2304      	movs	r3, #4
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	e071      	b.n	80069a2 <UART_SetConfig+0x34e>
 80068be:	2308      	movs	r3, #8
 80068c0:	77fb      	strb	r3, [r7, #31]
 80068c2:	e06e      	b.n	80069a2 <UART_SetConfig+0x34e>
 80068c4:	2310      	movs	r3, #16
 80068c6:	77fb      	strb	r3, [r7, #31]
 80068c8:	bf00      	nop
 80068ca:	e06a      	b.n	80069a2 <UART_SetConfig+0x34e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a25      	ldr	r2, [pc, #148]	; (8006968 <UART_SetConfig+0x314>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d124      	bne.n	8006920 <UART_SetConfig+0x2cc>
 80068d6:	4b1e      	ldr	r3, [pc, #120]	; (8006950 <UART_SetConfig+0x2fc>)
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068dc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e4:	d012      	beq.n	800690c <UART_SetConfig+0x2b8>
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	d802      	bhi.n	80068f2 <UART_SetConfig+0x29e>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <UART_SetConfig+0x2ac>
 80068f0:	e012      	b.n	8006918 <UART_SetConfig+0x2c4>
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f6:	d006      	beq.n	8006906 <UART_SetConfig+0x2b2>
 80068f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068fc:	d009      	beq.n	8006912 <UART_SetConfig+0x2be>
 80068fe:	e00b      	b.n	8006918 <UART_SetConfig+0x2c4>
 8006900:	2300      	movs	r3, #0
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e04d      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006906:	2302      	movs	r3, #2
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e04a      	b.n	80069a2 <UART_SetConfig+0x34e>
 800690c:	2304      	movs	r3, #4
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e047      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006912:	2308      	movs	r3, #8
 8006914:	77fb      	strb	r3, [r7, #31]
 8006916:	e044      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006918:	2310      	movs	r3, #16
 800691a:	77fb      	strb	r3, [r7, #31]
 800691c:	bf00      	nop
 800691e:	e040      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a11      	ldr	r2, [pc, #68]	; (800696c <UART_SetConfig+0x318>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d139      	bne.n	800699e <UART_SetConfig+0x34a>
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <UART_SetConfig+0x2fc>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006938:	d027      	beq.n	800698a <UART_SetConfig+0x336>
 800693a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693e:	d817      	bhi.n	8006970 <UART_SetConfig+0x31c>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01c      	beq.n	800697e <UART_SetConfig+0x32a>
 8006944:	e027      	b.n	8006996 <UART_SetConfig+0x342>
 8006946:	bf00      	nop
 8006948:	efff69f3 	.word	0xefff69f3
 800694c:	40011000 	.word	0x40011000
 8006950:	40023800 	.word	0x40023800
 8006954:	40004400 	.word	0x40004400
 8006958:	40004800 	.word	0x40004800
 800695c:	40004c00 	.word	0x40004c00
 8006960:	40005000 	.word	0x40005000
 8006964:	40011400 	.word	0x40011400
 8006968:	40007800 	.word	0x40007800
 800696c:	40007c00 	.word	0x40007c00
 8006970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006974:	d006      	beq.n	8006984 <UART_SetConfig+0x330>
 8006976:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800697a:	d009      	beq.n	8006990 <UART_SetConfig+0x33c>
 800697c:	e00b      	b.n	8006996 <UART_SetConfig+0x342>
 800697e:	2300      	movs	r3, #0
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e00e      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006984:	2302      	movs	r3, #2
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e00b      	b.n	80069a2 <UART_SetConfig+0x34e>
 800698a:	2304      	movs	r3, #4
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e008      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006990:	2308      	movs	r3, #8
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e005      	b.n	80069a2 <UART_SetConfig+0x34e>
 8006996:	2310      	movs	r3, #16
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	bf00      	nop
 800699c:	e001      	b.n	80069a2 <UART_SetConfig+0x34e>
 800699e:	2310      	movs	r3, #16
 80069a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069aa:	d17f      	bne.n	8006aac <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80069ac:	7ffb      	ldrb	r3, [r7, #31]
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d85c      	bhi.n	8006a6c <UART_SetConfig+0x418>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x364>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	08006a1d 	.word	0x08006a1d
 80069c4:	08006a6d 	.word	0x08006a6d
 80069c8:	08006a35 	.word	0x08006a35
 80069cc:	08006a6d 	.word	0x08006a6d
 80069d0:	08006a6d 	.word	0x08006a6d
 80069d4:	08006a6d 	.word	0x08006a6d
 80069d8:	08006a55 	.word	0x08006a55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069dc:	f7fe fe74 	bl	80056c8 <HAL_RCC_GetPCLK1Freq>
 80069e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	005a      	lsls	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	441a      	add	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	61bb      	str	r3, [r7, #24]
        break;
 80069fa:	e03a      	b.n	8006a72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069fc:	f7fe fe78 	bl	80056f0 <HAL_RCC_GetPCLK2Freq>
 8006a00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	005a      	lsls	r2, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	441a      	add	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	61bb      	str	r3, [r7, #24]
        break;
 8006a1a:	e02a      	b.n	8006a72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	085a      	lsrs	r2, r3, #1
 8006a22:	4b5f      	ldr	r3, [pc, #380]	; (8006ba0 <UART_SetConfig+0x54c>)
 8006a24:	4413      	add	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6852      	ldr	r2, [r2, #4]
 8006a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	61bb      	str	r3, [r7, #24]
        break;
 8006a32:	e01e      	b.n	8006a72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a34:	f7fe fd8a 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8006a38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	005a      	lsls	r2, r3, #1
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	441a      	add	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	61bb      	str	r3, [r7, #24]
        break;
 8006a52:	e00e      	b.n	8006a72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	085b      	lsrs	r3, r3, #1
 8006a5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	61bb      	str	r3, [r7, #24]
        break;
 8006a6a:	e002      	b.n	8006a72 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	75fb      	strb	r3, [r7, #23]
        break;
 8006a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b0f      	cmp	r3, #15
 8006a76:	d916      	bls.n	8006aa6 <UART_SetConfig+0x452>
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7e:	d212      	bcs.n	8006aa6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f023 030f 	bic.w	r3, r3, #15
 8006a88:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	897b      	ldrh	r3, [r7, #10]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	897a      	ldrh	r2, [r7, #10]
 8006aa2:	60da      	str	r2, [r3, #12]
 8006aa4:	e070      	b.n	8006b88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
 8006aaa:	e06d      	b.n	8006b88 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006aac:	7ffb      	ldrb	r3, [r7, #31]
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d859      	bhi.n	8006b66 <UART_SetConfig+0x512>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x464>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006afb 	.word	0x08006afb
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b67 	.word	0x08006b67
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006b67 	.word	0x08006b67
 8006ad0:	08006b67 	.word	0x08006b67
 8006ad4:	08006b67 	.word	0x08006b67
 8006ad8:	08006b4f 	.word	0x08006b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006adc:	f7fe fdf4 	bl	80056c8 <HAL_RCC_GetPCLK1Freq>
 8006ae0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	085a      	lsrs	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	441a      	add	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	61bb      	str	r3, [r7, #24]
        break;
 8006af8:	e038      	b.n	8006b6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006afa:	f7fe fdf9 	bl	80056f0 <HAL_RCC_GetPCLK2Freq>
 8006afe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	085a      	lsrs	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	61bb      	str	r3, [r7, #24]
        break;
 8006b16:	e029      	b.n	8006b6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	085a      	lsrs	r2, r3, #1
 8006b1e:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <UART_SetConfig+0x550>)
 8006b20:	4413      	add	r3, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6852      	ldr	r2, [r2, #4]
 8006b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	61bb      	str	r3, [r7, #24]
        break;
 8006b2e:	e01d      	b.n	8006b6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b30:	f7fe fd0c 	bl	800554c <HAL_RCC_GetSysClockFreq>
 8006b34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	085a      	lsrs	r2, r3, #1
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	441a      	add	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	61bb      	str	r3, [r7, #24]
        break;
 8006b4c:	e00e      	b.n	8006b6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	61bb      	str	r3, [r7, #24]
        break;
 8006b64:	e002      	b.n	8006b6c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	75fb      	strb	r3, [r7, #23]
        break;
 8006b6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b0f      	cmp	r3, #15
 8006b70:	d908      	bls.n	8006b84 <UART_SetConfig+0x530>
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	d204      	bcs.n	8006b84 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	e001      	b.n	8006b88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	01e84800 	.word	0x01e84800
 8006ba4:	00f42400 	.word	0x00f42400

08006ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	f003 0310 	and.w	r3, r3, #16
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01a      	beq.n	8006cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ca6:	d10a      	bne.n	8006cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	605a      	str	r2, [r3, #4]
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006cfa:	f7fc f8a9 	bl	8002e50 <HAL_GetTick>
 8006cfe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d10e      	bne.n	8006d2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f82a 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e020      	b.n	8006d6e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d10e      	bne.n	8006d58 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f814 	bl	8006d76 <UART_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e00a      	b.n	8006d6e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d86:	e05d      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8e:	d059      	beq.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d90:	f7fc f85e 	bl	8002e50 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d302      	bcc.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d11b      	bne.n	8006dde <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006db4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0201 	bic.w	r2, r2, #1
 8006dc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e042      	b.n	8006e64 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02b      	beq.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dfa:	d123      	bne.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e04:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e00f      	b.n	8006e64 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69da      	ldr	r2, [r3, #28]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	bf0c      	ite	eq
 8006e54:	2301      	moveq	r3, #1
 8006e56:	2300      	movne	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d092      	beq.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006e70:	bf00      	nop
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e82:	f3ef 8305 	mrs	r3, IPSR
 8006e86:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10f      	bne.n	8006eae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e92:	607b      	str	r3, [r7, #4]
  return(result);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <osKernelInitialize+0x3a>
 8006ea6:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <osKernelInitialize+0x64>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d103      	bne.n	8006eb6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006eae:	f06f 0305 	mvn.w	r3, #5
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e00c      	b.n	8006ed0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <osKernelInitialize+0x64>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d105      	bne.n	8006eca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ebe:	4b08      	ldr	r3, [pc, #32]	; (8006ee0 <osKernelInitialize+0x64>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e002      	b.n	8006ed0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006eca:	f04f 33ff 	mov.w	r3, #4294967295
 8006ece:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20000210 	.word	0x20000210

08006ee4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eea:	f3ef 8305 	mrs	r3, IPSR
 8006eee:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10f      	bne.n	8006f16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8006efa:	607b      	str	r3, [r7, #4]
  return(result);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d105      	bne.n	8006f0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f02:	f3ef 8311 	mrs	r3, BASEPRI
 8006f06:	603b      	str	r3, [r7, #0]
  return(result);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <osKernelStart+0x3a>
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <osKernelStart+0x68>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d103      	bne.n	8006f1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006f16:	f06f 0305 	mvn.w	r3, #5
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	e010      	b.n	8006f40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <osKernelStart+0x68>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d109      	bne.n	8006f3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f26:	f7ff ffa1 	bl	8006e6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f2a:	4b08      	ldr	r3, [pc, #32]	; (8006f4c <osKernelStart+0x68>)
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f30:	f001 f910 	bl	8008154 <vTaskStartScheduler>
      stat = osOK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006f40:	68fb      	ldr	r3, [r7, #12]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000210 	.word	0x20000210

08006f50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b090      	sub	sp, #64	; 0x40
 8006f54:	af04      	add	r7, sp, #16
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f60:	f3ef 8305 	mrs	r3, IPSR
 8006f64:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f66:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 808f 	bne.w	800708c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f72:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d105      	bne.n	8006f86 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f7e:	617b      	str	r3, [r7, #20]
  return(result);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <osThreadNew+0x3e>
 8006f86:	4b44      	ldr	r3, [pc, #272]	; (8007098 <osThreadNew+0x148>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d07e      	beq.n	800708c <osThreadNew+0x13c>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d07b      	beq.n	800708c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006f94:	2380      	movs	r3, #128	; 0x80
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006f98:	2318      	movs	r3, #24
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d045      	beq.n	8007038 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <osThreadNew+0x6a>
        name = attr->name;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d008      	beq.n	8006fe0 <osThreadNew+0x90>
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	2b38      	cmp	r3, #56	; 0x38
 8006fd2:	d805      	bhi.n	8006fe0 <osThreadNew+0x90>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <osThreadNew+0x94>
        return (NULL);
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e054      	b.n	800708e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	089b      	lsrs	r3, r3, #2
 8006ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00e      	beq.n	800701a <osThreadNew+0xca>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b5b      	cmp	r3, #91	; 0x5b
 8007002:	d90a      	bls.n	800701a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007008:	2b00      	cmp	r3, #0
 800700a:	d006      	beq.n	800701a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <osThreadNew+0xca>
        mem = 1;
 8007014:	2301      	movs	r3, #1
 8007016:	623b      	str	r3, [r7, #32]
 8007018:	e010      	b.n	800703c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10c      	bne.n	800703c <osThreadNew+0xec>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d108      	bne.n	800703c <osThreadNew+0xec>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <osThreadNew+0xec>
          mem = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	623b      	str	r3, [r7, #32]
 8007036:	e001      	b.n	800703c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d110      	bne.n	8007064 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800704a:	9202      	str	r2, [sp, #8]
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 fe2b 	bl	8007cb4 <xTaskCreateStatic>
 800705e:	4603      	mov	r3, r0
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	e013      	b.n	800708c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d110      	bne.n	800708c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	b29a      	uxth	r2, r3
 800706e:	f107 0310 	add.w	r3, r7, #16
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fe79 	bl	8007d74 <xTaskCreate>
 8007082:	4603      	mov	r3, r0
 8007084:	2b01      	cmp	r3, #1
 8007086:	d001      	beq.n	800708c <osThreadNew+0x13c>
          hTask = NULL;
 8007088:	2300      	movs	r3, #0
 800708a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800708c:	693b      	ldr	r3, [r7, #16]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3730      	adds	r7, #48	; 0x30
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000210 	.word	0x20000210

0800709c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a4:	f3ef 8305 	mrs	r3, IPSR
 80070a8:	613b      	str	r3, [r7, #16]
  return(result);
 80070aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10f      	bne.n	80070d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b0:	f3ef 8310 	mrs	r3, PRIMASK
 80070b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d105      	bne.n	80070c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070bc:	f3ef 8311 	mrs	r3, BASEPRI
 80070c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d007      	beq.n	80070d8 <osDelay+0x3c>
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <osDelay+0x58>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d103      	bne.n	80070d8 <osDelay+0x3c>
    stat = osErrorISR;
 80070d0:	f06f 0305 	mvn.w	r3, #5
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	e007      	b.n	80070e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 f800 	bl	80080e8 <vTaskDelay>
    }
  }

  return (stat);
 80070e8:	697b      	ldr	r3, [r7, #20]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000210 	.word	0x20000210

080070f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4a07      	ldr	r2, [pc, #28]	; (8007124 <vApplicationGetIdleTaskMemory+0x2c>)
 8007108:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4a06      	ldr	r2, [pc, #24]	; (8007128 <vApplicationGetIdleTaskMemory+0x30>)
 800710e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2280      	movs	r2, #128	; 0x80
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20000214 	.word	0x20000214
 8007128:	20000270 	.word	0x20000270

0800712c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4a07      	ldr	r2, [pc, #28]	; (8007158 <vApplicationGetTimerTaskMemory+0x2c>)
 800713c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a06      	ldr	r2, [pc, #24]	; (800715c <vApplicationGetTimerTaskMemory+0x30>)
 8007142:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800714a:	601a      	str	r2, [r3, #0]
}
 800714c:	bf00      	nop
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	20000470 	.word	0x20000470
 800715c:	200004cc 	.word	0x200004cc

08007160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f103 0208 	add.w	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f04f 32ff 	mov.w	r2, #4294967295
 8007178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f103 0208 	add.w	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f103 0208 	add.w	r2, r3, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
}
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d103      	bne.n	8007222 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e00c      	b.n	800723c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3308      	adds	r3, #8
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e002      	b.n	8007230 <vListInsert+0x2e>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	429a      	cmp	r2, r3
 800723a:	d2f6      	bcs.n	800722a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6892      	ldr	r2, [r2, #8]
 800728a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6852      	ldr	r2, [r2, #4]
 8007294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	429a      	cmp	r2, r3
 800729e:	d103      	bne.n	80072a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	1e5a      	subs	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10b      	bne.n	80072f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	b672      	cpsid	i
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	b662      	cpsie	i
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	e7fe      	b.n	80072f2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80072f4:	f002 f8b8 	bl	8009468 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007300:	68f9      	ldr	r1, [r7, #12]
 8007302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	441a      	add	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007324:	3b01      	subs	r3, #1
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	441a      	add	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	22ff      	movs	r2, #255	; 0xff
 8007338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	22ff      	movs	r2, #255	; 0xff
 8007340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d114      	bne.n	8007374 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01a      	beq.n	8007388 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3310      	adds	r3, #16
 8007356:	4618      	mov	r0, r3
 8007358:	f001 f98a 	bl	8008670 <xTaskRemoveFromEventList>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d012      	beq.n	8007388 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007362:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <xQueueGenericReset+0xd0>)
 8007364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	e009      	b.n	8007388 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3310      	adds	r3, #16
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fef1 	bl	8007160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3324      	adds	r3, #36	; 0x24
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff feec 	bl	8007160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007388:	f002 f8a0 	bl	80094cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800738c:	2301      	movs	r3, #1
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08e      	sub	sp, #56	; 0x38
 80073a0:	af02      	add	r7, sp, #8
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <xQueueGenericCreateStatic+0x2c>
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073c6:	e7fe      	b.n	80073c6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <xQueueGenericCreateStatic+0x4a>
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <xQueueGenericCreateStatic+0x56>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <xQueueGenericCreateStatic+0x5a>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueGenericCreateStatic+0x5c>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10b      	bne.n	8007414 <xQueueGenericCreateStatic+0x78>
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	b672      	cpsid	i
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	b662      	cpsie	i
 8007410:	623b      	str	r3, [r7, #32]
 8007412:	e7fe      	b.n	8007412 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <xQueueGenericCreateStatic+0x84>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueGenericCreateStatic+0x88>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueGenericCreateStatic+0x8a>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <xQueueGenericCreateStatic+0xa6>
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	b672      	cpsid	i
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	b662      	cpsie	i
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	e7fe      	b.n	8007440 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007442:	2350      	movs	r3, #80	; 0x50
 8007444:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b50      	cmp	r3, #80	; 0x50
 800744a:	d00b      	beq.n	8007464 <xQueueGenericCreateStatic+0xc8>
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	b672      	cpsid	i
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	b662      	cpsie	i
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	e7fe      	b.n	8007462 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007464:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00d      	beq.n	800748c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007478:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	4613      	mov	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f805 	bl	8007496 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800748e:	4618      	mov	r0, r3
 8007490:	3730      	adds	r7, #48	; 0x30
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	607a      	str	r2, [r7, #4]
 80074a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d103      	bne.n	80074b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e002      	b.n	80074b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074c4:	2101      	movs	r1, #1
 80074c6:	69b8      	ldr	r0, [r7, #24]
 80074c8:	f7ff fefe 	bl	80072c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08e      	sub	sp, #56	; 0x38
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074ea:	2300      	movs	r3, #0
 80074ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <xQueueGenericSend+0x34>
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	b672      	cpsid	i
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	b662      	cpsie	i
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
 800750e:	e7fe      	b.n	800750e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d103      	bne.n	800751e <xQueueGenericSend+0x42>
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <xQueueGenericSend+0x46>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueGenericSend+0x48>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <xQueueGenericSend+0x64>
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	b672      	cpsid	i
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	b662      	cpsie	i
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
 800753e:	e7fe      	b.n	800753e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d103      	bne.n	800754e <xQueueGenericSend+0x72>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <xQueueGenericSend+0x76>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <xQueueGenericSend+0x78>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10b      	bne.n	8007570 <xQueueGenericSend+0x94>
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	b672      	cpsid	i
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	b662      	cpsie	i
 800756c:	623b      	str	r3, [r7, #32]
 800756e:	e7fe      	b.n	800756e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007570:	f001 fa3c 	bl	80089ec <xTaskGetSchedulerState>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <xQueueGenericSend+0xa4>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <xQueueGenericSend+0xa8>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <xQueueGenericSend+0xaa>
 8007584:	2300      	movs	r3, #0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10b      	bne.n	80075a2 <xQueueGenericSend+0xc6>
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	b672      	cpsid	i
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	b662      	cpsie	i
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075a2:	f001 ff61 	bl	8009468 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d302      	bcc.n	80075b8 <xQueueGenericSend+0xdc>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d129      	bne.n	800760c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	68b9      	ldr	r1, [r7, #8]
 80075bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075be:	f000 fa0d 	bl	80079dc <prvCopyDataToQueue>
 80075c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d010      	beq.n	80075ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	3324      	adds	r3, #36	; 0x24
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 f84d 	bl	8008670 <xTaskRemoveFromEventList>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d013      	beq.n	8007604 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075dc:	4b3f      	ldr	r3, [pc, #252]	; (80076dc <xQueueGenericSend+0x200>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	e00a      	b.n	8007604 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075f4:	4b39      	ldr	r3, [pc, #228]	; (80076dc <xQueueGenericSend+0x200>)
 80075f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007604:	f001 ff62 	bl	80094cc <vPortExitCritical>
				return pdPASS;
 8007608:	2301      	movs	r3, #1
 800760a:	e063      	b.n	80076d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007612:	f001 ff5b 	bl	80094cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007616:	2300      	movs	r3, #0
 8007618:	e05c      	b.n	80076d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007620:	f107 0314 	add.w	r3, r7, #20
 8007624:	4618      	mov	r0, r3
 8007626:	f001 f887 	bl	8008738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800762a:	2301      	movs	r3, #1
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800762e:	f001 ff4d 	bl	80094cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007632:	f000 fdf7 	bl	8008224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007636:	f001 ff17 	bl	8009468 <vPortEnterCritical>
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007640:	b25b      	sxtb	r3, r3
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d103      	bne.n	8007650 <xQueueGenericSend+0x174>
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007656:	b25b      	sxtb	r3, r3
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d103      	bne.n	8007666 <xQueueGenericSend+0x18a>
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007666:	f001 ff31 	bl	80094cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800766a:	1d3a      	adds	r2, r7, #4
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f001 f876 	bl	8008764 <xTaskCheckForTimeOut>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d124      	bne.n	80076c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800767e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007680:	f000 faa4 	bl	8007bcc <prvIsQueueFull>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d018      	beq.n	80076bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	3310      	adds	r3, #16
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4611      	mov	r1, r2
 8007692:	4618      	mov	r0, r3
 8007694:	f000 ff9a 	bl	80085cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769a:	f000 fa2f 	bl	8007afc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800769e:	f000 fdcf 	bl	8008240 <xTaskResumeAll>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f47f af7c 	bne.w	80075a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <xQueueGenericSend+0x200>)
 80076ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	e772      	b.n	80075a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076be:	f000 fa1d 	bl	8007afc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076c2:	f000 fdbd 	bl	8008240 <xTaskResumeAll>
 80076c6:	e76c      	b.n	80075a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ca:	f000 fa17 	bl	8007afc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ce:	f000 fdb7 	bl	8008240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3738      	adds	r7, #56	; 0x38
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	e000ed04 	.word	0xe000ed04

080076e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08e      	sub	sp, #56	; 0x38
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <xQueueGenericSendFromISR+0x30>
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	b672      	cpsid	i
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	b662      	cpsie	i
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
 800770e:	e7fe      	b.n	800770e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d103      	bne.n	800771e <xQueueGenericSendFromISR+0x3e>
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <xQueueGenericSendFromISR+0x42>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <xQueueGenericSendFromISR+0x44>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10b      	bne.n	8007740 <xQueueGenericSendFromISR+0x60>
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	b672      	cpsid	i
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	b662      	cpsie	i
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	e7fe      	b.n	800773e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d103      	bne.n	800774e <xQueueGenericSendFromISR+0x6e>
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <xQueueGenericSendFromISR+0x72>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <xQueueGenericSendFromISR+0x74>
 8007752:	2300      	movs	r3, #0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10b      	bne.n	8007770 <xQueueGenericSendFromISR+0x90>
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	b672      	cpsid	i
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	b662      	cpsie	i
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	e7fe      	b.n	800776e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007770:	f001 ff5a 	bl	8009628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007774:	f3ef 8211 	mrs	r2, BASEPRI
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	b672      	cpsid	i
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	b662      	cpsie	i
 800778c:	61ba      	str	r2, [r7, #24]
 800778e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007790:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779c:	429a      	cmp	r2, r3
 800779e:	d302      	bcc.n	80077a6 <xQueueGenericSendFromISR+0xc6>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d12c      	bne.n	8007800 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077b6:	f000 f911 	bl	80079dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c2:	d112      	bne.n	80077ea <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d016      	beq.n	80077fa <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	3324      	adds	r3, #36	; 0x24
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 ff4d 	bl	8008670 <xTaskRemoveFromEventList>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00e      	beq.n	80077fa <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e007      	b.n	80077fa <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077ee:	3301      	adds	r3, #1
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	b25a      	sxtb	r2, r3
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077fa:	2301      	movs	r3, #1
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80077fe:	e001      	b.n	8007804 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007800:	2300      	movs	r3, #0
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007810:	4618      	mov	r0, r3
 8007812:	3738      	adds	r7, #56	; 0x38
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	; 0x30
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007824:	2300      	movs	r3, #0
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <xQueueReceive+0x32>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	b672      	cpsid	i
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	b662      	cpsie	i
 8007846:	623b      	str	r3, [r7, #32]
 8007848:	e7fe      	b.n	8007848 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <xQueueReceive+0x40>
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <xQueueReceive+0x44>
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <xQueueReceive+0x46>
 800785c:	2300      	movs	r3, #0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10b      	bne.n	800787a <xQueueReceive+0x62>
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	b672      	cpsid	i
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	b662      	cpsie	i
 8007876:	61fb      	str	r3, [r7, #28]
 8007878:	e7fe      	b.n	8007878 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800787a:	f001 f8b7 	bl	80089ec <xTaskGetSchedulerState>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <xQueueReceive+0x72>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <xQueueReceive+0x76>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <xQueueReceive+0x78>
 800788e:	2300      	movs	r3, #0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10b      	bne.n	80078ac <xQueueReceive+0x94>
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	b672      	cpsid	i
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	b662      	cpsie	i
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	e7fe      	b.n	80078aa <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ac:	f001 fddc 	bl	8009468 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01f      	beq.n	80078fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c0:	f000 f8f6 	bl	8007ab0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	1e5a      	subs	r2, r3, #1
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00f      	beq.n	80078f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	3310      	adds	r3, #16
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fec9 	bl	8008670 <xTaskRemoveFromEventList>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d007      	beq.n	80078f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078e4:	4b3c      	ldr	r3, [pc, #240]	; (80079d8 <xQueueReceive+0x1c0>)
 80078e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078f4:	f001 fdea 	bl	80094cc <vPortExitCritical>
				return pdPASS;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e069      	b.n	80079d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007902:	f001 fde3 	bl	80094cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007906:	2300      	movs	r3, #0
 8007908:	e062      	b.n	80079d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	2b00      	cmp	r3, #0
 800790e:	d106      	bne.n	800791e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007910:	f107 0310 	add.w	r3, r7, #16
 8007914:	4618      	mov	r0, r3
 8007916:	f000 ff0f 	bl	8008738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800791a:	2301      	movs	r3, #1
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800791e:	f001 fdd5 	bl	80094cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007922:	f000 fc7f 	bl	8008224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007926:	f001 fd9f 	bl	8009468 <vPortEnterCritical>
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007930:	b25b      	sxtb	r3, r3
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d103      	bne.n	8007940 <xQueueReceive+0x128>
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007946:	b25b      	sxtb	r3, r3
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794c:	d103      	bne.n	8007956 <xQueueReceive+0x13e>
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007956:	f001 fdb9 	bl	80094cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800795a:	1d3a      	adds	r2, r7, #4
 800795c:	f107 0310 	add.w	r3, r7, #16
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fefe 	bl	8008764 <xTaskCheckForTimeOut>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d123      	bne.n	80079b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800796e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007970:	f000 f916 	bl	8007ba0 <prvIsQueueEmpty>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d017      	beq.n	80079aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	3324      	adds	r3, #36	; 0x24
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fe22 	bl	80085cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798a:	f000 f8b7 	bl	8007afc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800798e:	f000 fc57 	bl	8008240 <xTaskResumeAll>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d189      	bne.n	80078ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007998:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <xQueueReceive+0x1c0>)
 800799a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	e780      	b.n	80078ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ac:	f000 f8a6 	bl	8007afc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079b0:	f000 fc46 	bl	8008240 <xTaskResumeAll>
 80079b4:	e77a      	b.n	80078ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b8:	f000 f8a0 	bl	8007afc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079bc:	f000 fc40 	bl	8008240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c2:	f000 f8ed 	bl	8007ba0 <prvIsQueueEmpty>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f43f af6f 	beq.w	80078ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3730      	adds	r7, #48	; 0x30
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d14d      	bne.n	8007a9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 f80e 	bl	8008a28 <xTaskPriorityDisinherit>
 8007a0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	609a      	str	r2, [r3, #8]
 8007a14:	e043      	b.n	8007a9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d119      	bne.n	8007a50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6858      	ldr	r0, [r3, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	461a      	mov	r2, r3
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	f002 f882 	bl	8009b30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	441a      	add	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d32b      	bcc.n	8007a9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	e026      	b.n	8007a9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68d8      	ldr	r0, [r3, #12]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	f002 f868 	bl	8009b30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	425b      	negs	r3, r3
 8007a6a:	441a      	add	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d207      	bcs.n	8007a8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	425b      	negs	r3, r3
 8007a86:	441a      	add	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d105      	bne.n	8007a9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007aa6:	697b      	ldr	r3, [r7, #20]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d018      	beq.n	8007af4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	441a      	add	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d303      	bcc.n	8007ae4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68d9      	ldr	r1, [r3, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	461a      	mov	r2, r3
 8007aee:	6838      	ldr	r0, [r7, #0]
 8007af0:	f002 f81e 	bl	8009b30 <memcpy>
	}
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b04:	f001 fcb0 	bl	8009468 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b10:	e011      	b.n	8007b36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d012      	beq.n	8007b40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3324      	adds	r3, #36	; 0x24
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fda6 	bl	8008670 <xTaskRemoveFromEventList>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b2a:	f000 fe7f 	bl	800882c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dce9      	bgt.n	8007b12 <prvUnlockQueue+0x16>
 8007b3e:	e000      	b.n	8007b42 <prvUnlockQueue+0x46>
					break;
 8007b40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	22ff      	movs	r2, #255	; 0xff
 8007b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b4a:	f001 fcbf 	bl	80094cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b4e:	f001 fc8b 	bl	8009468 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b5a:	e011      	b.n	8007b80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d012      	beq.n	8007b8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3310      	adds	r3, #16
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fd81 	bl	8008670 <xTaskRemoveFromEventList>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b74:	f000 fe5a 	bl	800882c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dce9      	bgt.n	8007b5c <prvUnlockQueue+0x60>
 8007b88:	e000      	b.n	8007b8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	22ff      	movs	r2, #255	; 0xff
 8007b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b94:	f001 fc9a 	bl	80094cc <vPortExitCritical>
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ba8:	f001 fc5e 	bl	8009468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	e001      	b.n	8007bbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bbe:	f001 fc85 	bl	80094cc <vPortExitCritical>

	return xReturn;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bd4:	f001 fc48 	bl	8009468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d102      	bne.n	8007bea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e001      	b.n	8007bee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bee:	f001 fc6d 	bl	80094cc <vPortExitCritical>

	return xReturn;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e014      	b.n	8007c36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c0c:	4a0e      	ldr	r2, [pc, #56]	; (8007c48 <vQueueAddToRegistry+0x4c>)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10b      	bne.n	8007c30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c18:	490b      	ldr	r1, [pc, #44]	; (8007c48 <vQueueAddToRegistry+0x4c>)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c22:	4a09      	ldr	r2, [pc, #36]	; (8007c48 <vQueueAddToRegistry+0x4c>)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	4413      	add	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c2e:	e005      	b.n	8007c3c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b07      	cmp	r3, #7
 8007c3a:	d9e7      	bls.n	8007c0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c3c:	bf00      	nop
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	20004de8 	.word	0x20004de8

08007c4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c5c:	f001 fc04 	bl	8009468 <vPortEnterCritical>
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c66:	b25b      	sxtb	r3, r3
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d103      	bne.n	8007c76 <vQueueWaitForMessageRestricted+0x2a>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c7c:	b25b      	sxtb	r3, r3
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d103      	bne.n	8007c8c <vQueueWaitForMessageRestricted+0x40>
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c8c:	f001 fc1e 	bl	80094cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d106      	bne.n	8007ca6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	3324      	adds	r3, #36	; 0x24
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 fcb9 	bl	8008618 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ca6:	6978      	ldr	r0, [r7, #20]
 8007ca8:	f7ff ff28 	bl	8007afc <prvUnlockQueue>
	}
 8007cac:	bf00      	nop
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08e      	sub	sp, #56	; 0x38
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10b      	bne.n	8007ce0 <xTaskCreateStatic+0x2c>
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	b672      	cpsid	i
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	b662      	cpsie	i
 8007cdc:	623b      	str	r3, [r7, #32]
 8007cde:	e7fe      	b.n	8007cde <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <xTaskCreateStatic+0x4a>
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	b672      	cpsid	i
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	b662      	cpsie	i
 8007cfa:	61fb      	str	r3, [r7, #28]
 8007cfc:	e7fe      	b.n	8007cfc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cfe:	235c      	movs	r3, #92	; 0x5c
 8007d00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b5c      	cmp	r3, #92	; 0x5c
 8007d06:	d00b      	beq.n	8007d20 <xTaskCreateStatic+0x6c>
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	b672      	cpsid	i
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	b662      	cpsie	i
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	e7fe      	b.n	8007d1e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01e      	beq.n	8007d66 <xTaskCreateStatic+0xb2>
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01b      	beq.n	8007d66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d40:	2300      	movs	r3, #0
 8007d42:	9303      	str	r3, [sp, #12]
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	9302      	str	r3, [sp, #8]
 8007d48:	f107 0314 	add.w	r3, r7, #20
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 f850 	bl	8007dfe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d60:	f000 f8de 	bl	8007f20 <prvAddNewTaskToReadyList>
 8007d64:	e001      	b.n	8007d6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d6a:	697b      	ldr	r3, [r7, #20]
	}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3728      	adds	r7, #40	; 0x28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08c      	sub	sp, #48	; 0x30
 8007d78:	af04      	add	r7, sp, #16
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 fc8f 	bl	80096ac <pvPortMalloc>
 8007d8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00e      	beq.n	8007db4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d96:	205c      	movs	r0, #92	; 0x5c
 8007d98:	f001 fc88 	bl	80096ac <pvPortMalloc>
 8007d9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30
 8007daa:	e005      	b.n	8007db8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007dac:	6978      	ldr	r0, [r7, #20]
 8007dae:	f001 fd45 	bl	800983c <vPortFree>
 8007db2:	e001      	b.n	8007db8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007db4:	2300      	movs	r3, #0
 8007db6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d017      	beq.n	8007dee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	9302      	str	r3, [sp, #8]
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f80e 	bl	8007dfe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007de2:	69f8      	ldr	r0, [r7, #28]
 8007de4:	f000 f89c 	bl	8007f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007de8:	2301      	movs	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e002      	b.n	8007df4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295
 8007df2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007df4:	69bb      	ldr	r3, [r7, #24]
	}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b088      	sub	sp, #32
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	461a      	mov	r2, r3
 8007e16:	21a5      	movs	r1, #165	; 0xa5
 8007e18:	f001 fe95 	bl	8009b46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007e26:	440b      	add	r3, r1
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f023 0307 	bic.w	r3, r3, #7
 8007e34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <prvInitialiseNewTask+0x5a>
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	b672      	cpsid	i
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	b662      	cpsie	i
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	e7fe      	b.n	8007e56 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d01f      	beq.n	8007e9e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e012      	b.n	8007e8a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	7819      	ldrb	r1, [r3, #0]
 8007e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	3334      	adds	r3, #52	; 0x34
 8007e74:	460a      	mov	r2, r1
 8007e76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d006      	beq.n	8007e92 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	2b0f      	cmp	r3, #15
 8007e8e:	d9e9      	bls.n	8007e64 <prvInitialiseNewTask+0x66>
 8007e90:	e000      	b.n	8007e94 <prvInitialiseNewTask+0x96>
			{
				break;
 8007e92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e9c:	e003      	b.n	8007ea6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	2b37      	cmp	r3, #55	; 0x37
 8007eaa:	d901      	bls.n	8007eb0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007eac:	2337      	movs	r3, #55	; 0x37
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff f96a 	bl	80071a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	3318      	adds	r3, #24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7ff f965 	bl	80071a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2200      	movs	r2, #0
 8007ef0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	68f9      	ldr	r1, [r7, #12]
 8007efe:	69b8      	ldr	r0, [r7, #24]
 8007f00:	f001 f9aa 	bl	8009258 <pxPortInitialiseStack>
 8007f04:	4602      	mov	r2, r0
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f16:	bf00      	nop
 8007f18:	3720      	adds	r7, #32
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f28:	f001 fa9e 	bl	8009468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f2c:	4b2d      	ldr	r3, [pc, #180]	; (8007fe4 <prvAddNewTaskToReadyList+0xc4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	4a2c      	ldr	r2, [pc, #176]	; (8007fe4 <prvAddNewTaskToReadyList+0xc4>)
 8007f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f36:	4b2c      	ldr	r3, [pc, #176]	; (8007fe8 <prvAddNewTaskToReadyList+0xc8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f3e:	4a2a      	ldr	r2, [pc, #168]	; (8007fe8 <prvAddNewTaskToReadyList+0xc8>)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f44:	4b27      	ldr	r3, [pc, #156]	; (8007fe4 <prvAddNewTaskToReadyList+0xc4>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d110      	bne.n	8007f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f4c:	f000 fc92 	bl	8008874 <prvInitialiseTaskLists>
 8007f50:	e00d      	b.n	8007f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f52:	4b26      	ldr	r3, [pc, #152]	; (8007fec <prvAddNewTaskToReadyList+0xcc>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f5a:	4b23      	ldr	r3, [pc, #140]	; (8007fe8 <prvAddNewTaskToReadyList+0xc8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d802      	bhi.n	8007f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f68:	4a1f      	ldr	r2, [pc, #124]	; (8007fe8 <prvAddNewTaskToReadyList+0xc8>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f6e:	4b20      	ldr	r3, [pc, #128]	; (8007ff0 <prvAddNewTaskToReadyList+0xd0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	4a1e      	ldr	r2, [pc, #120]	; (8007ff0 <prvAddNewTaskToReadyList+0xd0>)
 8007f76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f78:	4b1d      	ldr	r3, [pc, #116]	; (8007ff0 <prvAddNewTaskToReadyList+0xd0>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f84:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <prvAddNewTaskToReadyList+0xd4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d903      	bls.n	8007f94 <prvAddNewTaskToReadyList+0x74>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	4a18      	ldr	r2, [pc, #96]	; (8007ff4 <prvAddNewTaskToReadyList+0xd4>)
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f98:	4613      	mov	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <prvAddNewTaskToReadyList+0xd8>)
 8007fa2:	441a      	add	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f7ff f905 	bl	80071ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fb0:	f001 fa8c 	bl	80094cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fb4:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <prvAddNewTaskToReadyList+0xcc>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00e      	beq.n	8007fda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <prvAddNewTaskToReadyList+0xc8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d207      	bcs.n	8007fda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fca:	4b0c      	ldr	r3, [pc, #48]	; (8007ffc <prvAddNewTaskToReadyList+0xdc>)
 8007fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000da0 	.word	0x20000da0
 8007fe8:	200008cc 	.word	0x200008cc
 8007fec:	20000dac 	.word	0x20000dac
 8007ff0:	20000dbc 	.word	0x20000dbc
 8007ff4:	20000da8 	.word	0x20000da8
 8007ff8:	200008d0 	.word	0x200008d0
 8007ffc:	e000ed04 	.word	0xe000ed04

08008000 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008008:	f001 fa2e 	bl	8009468 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d102      	bne.n	8008018 <vTaskDelete+0x18>
 8008012:	4b2d      	ldr	r3, [pc, #180]	; (80080c8 <vTaskDelete+0xc8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	e000      	b.n	800801a <vTaskDelete+0x1a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3304      	adds	r3, #4
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff f927 	bl	8007274 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3318      	adds	r3, #24
 8008032:	4618      	mov	r0, r3
 8008034:	f7ff f91e 	bl	8007274 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008038:	4b24      	ldr	r3, [pc, #144]	; (80080cc <vTaskDelete+0xcc>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3301      	adds	r3, #1
 800803e:	4a23      	ldr	r2, [pc, #140]	; (80080cc <vTaskDelete+0xcc>)
 8008040:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008042:	4b21      	ldr	r3, [pc, #132]	; (80080c8 <vTaskDelete+0xc8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	429a      	cmp	r2, r3
 800804a:	d10b      	bne.n	8008064 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3304      	adds	r3, #4
 8008050:	4619      	mov	r1, r3
 8008052:	481f      	ldr	r0, [pc, #124]	; (80080d0 <vTaskDelete+0xd0>)
 8008054:	f7ff f8b1 	bl	80071ba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008058:	4b1e      	ldr	r3, [pc, #120]	; (80080d4 <vTaskDelete+0xd4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	4a1d      	ldr	r2, [pc, #116]	; (80080d4 <vTaskDelete+0xd4>)
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	e009      	b.n	8008078 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008064:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <vTaskDelete+0xd8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3b01      	subs	r3, #1
 800806a:	4a1b      	ldr	r2, [pc, #108]	; (80080d8 <vTaskDelete+0xd8>)
 800806c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fc6c 	bl	800894c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008074:	f000 fc9a 	bl	80089ac <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008078:	f001 fa28 	bl	80094cc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800807c:	4b17      	ldr	r3, [pc, #92]	; (80080dc <vTaskDelete+0xdc>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01c      	beq.n	80080be <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008084:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <vTaskDelete+0xc8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	429a      	cmp	r2, r3
 800808c:	d117      	bne.n	80080be <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800808e:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <vTaskDelete+0xe0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <vTaskDelete+0xae>
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	b672      	cpsid	i
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	b662      	cpsie	i
 80080aa:	60bb      	str	r3, [r7, #8]
 80080ac:	e7fe      	b.n	80080ac <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 80080ae:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <vTaskDelete+0xe4>)
 80080b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	200008cc 	.word	0x200008cc
 80080cc:	20000dbc 	.word	0x20000dbc
 80080d0:	20000d74 	.word	0x20000d74
 80080d4:	20000d88 	.word	0x20000d88
 80080d8:	20000da0 	.word	0x20000da0
 80080dc:	20000dac 	.word	0x20000dac
 80080e0:	20000dc8 	.word	0x20000dc8
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d018      	beq.n	800812c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080fa:	4b14      	ldr	r3, [pc, #80]	; (800814c <vTaskDelay+0x64>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <vTaskDelay+0x32>
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	b672      	cpsid	i
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	b662      	cpsie	i
 8008116:	60bb      	str	r3, [r7, #8]
 8008118:	e7fe      	b.n	8008118 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800811a:	f000 f883 	bl	8008224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800811e:	2100      	movs	r1, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fcf1 	bl	8008b08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008126:	f000 f88b 	bl	8008240 <xTaskResumeAll>
 800812a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d107      	bne.n	8008142 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008132:	4b07      	ldr	r3, [pc, #28]	; (8008150 <vTaskDelay+0x68>)
 8008134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20000dc8 	.word	0x20000dc8
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	; 0x28
 8008158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800815a:	2300      	movs	r3, #0
 800815c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008162:	463a      	mov	r2, r7
 8008164:	1d39      	adds	r1, r7, #4
 8008166:	f107 0308 	add.w	r3, r7, #8
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe ffc4 	bl	80070f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	9202      	str	r2, [sp, #8]
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	2300      	movs	r3, #0
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	2300      	movs	r3, #0
 8008180:	460a      	mov	r2, r1
 8008182:	4922      	ldr	r1, [pc, #136]	; (800820c <vTaskStartScheduler+0xb8>)
 8008184:	4822      	ldr	r0, [pc, #136]	; (8008210 <vTaskStartScheduler+0xbc>)
 8008186:	f7ff fd95 	bl	8007cb4 <xTaskCreateStatic>
 800818a:	4602      	mov	r2, r0
 800818c:	4b21      	ldr	r3, [pc, #132]	; (8008214 <vTaskStartScheduler+0xc0>)
 800818e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008190:	4b20      	ldr	r3, [pc, #128]	; (8008214 <vTaskStartScheduler+0xc0>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008198:	2301      	movs	r3, #1
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	e001      	b.n	80081a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d102      	bne.n	80081ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081a8:	f000 fd02 	bl	8008bb0 <xTimerCreateTimerTask>
 80081ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d117      	bne.n	80081e4 <vTaskStartScheduler+0x90>
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	b672      	cpsid	i
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	b662      	cpsie	i
 80081c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081ca:	4b13      	ldr	r3, [pc, #76]	; (8008218 <vTaskStartScheduler+0xc4>)
 80081cc:	f04f 32ff 	mov.w	r2, #4294967295
 80081d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081d2:	4b12      	ldr	r3, [pc, #72]	; (800821c <vTaskStartScheduler+0xc8>)
 80081d4:	2201      	movs	r2, #1
 80081d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081d8:	4b11      	ldr	r3, [pc, #68]	; (8008220 <vTaskStartScheduler+0xcc>)
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081de:	f001 f8c7 	bl	8009370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081e2:	e00f      	b.n	8008204 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d10b      	bne.n	8008204 <vTaskStartScheduler+0xb0>
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	b672      	cpsid	i
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	b662      	cpsie	i
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	e7fe      	b.n	8008202 <vTaskStartScheduler+0xae>
}
 8008204:	bf00      	nop
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	0800c5e0 	.word	0x0800c5e0
 8008210:	08008845 	.word	0x08008845
 8008214:	20000dc4 	.word	0x20000dc4
 8008218:	20000dc0 	.word	0x20000dc0
 800821c:	20000dac 	.word	0x20000dac
 8008220:	20000da4 	.word	0x20000da4

08008224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <vTaskSuspendAll+0x18>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	4a03      	ldr	r2, [pc, #12]	; (800823c <vTaskSuspendAll+0x18>)
 8008230:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008232:	bf00      	nop
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	20000dc8 	.word	0x20000dc8

08008240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800824e:	4b42      	ldr	r3, [pc, #264]	; (8008358 <xTaskResumeAll+0x118>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10b      	bne.n	800826e <xTaskResumeAll+0x2e>
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	e7fe      	b.n	800826c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800826e:	f001 f8fb 	bl	8009468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008272:	4b39      	ldr	r3, [pc, #228]	; (8008358 <xTaskResumeAll+0x118>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3b01      	subs	r3, #1
 8008278:	4a37      	ldr	r2, [pc, #220]	; (8008358 <xTaskResumeAll+0x118>)
 800827a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800827c:	4b36      	ldr	r3, [pc, #216]	; (8008358 <xTaskResumeAll+0x118>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d162      	bne.n	800834a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008284:	4b35      	ldr	r3, [pc, #212]	; (800835c <xTaskResumeAll+0x11c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d05e      	beq.n	800834a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800828c:	e02f      	b.n	80082ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828e:	4b34      	ldr	r3, [pc, #208]	; (8008360 <xTaskResumeAll+0x120>)
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3318      	adds	r3, #24
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe ffea 	bl	8007274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe ffe5 	bl	8007274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ae:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <xTaskResumeAll+0x124>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d903      	bls.n	80082be <xTaskResumeAll+0x7e>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	4a2a      	ldr	r2, [pc, #168]	; (8008364 <xTaskResumeAll+0x124>)
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4a27      	ldr	r2, [pc, #156]	; (8008368 <xTaskResumeAll+0x128>)
 80082cc:	441a      	add	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fe ff70 	bl	80071ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082de:	4b23      	ldr	r3, [pc, #140]	; (800836c <xTaskResumeAll+0x12c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d302      	bcc.n	80082ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80082e8:	4b21      	ldr	r3, [pc, #132]	; (8008370 <xTaskResumeAll+0x130>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ee:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <xTaskResumeAll+0x120>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1cb      	bne.n	800828e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082fc:	f000 fb56 	bl	80089ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008300:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <xTaskResumeAll+0x134>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d010      	beq.n	800832e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800830c:	f000 f846 	bl	800839c <xTaskIncrementTick>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008316:	4b16      	ldr	r3, [pc, #88]	; (8008370 <xTaskResumeAll+0x130>)
 8008318:	2201      	movs	r2, #1
 800831a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3b01      	subs	r3, #1
 8008320:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f1      	bne.n	800830c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008328:	4b12      	ldr	r3, [pc, #72]	; (8008374 <xTaskResumeAll+0x134>)
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <xTaskResumeAll+0x130>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008336:	2301      	movs	r3, #1
 8008338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800833a:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <xTaskResumeAll+0x138>)
 800833c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800834a:	f001 f8bf 	bl	80094cc <vPortExitCritical>

	return xAlreadyYielded;
 800834e:	68bb      	ldr	r3, [r7, #8]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20000dc8 	.word	0x20000dc8
 800835c:	20000da0 	.word	0x20000da0
 8008360:	20000d60 	.word	0x20000d60
 8008364:	20000da8 	.word	0x20000da8
 8008368:	200008d0 	.word	0x200008d0
 800836c:	200008cc 	.word	0x200008cc
 8008370:	20000db4 	.word	0x20000db4
 8008374:	20000db0 	.word	0x20000db0
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <xTaskGetTickCount+0x1c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008388:	687b      	ldr	r3, [r7, #4]
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000da4 	.word	0x20000da4

0800839c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a6:	4b4f      	ldr	r3, [pc, #316]	; (80084e4 <xTaskIncrementTick+0x148>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f040 808a 	bne.w	80084c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083b0:	4b4d      	ldr	r3, [pc, #308]	; (80084e8 <xTaskIncrementTick+0x14c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083b8:	4a4b      	ldr	r2, [pc, #300]	; (80084e8 <xTaskIncrementTick+0x14c>)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d121      	bne.n	8008408 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80083c4:	4b49      	ldr	r3, [pc, #292]	; (80084ec <xTaskIncrementTick+0x150>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <xTaskIncrementTick+0x4a>
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	b672      	cpsid	i
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	b662      	cpsie	i
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	e7fe      	b.n	80083e4 <xTaskIncrementTick+0x48>
 80083e6:	4b41      	ldr	r3, [pc, #260]	; (80084ec <xTaskIncrementTick+0x150>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	4b40      	ldr	r3, [pc, #256]	; (80084f0 <xTaskIncrementTick+0x154>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a3e      	ldr	r2, [pc, #248]	; (80084ec <xTaskIncrementTick+0x150>)
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	4a3e      	ldr	r2, [pc, #248]	; (80084f0 <xTaskIncrementTick+0x154>)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	4b3e      	ldr	r3, [pc, #248]	; (80084f4 <xTaskIncrementTick+0x158>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3301      	adds	r3, #1
 8008400:	4a3c      	ldr	r2, [pc, #240]	; (80084f4 <xTaskIncrementTick+0x158>)
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	f000 fad2 	bl	80089ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008408:	4b3b      	ldr	r3, [pc, #236]	; (80084f8 <xTaskIncrementTick+0x15c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	429a      	cmp	r2, r3
 8008410:	d349      	bcc.n	80084a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008412:	4b36      	ldr	r3, [pc, #216]	; (80084ec <xTaskIncrementTick+0x150>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d104      	bne.n	8008426 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800841c:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <xTaskIncrementTick+0x15c>)
 800841e:	f04f 32ff 	mov.w	r2, #4294967295
 8008422:	601a      	str	r2, [r3, #0]
					break;
 8008424:	e03f      	b.n	80084a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008426:	4b31      	ldr	r3, [pc, #196]	; (80084ec <xTaskIncrementTick+0x150>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	429a      	cmp	r2, r3
 800843c:	d203      	bcs.n	8008446 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800843e:	4a2e      	ldr	r2, [pc, #184]	; (80084f8 <xTaskIncrementTick+0x15c>)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008444:	e02f      	b.n	80084a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3304      	adds	r3, #4
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe ff12 	bl	8007274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	3318      	adds	r3, #24
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe ff09 	bl	8007274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008466:	4b25      	ldr	r3, [pc, #148]	; (80084fc <xTaskIncrementTick+0x160>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d903      	bls.n	8008476 <xTaskIncrementTick+0xda>
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	4a22      	ldr	r2, [pc, #136]	; (80084fc <xTaskIncrementTick+0x160>)
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4a1f      	ldr	r2, [pc, #124]	; (8008500 <xTaskIncrementTick+0x164>)
 8008484:	441a      	add	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	3304      	adds	r3, #4
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f7fe fe94 	bl	80071ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <xTaskIncrementTick+0x168>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	429a      	cmp	r2, r3
 800849e:	d3b8      	bcc.n	8008412 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084a0:	2301      	movs	r3, #1
 80084a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084a4:	e7b5      	b.n	8008412 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084a6:	4b17      	ldr	r3, [pc, #92]	; (8008504 <xTaskIncrementTick+0x168>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ac:	4914      	ldr	r1, [pc, #80]	; (8008500 <xTaskIncrementTick+0x164>)
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	440b      	add	r3, r1
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d907      	bls.n	80084ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	e004      	b.n	80084ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084c4:	4b10      	ldr	r3, [pc, #64]	; (8008508 <xTaskIncrementTick+0x16c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	4a0f      	ldr	r2, [pc, #60]	; (8008508 <xTaskIncrementTick+0x16c>)
 80084cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <xTaskIncrementTick+0x170>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80084d6:	2301      	movs	r3, #1
 80084d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084da:	697b      	ldr	r3, [r7, #20]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000dc8 	.word	0x20000dc8
 80084e8:	20000da4 	.word	0x20000da4
 80084ec:	20000d58 	.word	0x20000d58
 80084f0:	20000d5c 	.word	0x20000d5c
 80084f4:	20000db8 	.word	0x20000db8
 80084f8:	20000dc0 	.word	0x20000dc0
 80084fc:	20000da8 	.word	0x20000da8
 8008500:	200008d0 	.word	0x200008d0
 8008504:	200008cc 	.word	0x200008cc
 8008508:	20000db0 	.word	0x20000db0
 800850c:	20000db4 	.word	0x20000db4

08008510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008516:	4b28      	ldr	r3, [pc, #160]	; (80085b8 <vTaskSwitchContext+0xa8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800851e:	4b27      	ldr	r3, [pc, #156]	; (80085bc <vTaskSwitchContext+0xac>)
 8008520:	2201      	movs	r2, #1
 8008522:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008524:	e042      	b.n	80085ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008526:	4b25      	ldr	r3, [pc, #148]	; (80085bc <vTaskSwitchContext+0xac>)
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800852c:	4b24      	ldr	r3, [pc, #144]	; (80085c0 <vTaskSwitchContext+0xb0>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e011      	b.n	8008558 <vTaskSwitchContext+0x48>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10b      	bne.n	8008552 <vTaskSwitchContext+0x42>
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	b672      	cpsid	i
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	b662      	cpsie	i
 800854e:	607b      	str	r3, [r7, #4]
 8008550:	e7fe      	b.n	8008550 <vTaskSwitchContext+0x40>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3b01      	subs	r3, #1
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	491a      	ldr	r1, [pc, #104]	; (80085c4 <vTaskSwitchContext+0xb4>)
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0e3      	beq.n	8008534 <vTaskSwitchContext+0x24>
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4a13      	ldr	r2, [pc, #76]	; (80085c4 <vTaskSwitchContext+0xb4>)
 8008578:	4413      	add	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	605a      	str	r2, [r3, #4]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	3308      	adds	r3, #8
 800858e:	429a      	cmp	r2, r3
 8008590:	d104      	bne.n	800859c <vTaskSwitchContext+0x8c>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	4a09      	ldr	r2, [pc, #36]	; (80085c8 <vTaskSwitchContext+0xb8>)
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	4a06      	ldr	r2, [pc, #24]	; (80085c0 <vTaskSwitchContext+0xb0>)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6013      	str	r3, [r2, #0]
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	20000dc8 	.word	0x20000dc8
 80085bc:	20000db4 	.word	0x20000db4
 80085c0:	20000da8 	.word	0x20000da8
 80085c4:	200008d0 	.word	0x200008d0
 80085c8:	200008cc 	.word	0x200008cc

080085cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10b      	bne.n	80085f4 <vTaskPlaceOnEventList+0x28>
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	b672      	cpsid	i
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	b662      	cpsie	i
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e7fe      	b.n	80085f2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <vTaskPlaceOnEventList+0x48>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3318      	adds	r3, #24
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7fe fe00 	bl	8007202 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008602:	2101      	movs	r1, #1
 8008604:	6838      	ldr	r0, [r7, #0]
 8008606:	f000 fa7f 	bl	8008b08 <prvAddCurrentTaskToDelayedList>
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	200008cc 	.word	0x200008cc

08008618 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10b      	bne.n	8008642 <vTaskPlaceOnEventListRestricted+0x2a>
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	b672      	cpsid	i
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	b662      	cpsie	i
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	e7fe      	b.n	8008640 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <vTaskPlaceOnEventListRestricted+0x54>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3318      	adds	r3, #24
 8008648:	4619      	mov	r1, r3
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7fe fdb5 	bl	80071ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008656:	f04f 33ff 	mov.w	r3, #4294967295
 800865a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	68b8      	ldr	r0, [r7, #8]
 8008660:	f000 fa52 	bl	8008b08 <prvAddCurrentTaskToDelayedList>
	}
 8008664:	bf00      	nop
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200008cc 	.word	0x200008cc

08008670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10b      	bne.n	800869e <xTaskRemoveFromEventList+0x2e>
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	b672      	cpsid	i
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	b662      	cpsie	i
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	e7fe      	b.n	800869c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3318      	adds	r3, #24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fde6 	bl	8007274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086a8:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <xTaskRemoveFromEventList+0xb0>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11d      	bne.n	80086ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fe fddd 	bl	8007274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086be:	4b19      	ldr	r3, [pc, #100]	; (8008724 <xTaskRemoveFromEventList+0xb4>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d903      	bls.n	80086ce <xTaskRemoveFromEventList+0x5e>
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ca:	4a16      	ldr	r2, [pc, #88]	; (8008724 <xTaskRemoveFromEventList+0xb4>)
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4a13      	ldr	r2, [pc, #76]	; (8008728 <xTaskRemoveFromEventList+0xb8>)
 80086dc:	441a      	add	r2, r3
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4619      	mov	r1, r3
 80086e4:	4610      	mov	r0, r2
 80086e6:	f7fe fd68 	bl	80071ba <vListInsertEnd>
 80086ea:	e005      	b.n	80086f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3318      	adds	r3, #24
 80086f0:	4619      	mov	r1, r3
 80086f2:	480e      	ldr	r0, [pc, #56]	; (800872c <xTaskRemoveFromEventList+0xbc>)
 80086f4:	f7fe fd61 	bl	80071ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fc:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <xTaskRemoveFromEventList+0xc0>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	429a      	cmp	r2, r3
 8008704:	d905      	bls.n	8008712 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008706:	2301      	movs	r3, #1
 8008708:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800870a:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <xTaskRemoveFromEventList+0xc4>)
 800870c:	2201      	movs	r2, #1
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e001      	b.n	8008716 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008716:	697b      	ldr	r3, [r7, #20]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000dc8 	.word	0x20000dc8
 8008724:	20000da8 	.word	0x20000da8
 8008728:	200008d0 	.word	0x200008d0
 800872c:	20000d60 	.word	0x20000d60
 8008730:	200008cc 	.word	0x200008cc
 8008734:	20000db4 	.word	0x20000db4

08008738 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <vTaskInternalSetTimeOutState+0x24>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008748:	4b05      	ldr	r3, [pc, #20]	; (8008760 <vTaskInternalSetTimeOutState+0x28>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	605a      	str	r2, [r3, #4]
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	20000db8 	.word	0x20000db8
 8008760:	20000da4 	.word	0x20000da4

08008764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xTaskCheckForTimeOut+0x28>
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	b672      	cpsid	i
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	b662      	cpsie	i
 8008788:	613b      	str	r3, [r7, #16]
 800878a:	e7fe      	b.n	800878a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <xTaskCheckForTimeOut+0x46>
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	e7fe      	b.n	80087a8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80087aa:	f000 fe5d 	bl	8009468 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ae:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <xTaskCheckForTimeOut+0xc0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c6:	d102      	bne.n	80087ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	e023      	b.n	8008816 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	4b15      	ldr	r3, [pc, #84]	; (8008828 <xTaskCheckForTimeOut+0xc4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d007      	beq.n	80087ea <xTaskCheckForTimeOut+0x86>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d302      	bcc.n	80087ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087e4:	2301      	movs	r3, #1
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	e015      	b.n	8008816 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d20b      	bcs.n	800880c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff ff99 	bl	8008738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	61fb      	str	r3, [r7, #28]
 800880a:	e004      	b.n	8008816 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008812:	2301      	movs	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008816:	f000 fe59 	bl	80094cc <vPortExitCritical>

	return xReturn;
 800881a:	69fb      	ldr	r3, [r7, #28]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3720      	adds	r7, #32
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20000da4 	.word	0x20000da4
 8008828:	20000db8 	.word	0x20000db8

0800882c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008830:	4b03      	ldr	r3, [pc, #12]	; (8008840 <vTaskMissedYield+0x14>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]
}
 8008836:	bf00      	nop
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	20000db4 	.word	0x20000db4

08008844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800884c:	f000 f852 	bl	80088f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <prvIdleTask+0x28>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d9f9      	bls.n	800884c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <prvIdleTask+0x2c>)
 800885a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008868:	e7f0      	b.n	800884c <prvIdleTask+0x8>
 800886a:	bf00      	nop
 800886c:	200008d0 	.word	0x200008d0
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800887a:	2300      	movs	r3, #0
 800887c:	607b      	str	r3, [r7, #4]
 800887e:	e00c      	b.n	800889a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4a12      	ldr	r2, [pc, #72]	; (80088d4 <prvInitialiseTaskLists+0x60>)
 800888c:	4413      	add	r3, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fc66 	bl	8007160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3301      	adds	r3, #1
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b37      	cmp	r3, #55	; 0x37
 800889e:	d9ef      	bls.n	8008880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088a0:	480d      	ldr	r0, [pc, #52]	; (80088d8 <prvInitialiseTaskLists+0x64>)
 80088a2:	f7fe fc5d 	bl	8007160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088a6:	480d      	ldr	r0, [pc, #52]	; (80088dc <prvInitialiseTaskLists+0x68>)
 80088a8:	f7fe fc5a 	bl	8007160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088ac:	480c      	ldr	r0, [pc, #48]	; (80088e0 <prvInitialiseTaskLists+0x6c>)
 80088ae:	f7fe fc57 	bl	8007160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088b2:	480c      	ldr	r0, [pc, #48]	; (80088e4 <prvInitialiseTaskLists+0x70>)
 80088b4:	f7fe fc54 	bl	8007160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088b8:	480b      	ldr	r0, [pc, #44]	; (80088e8 <prvInitialiseTaskLists+0x74>)
 80088ba:	f7fe fc51 	bl	8007160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088be:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <prvInitialiseTaskLists+0x78>)
 80088c0:	4a05      	ldr	r2, [pc, #20]	; (80088d8 <prvInitialiseTaskLists+0x64>)
 80088c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <prvInitialiseTaskLists+0x7c>)
 80088c6:	4a05      	ldr	r2, [pc, #20]	; (80088dc <prvInitialiseTaskLists+0x68>)
 80088c8:	601a      	str	r2, [r3, #0]
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	200008d0 	.word	0x200008d0
 80088d8:	20000d30 	.word	0x20000d30
 80088dc:	20000d44 	.word	0x20000d44
 80088e0:	20000d60 	.word	0x20000d60
 80088e4:	20000d74 	.word	0x20000d74
 80088e8:	20000d8c 	.word	0x20000d8c
 80088ec:	20000d58 	.word	0x20000d58
 80088f0:	20000d5c 	.word	0x20000d5c

080088f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088fa:	e019      	b.n	8008930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088fc:	f000 fdb4 	bl	8009468 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <prvCheckTasksWaitingTermination+0x4c>)
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3304      	adds	r3, #4
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fcb1 	bl	8007274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <prvCheckTasksWaitingTermination+0x50>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3b01      	subs	r3, #1
 8008918:	4a0a      	ldr	r2, [pc, #40]	; (8008944 <prvCheckTasksWaitingTermination+0x50>)
 800891a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <prvCheckTasksWaitingTermination+0x54>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3b01      	subs	r3, #1
 8008922:	4a09      	ldr	r2, [pc, #36]	; (8008948 <prvCheckTasksWaitingTermination+0x54>)
 8008924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008926:	f000 fdd1 	bl	80094cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f80e 	bl	800894c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <prvCheckTasksWaitingTermination+0x54>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e1      	bne.n	80088fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	20000d74 	.word	0x20000d74
 8008944:	20000da0 	.word	0x20000da0
 8008948:	20000d88 	.word	0x20000d88

0800894c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800895a:	2b00      	cmp	r3, #0
 800895c:	d108      	bne.n	8008970 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	4618      	mov	r0, r3
 8008964:	f000 ff6a 	bl	800983c <vPortFree>
				vPortFree( pxTCB );
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 ff67 	bl	800983c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800896e:	e019      	b.n	80089a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008976:	2b01      	cmp	r3, #1
 8008978:	d103      	bne.n	8008982 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 ff5e 	bl	800983c <vPortFree>
	}
 8008980:	e010      	b.n	80089a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008988:	2b02      	cmp	r3, #2
 800898a:	d00b      	beq.n	80089a4 <prvDeleteTCB+0x58>
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	b672      	cpsid	i
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	b662      	cpsie	i
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e7fe      	b.n	80089a2 <prvDeleteTCB+0x56>
	}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089b2:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <prvResetNextTaskUnblockTime+0x38>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d104      	bne.n	80089c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <prvResetNextTaskUnblockTime+0x3c>)
 80089be:	f04f 32ff 	mov.w	r2, #4294967295
 80089c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089c4:	e008      	b.n	80089d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c6:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <prvResetNextTaskUnblockTime+0x38>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	4a04      	ldr	r2, [pc, #16]	; (80089e8 <prvResetNextTaskUnblockTime+0x3c>)
 80089d6:	6013      	str	r3, [r2, #0]
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	20000d58 	.word	0x20000d58
 80089e8:	20000dc0 	.word	0x20000dc0

080089ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089f2:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <xTaskGetSchedulerState+0x34>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089fa:	2301      	movs	r3, #1
 80089fc:	607b      	str	r3, [r7, #4]
 80089fe:	e008      	b.n	8008a12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a00:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <xTaskGetSchedulerState+0x38>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d102      	bne.n	8008a0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a08:	2302      	movs	r3, #2
 8008a0a:	607b      	str	r3, [r7, #4]
 8008a0c:	e001      	b.n	8008a12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a12:	687b      	ldr	r3, [r7, #4]
	}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	20000dac 	.word	0x20000dac
 8008a24:	20000dc8 	.word	0x20000dc8

08008a28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d058      	beq.n	8008af0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a3e:	4b2f      	ldr	r3, [pc, #188]	; (8008afc <xTaskPriorityDisinherit+0xd4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d00b      	beq.n	8008a60 <xTaskPriorityDisinherit+0x38>
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	b672      	cpsid	i
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	b662      	cpsie	i
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	e7fe      	b.n	8008a5e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10b      	bne.n	8008a80 <xTaskPriorityDisinherit+0x58>
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	b672      	cpsid	i
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	b662      	cpsie	i
 8008a7c:	60bb      	str	r3, [r7, #8]
 8008a7e:	e7fe      	b.n	8008a7e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a84:	1e5a      	subs	r2, r3, #1
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d02c      	beq.n	8008af0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d128      	bne.n	8008af0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fbe6 	bl	8007274 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	4b0f      	ldr	r3, [pc, #60]	; (8008b00 <xTaskPriorityDisinherit+0xd8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d903      	bls.n	8008ad0 <xTaskPriorityDisinherit+0xa8>
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a0c      	ldr	r2, [pc, #48]	; (8008b00 <xTaskPriorityDisinherit+0xd8>)
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4a09      	ldr	r2, [pc, #36]	; (8008b04 <xTaskPriorityDisinherit+0xdc>)
 8008ade:	441a      	add	r2, r3
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fe fb67 	bl	80071ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008aec:	2301      	movs	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008af0:	697b      	ldr	r3, [r7, #20]
	}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200008cc 	.word	0x200008cc
 8008b00:	20000da8 	.word	0x20000da8
 8008b04:	200008d0 	.word	0x200008d0

08008b08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b12:	4b21      	ldr	r3, [pc, #132]	; (8008b98 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b18:	4b20      	ldr	r3, [pc, #128]	; (8008b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fba8 	bl	8007274 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2a:	d10a      	bne.n	8008b42 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d007      	beq.n	8008b42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b32:	4b1a      	ldr	r3, [pc, #104]	; (8008b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3304      	adds	r3, #4
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4819      	ldr	r0, [pc, #100]	; (8008ba0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b3c:	f7fe fb3d 	bl	80071ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b40:	e026      	b.n	8008b90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4413      	add	r3, r2
 8008b48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b4a:	4b14      	ldr	r3, [pc, #80]	; (8008b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d209      	bcs.n	8008b6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b5a:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f7fe fb4b 	bl	8007202 <vListInsert>
}
 8008b6c:	e010      	b.n	8008b90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f7fe fb41 	bl	8007202 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d202      	bcs.n	8008b90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b8a:	4a08      	ldr	r2, [pc, #32]	; (8008bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6013      	str	r3, [r2, #0]
}
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	20000da4 	.word	0x20000da4
 8008b9c:	200008cc 	.word	0x200008cc
 8008ba0:	20000d8c 	.word	0x20000d8c
 8008ba4:	20000d5c 	.word	0x20000d5c
 8008ba8:	20000d58 	.word	0x20000d58
 8008bac:	20000dc0 	.word	0x20000dc0

08008bb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	; 0x28
 8008bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bba:	f000 fb0d 	bl	80091d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bbe:	4b1d      	ldr	r3, [pc, #116]	; (8008c34 <xTimerCreateTimerTask+0x84>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d021      	beq.n	8008c0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bce:	1d3a      	adds	r2, r7, #4
 8008bd0:	f107 0108 	add.w	r1, r7, #8
 8008bd4:	f107 030c 	add.w	r3, r7, #12
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe faa7 	bl	800712c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	9202      	str	r2, [sp, #8]
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	2302      	movs	r3, #2
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	2300      	movs	r3, #0
 8008bee:	460a      	mov	r2, r1
 8008bf0:	4911      	ldr	r1, [pc, #68]	; (8008c38 <xTimerCreateTimerTask+0x88>)
 8008bf2:	4812      	ldr	r0, [pc, #72]	; (8008c3c <xTimerCreateTimerTask+0x8c>)
 8008bf4:	f7ff f85e 	bl	8007cb4 <xTaskCreateStatic>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <xTimerCreateTimerTask+0x90>)
 8008bfc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008bfe:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <xTimerCreateTimerTask+0x90>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c06:	2301      	movs	r3, #1
 8008c08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10b      	bne.n	8008c28 <xTimerCreateTimerTask+0x78>
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	b672      	cpsid	i
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	b662      	cpsie	i
 8008c24:	613b      	str	r3, [r7, #16]
 8008c26:	e7fe      	b.n	8008c26 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8008c28:	697b      	ldr	r3, [r7, #20]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000dfc 	.word	0x20000dfc
 8008c38:	0800c5e8 	.word	0x0800c5e8
 8008c3c:	08008d7d 	.word	0x08008d7d
 8008c40:	20000e00 	.word	0x20000e00

08008c44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08a      	sub	sp, #40	; 0x28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10b      	bne.n	8008c74 <xTimerGenericCommand+0x30>
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	b672      	cpsid	i
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	b662      	cpsie	i
 8008c70:	623b      	str	r3, [r7, #32]
 8008c72:	e7fe      	b.n	8008c72 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c74:	4b19      	ldr	r3, [pc, #100]	; (8008cdc <xTimerGenericCommand+0x98>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d02a      	beq.n	8008cd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	dc18      	bgt.n	8008cc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c8e:	f7ff fead 	bl	80089ec <xTaskGetSchedulerState>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d109      	bne.n	8008cac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c98:	4b10      	ldr	r3, [pc, #64]	; (8008cdc <xTimerGenericCommand+0x98>)
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	f107 0110 	add.w	r1, r7, #16
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca4:	f7fe fc1a 	bl	80074dc <xQueueGenericSend>
 8008ca8:	6278      	str	r0, [r7, #36]	; 0x24
 8008caa:	e012      	b.n	8008cd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cac:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <xTimerGenericCommand+0x98>)
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	f107 0110 	add.w	r1, r7, #16
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f7fe fc10 	bl	80074dc <xQueueGenericSend>
 8008cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8008cbe:	e008      	b.n	8008cd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <xTimerGenericCommand+0x98>)
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	f107 0110 	add.w	r1, r7, #16
 8008cc8:	2300      	movs	r3, #0
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	f7fe fd08 	bl	80076e0 <xQueueGenericSendFromISR>
 8008cd0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3728      	adds	r7, #40	; 0x28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20000dfc 	.word	0x20000dfc

08008ce0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cea:	4b23      	ldr	r3, [pc, #140]	; (8008d78 <prvProcessExpiredTimer+0x98>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fabb 	bl	8007274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d023      	beq.n	8008d54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	699a      	ldr	r2, [r3, #24]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	18d1      	adds	r1, r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	6978      	ldr	r0, [r7, #20]
 8008d1a:	f000 f8d3 	bl	8008ec4 <prvInsertTimerInActiveList>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d020      	beq.n	8008d66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d24:	2300      	movs	r3, #0
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	6978      	ldr	r0, [r7, #20]
 8008d30:	f7ff ff88 	bl	8008c44 <xTimerGenericCommand>
 8008d34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d114      	bne.n	8008d66 <prvProcessExpiredTimer+0x86>
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	b672      	cpsid	i
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	b662      	cpsie	i
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e7fe      	b.n	8008d52 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d5a:	f023 0301 	bic.w	r3, r3, #1
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	6978      	ldr	r0, [r7, #20]
 8008d6c:	4798      	blx	r3
}
 8008d6e:	bf00      	nop
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20000df4 	.word	0x20000df4

08008d7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d84:	f107 0308 	add.w	r3, r7, #8
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 f857 	bl	8008e3c <prvGetNextExpireTime>
 8008d8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4619      	mov	r1, r3
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f803 	bl	8008da0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d9a:	f000 f8d5 	bl	8008f48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d9e:	e7f1      	b.n	8008d84 <prvTimerTask+0x8>

08008da0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008daa:	f7ff fa3b 	bl	8008224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f866 	bl	8008e84 <prvSampleTimeNow>
 8008db8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d130      	bne.n	8008e22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10a      	bne.n	8008ddc <prvProcessTimerOrBlockTask+0x3c>
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d806      	bhi.n	8008ddc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008dce:	f7ff fa37 	bl	8008240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff ff83 	bl	8008ce0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dda:	e024      	b.n	8008e26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d008      	beq.n	8008df4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008de2:	4b13      	ldr	r3, [pc, #76]	; (8008e30 <prvProcessTimerOrBlockTask+0x90>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <prvProcessTimerOrBlockTask+0x50>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e000      	b.n	8008df2 <prvProcessTimerOrBlockTask+0x52>
 8008df0:	2300      	movs	r3, #0
 8008df2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <prvProcessTimerOrBlockTask+0x94>)
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	4619      	mov	r1, r3
 8008e02:	f7fe ff23 	bl	8007c4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e06:	f7ff fa1b 	bl	8008240 <xTaskResumeAll>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <prvProcessTimerOrBlockTask+0x98>)
 8008e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	f3bf 8f6f 	isb	sy
}
 8008e20:	e001      	b.n	8008e26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e22:	f7ff fa0d 	bl	8008240 <xTaskResumeAll>
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000df8 	.word	0x20000df8
 8008e34:	20000dfc 	.word	0x20000dfc
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <prvGetNextExpireTime+0x44>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <prvGetNextExpireTime+0x16>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	e000      	b.n	8008e54 <prvGetNextExpireTime+0x18>
 8008e52:	2200      	movs	r2, #0
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d105      	bne.n	8008e6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <prvGetNextExpireTime+0x44>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e001      	b.n	8008e70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e70:	68fb      	ldr	r3, [r7, #12]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000df4 	.word	0x20000df4

08008e84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e8c:	f7ff fa76 	bl	800837c <xTaskGetTickCount>
 8008e90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e92:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <prvSampleTimeNow+0x3c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d205      	bcs.n	8008ea8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e9c:	f000 f936 	bl	800910c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e002      	b.n	8008eae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008eae:	4a04      	ldr	r2, [pc, #16]	; (8008ec0 <prvSampleTimeNow+0x3c>)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20000e04 	.word	0x20000e04

08008ec4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d812      	bhi.n	8008f10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d302      	bcc.n	8008efe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	e01b      	b.n	8008f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <prvInsertTimerInActiveList+0x7c>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7fe f97a 	bl	8007202 <vListInsert>
 8008f0e:	e012      	b.n	8008f36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d206      	bcs.n	8008f26 <prvInsertTimerInActiveList+0x62>
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d302      	bcc.n	8008f26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f20:	2301      	movs	r3, #1
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e007      	b.n	8008f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f26:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <prvInsertTimerInActiveList+0x80>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4610      	mov	r0, r2
 8008f32:	f7fe f966 	bl	8007202 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f36:	697b      	ldr	r3, [r7, #20]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20000df8 	.word	0x20000df8
 8008f44:	20000df4 	.word	0x20000df4

08008f48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08e      	sub	sp, #56	; 0x38
 8008f4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f4e:	e0cc      	b.n	80090ea <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da19      	bge.n	8008f8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f56:	1d3b      	adds	r3, r7, #4
 8008f58:	3304      	adds	r3, #4
 8008f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10b      	bne.n	8008f7a <prvProcessReceivedCommands+0x32>
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	b672      	cpsid	i
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	b662      	cpsie	i
 8008f76:	61fb      	str	r3, [r7, #28]
 8008f78:	e7fe      	b.n	8008f78 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f80:	6850      	ldr	r0, [r2, #4]
 8008f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f84:	6892      	ldr	r2, [r2, #8]
 8008f86:	4611      	mov	r1, r2
 8008f88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f2c0 80ab 	blt.w	80090e8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d004      	beq.n	8008fa8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe f966 	bl	8007274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fa8:	463b      	mov	r3, r7
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff ff6a 	bl	8008e84 <prvSampleTimeNow>
 8008fb0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b09      	cmp	r3, #9
 8008fb6:	f200 8098 	bhi.w	80090ea <prvProcessReceivedCommands+0x1a2>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <prvProcessReceivedCommands+0x78>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fe9 	.word	0x08008fe9
 8008fc4:	08008fe9 	.word	0x08008fe9
 8008fc8:	08008fe9 	.word	0x08008fe9
 8008fcc:	0800905f 	.word	0x0800905f
 8008fd0:	08009073 	.word	0x08009073
 8008fd4:	080090bf 	.word	0x080090bf
 8008fd8:	08008fe9 	.word	0x08008fe9
 8008fdc:	08008fe9 	.word	0x08008fe9
 8008fe0:	0800905f 	.word	0x0800905f
 8008fe4:	08009073 	.word	0x08009073
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	18d1      	adds	r1, r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009008:	f7ff ff5c 	bl	8008ec4 <prvInsertTimerInActiveList>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d06b      	beq.n	80090ea <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009018:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d060      	beq.n	80090ea <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	441a      	add	r2, r3
 8009030:	2300      	movs	r3, #0
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	2300      	movs	r3, #0
 8009036:	2100      	movs	r1, #0
 8009038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800903a:	f7ff fe03 	bl	8008c44 <xTimerGenericCommand>
 800903e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d151      	bne.n	80090ea <prvProcessReceivedCommands+0x1a2>
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	b672      	cpsid	i
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	b662      	cpsie	i
 800905a:	61bb      	str	r3, [r7, #24]
 800905c:	e7fe      	b.n	800905c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009064:	f023 0301 	bic.w	r3, r3, #1
 8009068:	b2da      	uxtb	r2, r3
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009070:	e03b      	b.n	80090ea <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009078:	f043 0301 	orr.w	r3, r3, #1
 800907c:	b2da      	uxtb	r2, r3
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10b      	bne.n	80090aa <prvProcessReceivedCommands+0x162>
 8009092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009096:	b672      	cpsid	i
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	b662      	cpsie	i
 80090a6:	617b      	str	r3, [r7, #20]
 80090a8:	e7fe      	b.n	80090a8 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ac:	699a      	ldr	r2, [r3, #24]
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	18d1      	adds	r1, r2, r3
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b8:	f7ff ff04 	bl	8008ec4 <prvInsertTimerInActiveList>
					break;
 80090bc:	e015      	b.n	80090ea <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d103      	bne.n	80090d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80090cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ce:	f000 fbb5 	bl	800983c <vPortFree>
 80090d2:	e00a      	b.n	80090ea <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80090e6:	e000      	b.n	80090ea <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80090e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090ea:	4b07      	ldr	r3, [pc, #28]	; (8009108 <prvProcessReceivedCommands+0x1c0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	1d39      	adds	r1, r7, #4
 80090f0:	2200      	movs	r2, #0
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fb90 	bl	8007818 <xQueueReceive>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f47f af28 	bne.w	8008f50 <prvProcessReceivedCommands+0x8>
	}
}
 8009100:	bf00      	nop
 8009102:	3730      	adds	r7, #48	; 0x30
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20000dfc 	.word	0x20000dfc

0800910c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009112:	e049      	b.n	80091a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009114:	4b2e      	ldr	r3, [pc, #184]	; (80091d0 <prvSwitchTimerLists+0xc4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911e:	4b2c      	ldr	r3, [pc, #176]	; (80091d0 <prvSwitchTimerLists+0xc4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3304      	adds	r3, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe f8a1 	bl	8007274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d02f      	beq.n	80091a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	4413      	add	r3, r2
 8009150:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	429a      	cmp	r2, r3
 8009158:	d90e      	bls.n	8009178 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009166:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <prvSwitchTimerLists+0xc4>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3304      	adds	r3, #4
 800916e:	4619      	mov	r1, r3
 8009170:	4610      	mov	r0, r2
 8009172:	f7fe f846 	bl	8007202 <vListInsert>
 8009176:	e017      	b.n	80091a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009178:	2300      	movs	r3, #0
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	2300      	movs	r3, #0
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	2100      	movs	r1, #0
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff fd5e 	bl	8008c44 <xTimerGenericCommand>
 8009188:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10b      	bne.n	80091a8 <prvSwitchTimerLists+0x9c>
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	b672      	cpsid	i
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	b662      	cpsie	i
 80091a4:	603b      	str	r3, [r7, #0]
 80091a6:	e7fe      	b.n	80091a6 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091a8:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <prvSwitchTimerLists+0xc4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1b0      	bne.n	8009114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091b2:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <prvSwitchTimerLists+0xc4>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091b8:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <prvSwitchTimerLists+0xc8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a04      	ldr	r2, [pc, #16]	; (80091d0 <prvSwitchTimerLists+0xc4>)
 80091be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091c0:	4a04      	ldr	r2, [pc, #16]	; (80091d4 <prvSwitchTimerLists+0xc8>)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	6013      	str	r3, [r2, #0]
}
 80091c6:	bf00      	nop
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20000df4 	.word	0x20000df4
 80091d4:	20000df8 	.word	0x20000df8

080091d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091de:	f000 f943 	bl	8009468 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091e2:	4b15      	ldr	r3, [pc, #84]	; (8009238 <prvCheckForValidListAndQueue+0x60>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d120      	bne.n	800922c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091ea:	4814      	ldr	r0, [pc, #80]	; (800923c <prvCheckForValidListAndQueue+0x64>)
 80091ec:	f7fd ffb8 	bl	8007160 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091f0:	4813      	ldr	r0, [pc, #76]	; (8009240 <prvCheckForValidListAndQueue+0x68>)
 80091f2:	f7fd ffb5 	bl	8007160 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091f6:	4b13      	ldr	r3, [pc, #76]	; (8009244 <prvCheckForValidListAndQueue+0x6c>)
 80091f8:	4a10      	ldr	r2, [pc, #64]	; (800923c <prvCheckForValidListAndQueue+0x64>)
 80091fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091fc:	4b12      	ldr	r3, [pc, #72]	; (8009248 <prvCheckForValidListAndQueue+0x70>)
 80091fe:	4a10      	ldr	r2, [pc, #64]	; (8009240 <prvCheckForValidListAndQueue+0x68>)
 8009200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009202:	2300      	movs	r3, #0
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	4b11      	ldr	r3, [pc, #68]	; (800924c <prvCheckForValidListAndQueue+0x74>)
 8009208:	4a11      	ldr	r2, [pc, #68]	; (8009250 <prvCheckForValidListAndQueue+0x78>)
 800920a:	2110      	movs	r1, #16
 800920c:	200a      	movs	r0, #10
 800920e:	f7fe f8c5 	bl	800739c <xQueueGenericCreateStatic>
 8009212:	4602      	mov	r2, r0
 8009214:	4b08      	ldr	r3, [pc, #32]	; (8009238 <prvCheckForValidListAndQueue+0x60>)
 8009216:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009218:	4b07      	ldr	r3, [pc, #28]	; (8009238 <prvCheckForValidListAndQueue+0x60>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <prvCheckForValidListAndQueue+0x60>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	490b      	ldr	r1, [pc, #44]	; (8009254 <prvCheckForValidListAndQueue+0x7c>)
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe fce8 	bl	8007bfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800922c:	f000 f94e 	bl	80094cc <vPortExitCritical>
}
 8009230:	bf00      	nop
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000dfc 	.word	0x20000dfc
 800923c:	20000dcc 	.word	0x20000dcc
 8009240:	20000de0 	.word	0x20000de0
 8009244:	20000df4 	.word	0x20000df4
 8009248:	20000df8 	.word	0x20000df8
 800924c:	20000ea8 	.word	0x20000ea8
 8009250:	20000e08 	.word	0x20000e08
 8009254:	0800c5f0 	.word	0x0800c5f0

08009258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3b04      	subs	r3, #4
 8009268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3b04      	subs	r3, #4
 8009276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f023 0201 	bic.w	r2, r3, #1
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3b04      	subs	r3, #4
 8009286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009288:	4a0c      	ldr	r2, [pc, #48]	; (80092bc <pxPortInitialiseStack+0x64>)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3b14      	subs	r3, #20
 8009292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	3b04      	subs	r3, #4
 800929e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f06f 0202 	mvn.w	r2, #2
 80092a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3b20      	subs	r3, #32
 80092ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092ae:	68fb      	ldr	r3, [r7, #12]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	080092c1 	.word	0x080092c1

080092c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092ca:	4b13      	ldr	r3, [pc, #76]	; (8009318 <prvTaskExitError+0x58>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d00b      	beq.n	80092ec <prvTaskExitError+0x2c>
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	b672      	cpsid	i
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	b662      	cpsie	i
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	e7fe      	b.n	80092ea <prvTaskExitError+0x2a>
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	b672      	cpsid	i
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	b662      	cpsie	i
 8009300:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009302:	bf00      	nop
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0fc      	beq.n	8009304 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	2000000c 	.word	0x2000000c
 800931c:	00000000 	.word	0x00000000

08009320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <pxCurrentTCBConst2>)
 8009322:	6819      	ldr	r1, [r3, #0]
 8009324:	6808      	ldr	r0, [r1, #0]
 8009326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932a:	f380 8809 	msr	PSP, r0
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f04f 0000 	mov.w	r0, #0
 8009336:	f380 8811 	msr	BASEPRI, r0
 800933a:	4770      	bx	lr
 800933c:	f3af 8000 	nop.w

08009340 <pxCurrentTCBConst2>:
 8009340:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop

08009348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009348:	4808      	ldr	r0, [pc, #32]	; (800936c <prvPortStartFirstTask+0x24>)
 800934a:	6800      	ldr	r0, [r0, #0]
 800934c:	6800      	ldr	r0, [r0, #0]
 800934e:	f380 8808 	msr	MSP, r0
 8009352:	f04f 0000 	mov.w	r0, #0
 8009356:	f380 8814 	msr	CONTROL, r0
 800935a:	b662      	cpsie	i
 800935c:	b661      	cpsie	f
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	df00      	svc	0
 8009368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800936a:	bf00      	nop
 800936c:	e000ed08 	.word	0xe000ed08

08009370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009376:	4b36      	ldr	r3, [pc, #216]	; (8009450 <xPortStartScheduler+0xe0>)
 8009378:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	22ff      	movs	r2, #255	; 0xff
 8009386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009398:	b2da      	uxtb	r2, r3
 800939a:	4b2e      	ldr	r3, [pc, #184]	; (8009454 <xPortStartScheduler+0xe4>)
 800939c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800939e:	4b2e      	ldr	r3, [pc, #184]	; (8009458 <xPortStartScheduler+0xe8>)
 80093a0:	2207      	movs	r2, #7
 80093a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093a4:	e009      	b.n	80093ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093a6:	4b2c      	ldr	r3, [pc, #176]	; (8009458 <xPortStartScheduler+0xe8>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	4a2a      	ldr	r2, [pc, #168]	; (8009458 <xPortStartScheduler+0xe8>)
 80093ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d0ef      	beq.n	80093a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093c6:	4b24      	ldr	r3, [pc, #144]	; (8009458 <xPortStartScheduler+0xe8>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f1c3 0307 	rsb	r3, r3, #7
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d00b      	beq.n	80093ea <xPortStartScheduler+0x7a>
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	b672      	cpsid	i
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	b662      	cpsie	i
 80093e6:	60bb      	str	r3, [r7, #8]
 80093e8:	e7fe      	b.n	80093e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093ea:	4b1b      	ldr	r3, [pc, #108]	; (8009458 <xPortStartScheduler+0xe8>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	4a19      	ldr	r2, [pc, #100]	; (8009458 <xPortStartScheduler+0xe8>)
 80093f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093f4:	4b18      	ldr	r3, [pc, #96]	; (8009458 <xPortStartScheduler+0xe8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093fc:	4a16      	ldr	r2, [pc, #88]	; (8009458 <xPortStartScheduler+0xe8>)
 80093fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	b2da      	uxtb	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009408:	4b14      	ldr	r3, [pc, #80]	; (800945c <xPortStartScheduler+0xec>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a13      	ldr	r2, [pc, #76]	; (800945c <xPortStartScheduler+0xec>)
 800940e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009412:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009414:	4b11      	ldr	r3, [pc, #68]	; (800945c <xPortStartScheduler+0xec>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a10      	ldr	r2, [pc, #64]	; (800945c <xPortStartScheduler+0xec>)
 800941a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800941e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009420:	f000 f8d4 	bl	80095cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <xPortStartScheduler+0xf0>)
 8009426:	2200      	movs	r2, #0
 8009428:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800942a:	f000 f8f3 	bl	8009614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <xPortStartScheduler+0xf4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a0c      	ldr	r2, [pc, #48]	; (8009464 <xPortStartScheduler+0xf4>)
 8009434:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009438:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800943a:	f7ff ff85 	bl	8009348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800943e:	f7ff f867 	bl	8008510 <vTaskSwitchContext>
	prvTaskExitError();
 8009442:	f7ff ff3d 	bl	80092c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	e000e400 	.word	0xe000e400
 8009454:	20000ef8 	.word	0x20000ef8
 8009458:	20000efc 	.word	0x20000efc
 800945c:	e000ed20 	.word	0xe000ed20
 8009460:	2000000c 	.word	0x2000000c
 8009464:	e000ef34 	.word	0xe000ef34

08009468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	b672      	cpsid	i
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	b662      	cpsie	i
 8009482:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009484:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <vPortEnterCritical+0x5c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	4a0e      	ldr	r2, [pc, #56]	; (80094c4 <vPortEnterCritical+0x5c>)
 800948c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800948e:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <vPortEnterCritical+0x5c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d110      	bne.n	80094b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009496:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <vPortEnterCritical+0x60>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <vPortEnterCritical+0x50>
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	b672      	cpsid	i
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	b662      	cpsie	i
 80094b4:	603b      	str	r3, [r7, #0]
 80094b6:	e7fe      	b.n	80094b6 <vPortEnterCritical+0x4e>
	}
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	2000000c 	.word	0x2000000c
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094d2:	4b12      	ldr	r3, [pc, #72]	; (800951c <vPortExitCritical+0x50>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10b      	bne.n	80094f2 <vPortExitCritical+0x26>
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	b672      	cpsid	i
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	b662      	cpsie	i
 80094ee:	607b      	str	r3, [r7, #4]
 80094f0:	e7fe      	b.n	80094f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80094f2:	4b0a      	ldr	r3, [pc, #40]	; (800951c <vPortExitCritical+0x50>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	4a08      	ldr	r2, [pc, #32]	; (800951c <vPortExitCritical+0x50>)
 80094fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094fc:	4b07      	ldr	r3, [pc, #28]	; (800951c <vPortExitCritical+0x50>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d104      	bne.n	800950e <vPortExitCritical+0x42>
 8009504:	2300      	movs	r3, #0
 8009506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	2000000c 	.word	0x2000000c

08009520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009520:	f3ef 8009 	mrs	r0, PSP
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	4b15      	ldr	r3, [pc, #84]	; (8009580 <pxCurrentTCBConst>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	f01e 0f10 	tst.w	lr, #16
 8009530:	bf08      	it	eq
 8009532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953a:	6010      	str	r0, [r2, #0]
 800953c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009544:	b672      	cpsid	i
 8009546:	f380 8811 	msr	BASEPRI, r0
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	b662      	cpsie	i
 8009554:	f7fe ffdc 	bl	8008510 <vTaskSwitchContext>
 8009558:	f04f 0000 	mov.w	r0, #0
 800955c:	f380 8811 	msr	BASEPRI, r0
 8009560:	bc09      	pop	{r0, r3}
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	6808      	ldr	r0, [r1, #0]
 8009566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	f01e 0f10 	tst.w	lr, #16
 800956e:	bf08      	it	eq
 8009570:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009574:	f380 8809 	msr	PSP, r0
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop

08009580 <pxCurrentTCBConst>:
 8009580:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop

08009588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	b672      	cpsid	i
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	b662      	cpsie	i
 80095a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095a4:	f7fe fefa 	bl	800839c <xTaskIncrementTick>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095ae:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <SysTick_Handler+0x40>)
 80095b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	2300      	movs	r3, #0
 80095b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	e000ed04 	.word	0xe000ed04

080095cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <vPortSetupTimerInterrupt+0x34>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095d6:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <vPortSetupTimerInterrupt+0x38>)
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095dc:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <vPortSetupTimerInterrupt+0x3c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a0a      	ldr	r2, [pc, #40]	; (800960c <vPortSetupTimerInterrupt+0x40>)
 80095e2:	fba2 2303 	umull	r2, r3, r2, r3
 80095e6:	099b      	lsrs	r3, r3, #6
 80095e8:	4a09      	ldr	r2, [pc, #36]	; (8009610 <vPortSetupTimerInterrupt+0x44>)
 80095ea:	3b01      	subs	r3, #1
 80095ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ee:	4b04      	ldr	r3, [pc, #16]	; (8009600 <vPortSetupTimerInterrupt+0x34>)
 80095f0:	2207      	movs	r2, #7
 80095f2:	601a      	str	r2, [r3, #0]
}
 80095f4:	bf00      	nop
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	e000e010 	.word	0xe000e010
 8009604:	e000e018 	.word	0xe000e018
 8009608:	20000000 	.word	0x20000000
 800960c:	10624dd3 	.word	0x10624dd3
 8009610:	e000e014 	.word	0xe000e014

08009614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009624 <vPortEnableVFP+0x10>
 8009618:	6801      	ldr	r1, [r0, #0]
 800961a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800961e:	6001      	str	r1, [r0, #0]
 8009620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009622:	bf00      	nop
 8009624:	e000ed88 	.word	0xe000ed88

08009628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800962e:	f3ef 8305 	mrs	r3, IPSR
 8009632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b0f      	cmp	r3, #15
 8009638:	d915      	bls.n	8009666 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800963a:	4a18      	ldr	r2, [pc, #96]	; (800969c <vPortValidateInterruptPriority+0x74>)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009644:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <vPortValidateInterruptPriority+0x78>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	7afa      	ldrb	r2, [r7, #11]
 800964a:	429a      	cmp	r2, r3
 800964c:	d20b      	bcs.n	8009666 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	b672      	cpsid	i
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	b662      	cpsie	i
 8009662:	607b      	str	r3, [r7, #4]
 8009664:	e7fe      	b.n	8009664 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <vPortValidateInterruptPriority+0x7c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800966e:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <vPortValidateInterruptPriority+0x80>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d90b      	bls.n	800968e <vPortValidateInterruptPriority+0x66>
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	b672      	cpsid	i
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	b662      	cpsie	i
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	e7fe      	b.n	800968c <vPortValidateInterruptPriority+0x64>
	}
 800968e:	bf00      	nop
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	e000e3f0 	.word	0xe000e3f0
 80096a0:	20000ef8 	.word	0x20000ef8
 80096a4:	e000ed0c 	.word	0xe000ed0c
 80096a8:	20000efc 	.word	0x20000efc

080096ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	; 0x28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096b4:	2300      	movs	r3, #0
 80096b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096b8:	f7fe fdb4 	bl	8008224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096bc:	4b5a      	ldr	r3, [pc, #360]	; (8009828 <pvPortMalloc+0x17c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096c4:	f000 f916 	bl	80098f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096c8:	4b58      	ldr	r3, [pc, #352]	; (800982c <pvPortMalloc+0x180>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4013      	ands	r3, r2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f040 8090 	bne.w	80097f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01e      	beq.n	800971a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80096dc:	2208      	movs	r2, #8
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4413      	add	r3, r2
 80096e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f003 0307 	and.w	r3, r3, #7
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d015      	beq.n	800971a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f023 0307 	bic.w	r3, r3, #7
 80096f4:	3308      	adds	r3, #8
 80096f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00b      	beq.n	800971a <pvPortMalloc+0x6e>
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	b672      	cpsid	i
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	b662      	cpsie	i
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	e7fe      	b.n	8009718 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d06a      	beq.n	80097f6 <pvPortMalloc+0x14a>
 8009720:	4b43      	ldr	r3, [pc, #268]	; (8009830 <pvPortMalloc+0x184>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	429a      	cmp	r2, r3
 8009728:	d865      	bhi.n	80097f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800972a:	4b42      	ldr	r3, [pc, #264]	; (8009834 <pvPortMalloc+0x188>)
 800972c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800972e:	4b41      	ldr	r3, [pc, #260]	; (8009834 <pvPortMalloc+0x188>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009734:	e004      	b.n	8009740 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	429a      	cmp	r2, r3
 8009748:	d903      	bls.n	8009752 <pvPortMalloc+0xa6>
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1f1      	bne.n	8009736 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009752:	4b35      	ldr	r3, [pc, #212]	; (8009828 <pvPortMalloc+0x17c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009758:	429a      	cmp	r2, r3
 800975a:	d04c      	beq.n	80097f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2208      	movs	r2, #8
 8009762:	4413      	add	r3, r2
 8009764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	1ad2      	subs	r2, r2, r3
 8009776:	2308      	movs	r3, #8
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	429a      	cmp	r2, r3
 800977c:	d920      	bls.n	80097c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800977e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4413      	add	r3, r2
 8009784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <pvPortMalloc+0xfc>
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	b672      	cpsid	i
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	b662      	cpsie	i
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	e7fe      	b.n	80097a6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097ba:	69b8      	ldr	r0, [r7, #24]
 80097bc:	f000 f8fc 	bl	80099b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097c0:	4b1b      	ldr	r3, [pc, #108]	; (8009830 <pvPortMalloc+0x184>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	4a19      	ldr	r2, [pc, #100]	; (8009830 <pvPortMalloc+0x184>)
 80097cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097ce:	4b18      	ldr	r3, [pc, #96]	; (8009830 <pvPortMalloc+0x184>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b19      	ldr	r3, [pc, #100]	; (8009838 <pvPortMalloc+0x18c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d203      	bcs.n	80097e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097da:	4b15      	ldr	r3, [pc, #84]	; (8009830 <pvPortMalloc+0x184>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a16      	ldr	r2, [pc, #88]	; (8009838 <pvPortMalloc+0x18c>)
 80097e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	4b11      	ldr	r3, [pc, #68]	; (800982c <pvPortMalloc+0x180>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	431a      	orrs	r2, r3
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097f6:	f7fe fd23 	bl	8008240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	f003 0307 	and.w	r3, r3, #7
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <pvPortMalloc+0x170>
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	b672      	cpsid	i
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	b662      	cpsie	i
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	e7fe      	b.n	800981a <pvPortMalloc+0x16e>
	return pvReturn;
 800981c:	69fb      	ldr	r3, [r7, #28]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3728      	adds	r7, #40	; 0x28
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20004b08 	.word	0x20004b08
 800982c:	20004b14 	.word	0x20004b14
 8009830:	20004b0c 	.word	0x20004b0c
 8009834:	20004b00 	.word	0x20004b00
 8009838:	20004b10 	.word	0x20004b10

0800983c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d04a      	beq.n	80098e4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800984e:	2308      	movs	r3, #8
 8009850:	425b      	negs	r3, r3
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	4413      	add	r3, r2
 8009856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	4b22      	ldr	r3, [pc, #136]	; (80098ec <vPortFree+0xb0>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4013      	ands	r3, r2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10b      	bne.n	8009882 <vPortFree+0x46>
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	b672      	cpsid	i
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	b662      	cpsie	i
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	e7fe      	b.n	8009880 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <vPortFree+0x66>
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	b672      	cpsid	i
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	b662      	cpsie	i
 800989e:	60bb      	str	r3, [r7, #8]
 80098a0:	e7fe      	b.n	80098a0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	4b11      	ldr	r3, [pc, #68]	; (80098ec <vPortFree+0xb0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d019      	beq.n	80098e4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d115      	bne.n	80098e4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <vPortFree+0xb0>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	43db      	mvns	r3, r3
 80098c2:	401a      	ands	r2, r3
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098c8:	f7fe fcac 	bl	8008224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <vPortFree+0xb4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4413      	add	r3, r2
 80098d6:	4a06      	ldr	r2, [pc, #24]	; (80098f0 <vPortFree+0xb4>)
 80098d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098da:	6938      	ldr	r0, [r7, #16]
 80098dc:	f000 f86c 	bl	80099b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80098e0:	f7fe fcae 	bl	8008240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098e4:	bf00      	nop
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20004b14 	.word	0x20004b14
 80098f0:	20004b0c 	.word	0x20004b0c

080098f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80098fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009900:	4b27      	ldr	r3, [pc, #156]	; (80099a0 <prvHeapInit+0xac>)
 8009902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00c      	beq.n	8009928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3307      	adds	r3, #7
 8009912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0307 	bic.w	r3, r3, #7
 800991a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	4a1f      	ldr	r2, [pc, #124]	; (80099a0 <prvHeapInit+0xac>)
 8009924:	4413      	add	r3, r2
 8009926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800992c:	4a1d      	ldr	r2, [pc, #116]	; (80099a4 <prvHeapInit+0xb0>)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009932:	4b1c      	ldr	r3, [pc, #112]	; (80099a4 <prvHeapInit+0xb0>)
 8009934:	2200      	movs	r2, #0
 8009936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	4413      	add	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009940:	2208      	movs	r2, #8
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	1a9b      	subs	r3, r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 0307 	bic.w	r3, r3, #7
 800994e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4a15      	ldr	r2, [pc, #84]	; (80099a8 <prvHeapInit+0xb4>)
 8009954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009956:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <prvHeapInit+0xb4>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2200      	movs	r2, #0
 800995c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800995e:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <prvHeapInit+0xb4>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2200      	movs	r2, #0
 8009964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	1ad2      	subs	r2, r2, r3
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009974:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <prvHeapInit+0xb4>)
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <prvHeapInit+0xb8>)
 8009982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	4a09      	ldr	r2, [pc, #36]	; (80099b0 <prvHeapInit+0xbc>)
 800998a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800998c:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <prvHeapInit+0xc0>)
 800998e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009992:	601a      	str	r2, [r3, #0]
}
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	20000f00 	.word	0x20000f00
 80099a4:	20004b00 	.word	0x20004b00
 80099a8:	20004b08 	.word	0x20004b08
 80099ac:	20004b10 	.word	0x20004b10
 80099b0:	20004b0c 	.word	0x20004b0c
 80099b4:	20004b14 	.word	0x20004b14

080099b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099c0:	4b28      	ldr	r3, [pc, #160]	; (8009a64 <prvInsertBlockIntoFreeList+0xac>)
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	e002      	b.n	80099cc <prvInsertBlockIntoFreeList+0x14>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d8f7      	bhi.n	80099c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	4413      	add	r3, r2
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d108      	bne.n	80099fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	441a      	add	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	441a      	add	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d118      	bne.n	8009a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <prvInsertBlockIntoFreeList+0xb0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d00d      	beq.n	8009a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	441a      	add	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	e008      	b.n	8009a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a36:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <prvInsertBlockIntoFreeList+0xb0>)
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	e003      	b.n	8009a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d002      	beq.n	8009a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a56:	bf00      	nop
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	20004b00 	.word	0x20004b00
 8009a68:	20004b08 	.word	0x20004b08

08009a6c <__assert_func>:
 8009a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a6e:	461c      	mov	r4, r3
 8009a70:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <__assert_func+0x2c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4605      	mov	r5, r0
 8009a76:	68d8      	ldr	r0, [r3, #12]
 8009a78:	b152      	cbz	r2, 8009a90 <__assert_func+0x24>
 8009a7a:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <__assert_func+0x30>)
 8009a7c:	9100      	str	r1, [sp, #0]
 8009a7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a82:	4907      	ldr	r1, [pc, #28]	; (8009aa0 <__assert_func+0x34>)
 8009a84:	462b      	mov	r3, r5
 8009a86:	4622      	mov	r2, r4
 8009a88:	f000 f814 	bl	8009ab4 <fiprintf>
 8009a8c:	f000 ff78 	bl	800a980 <abort>
 8009a90:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <__assert_func+0x38>)
 8009a92:	461a      	mov	r2, r3
 8009a94:	e7f2      	b.n	8009a7c <__assert_func+0x10>
 8009a96:	bf00      	nop
 8009a98:	20000010 	.word	0x20000010
 8009a9c:	0800c775 	.word	0x0800c775
 8009aa0:	0800c782 	.word	0x0800c782
 8009aa4:	0800c7b0 	.word	0x0800c7b0

08009aa8 <__errno>:
 8009aa8:	4b01      	ldr	r3, [pc, #4]	; (8009ab0 <__errno+0x8>)
 8009aaa:	6818      	ldr	r0, [r3, #0]
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	20000010 	.word	0x20000010

08009ab4 <fiprintf>:
 8009ab4:	b40e      	push	{r1, r2, r3}
 8009ab6:	b503      	push	{r0, r1, lr}
 8009ab8:	4601      	mov	r1, r0
 8009aba:	ab03      	add	r3, sp, #12
 8009abc:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <fiprintf+0x20>)
 8009abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac2:	6800      	ldr	r0, [r0, #0]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	f000 f919 	bl	8009cfc <_vfiprintf_r>
 8009aca:	b002      	add	sp, #8
 8009acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad0:	b003      	add	sp, #12
 8009ad2:	4770      	bx	lr
 8009ad4:	20000010 	.word	0x20000010

08009ad8 <__libc_init_array>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	4e0d      	ldr	r6, [pc, #52]	; (8009b10 <__libc_init_array+0x38>)
 8009adc:	4c0d      	ldr	r4, [pc, #52]	; (8009b14 <__libc_init_array+0x3c>)
 8009ade:	1ba4      	subs	r4, r4, r6
 8009ae0:	10a4      	asrs	r4, r4, #2
 8009ae2:	2500      	movs	r5, #0
 8009ae4:	42a5      	cmp	r5, r4
 8009ae6:	d109      	bne.n	8009afc <__libc_init_array+0x24>
 8009ae8:	4e0b      	ldr	r6, [pc, #44]	; (8009b18 <__libc_init_array+0x40>)
 8009aea:	4c0c      	ldr	r4, [pc, #48]	; (8009b1c <__libc_init_array+0x44>)
 8009aec:	f002 fca8 	bl	800c440 <_init>
 8009af0:	1ba4      	subs	r4, r4, r6
 8009af2:	10a4      	asrs	r4, r4, #2
 8009af4:	2500      	movs	r5, #0
 8009af6:	42a5      	cmp	r5, r4
 8009af8:	d105      	bne.n	8009b06 <__libc_init_array+0x2e>
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b00:	4798      	blx	r3
 8009b02:	3501      	adds	r5, #1
 8009b04:	e7ee      	b.n	8009ae4 <__libc_init_array+0xc>
 8009b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b0a:	4798      	blx	r3
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	e7f2      	b.n	8009af6 <__libc_init_array+0x1e>
 8009b10:	0800ca80 	.word	0x0800ca80
 8009b14:	0800ca80 	.word	0x0800ca80
 8009b18:	0800ca80 	.word	0x0800ca80
 8009b1c:	0800ca84 	.word	0x0800ca84

08009b20 <malloc>:
 8009b20:	4b02      	ldr	r3, [pc, #8]	; (8009b2c <malloc+0xc>)
 8009b22:	4601      	mov	r1, r0
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	f000 b865 	b.w	8009bf4 <_malloc_r>
 8009b2a:	bf00      	nop
 8009b2c:	20000010 	.word	0x20000010

08009b30 <memcpy>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	1e43      	subs	r3, r0, #1
 8009b34:	440a      	add	r2, r1
 8009b36:	4291      	cmp	r1, r2
 8009b38:	d100      	bne.n	8009b3c <memcpy+0xc>
 8009b3a:	bd10      	pop	{r4, pc}
 8009b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b44:	e7f7      	b.n	8009b36 <memcpy+0x6>

08009b46 <memset>:
 8009b46:	4402      	add	r2, r0
 8009b48:	4603      	mov	r3, r0
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d100      	bne.n	8009b50 <memset+0xa>
 8009b4e:	4770      	bx	lr
 8009b50:	f803 1b01 	strb.w	r1, [r3], #1
 8009b54:	e7f9      	b.n	8009b4a <memset+0x4>
	...

08009b58 <_free_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	2900      	cmp	r1, #0
 8009b5e:	d045      	beq.n	8009bec <_free_r+0x94>
 8009b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b64:	1f0c      	subs	r4, r1, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfb8      	it	lt
 8009b6a:	18e4      	addlt	r4, r4, r3
 8009b6c:	f001 feed 	bl	800b94a <__malloc_lock>
 8009b70:	4a1f      	ldr	r2, [pc, #124]	; (8009bf0 <_free_r+0x98>)
 8009b72:	6813      	ldr	r3, [r2, #0]
 8009b74:	4610      	mov	r0, r2
 8009b76:	b933      	cbnz	r3, 8009b86 <_free_r+0x2e>
 8009b78:	6063      	str	r3, [r4, #4]
 8009b7a:	6014      	str	r4, [r2, #0]
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b82:	f001 bee3 	b.w	800b94c <__malloc_unlock>
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	d90c      	bls.n	8009ba4 <_free_r+0x4c>
 8009b8a:	6821      	ldr	r1, [r4, #0]
 8009b8c:	1862      	adds	r2, r4, r1
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	bf04      	itt	eq
 8009b92:	681a      	ldreq	r2, [r3, #0]
 8009b94:	685b      	ldreq	r3, [r3, #4]
 8009b96:	6063      	str	r3, [r4, #4]
 8009b98:	bf04      	itt	eq
 8009b9a:	1852      	addeq	r2, r2, r1
 8009b9c:	6022      	streq	r2, [r4, #0]
 8009b9e:	6004      	str	r4, [r0, #0]
 8009ba0:	e7ec      	b.n	8009b7c <_free_r+0x24>
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	b10a      	cbz	r2, 8009bac <_free_r+0x54>
 8009ba8:	42a2      	cmp	r2, r4
 8009baa:	d9fa      	bls.n	8009ba2 <_free_r+0x4a>
 8009bac:	6819      	ldr	r1, [r3, #0]
 8009bae:	1858      	adds	r0, r3, r1
 8009bb0:	42a0      	cmp	r0, r4
 8009bb2:	d10b      	bne.n	8009bcc <_free_r+0x74>
 8009bb4:	6820      	ldr	r0, [r4, #0]
 8009bb6:	4401      	add	r1, r0
 8009bb8:	1858      	adds	r0, r3, r1
 8009bba:	4282      	cmp	r2, r0
 8009bbc:	6019      	str	r1, [r3, #0]
 8009bbe:	d1dd      	bne.n	8009b7c <_free_r+0x24>
 8009bc0:	6810      	ldr	r0, [r2, #0]
 8009bc2:	6852      	ldr	r2, [r2, #4]
 8009bc4:	605a      	str	r2, [r3, #4]
 8009bc6:	4401      	add	r1, r0
 8009bc8:	6019      	str	r1, [r3, #0]
 8009bca:	e7d7      	b.n	8009b7c <_free_r+0x24>
 8009bcc:	d902      	bls.n	8009bd4 <_free_r+0x7c>
 8009bce:	230c      	movs	r3, #12
 8009bd0:	602b      	str	r3, [r5, #0]
 8009bd2:	e7d3      	b.n	8009b7c <_free_r+0x24>
 8009bd4:	6820      	ldr	r0, [r4, #0]
 8009bd6:	1821      	adds	r1, r4, r0
 8009bd8:	428a      	cmp	r2, r1
 8009bda:	bf04      	itt	eq
 8009bdc:	6811      	ldreq	r1, [r2, #0]
 8009bde:	6852      	ldreq	r2, [r2, #4]
 8009be0:	6062      	str	r2, [r4, #4]
 8009be2:	bf04      	itt	eq
 8009be4:	1809      	addeq	r1, r1, r0
 8009be6:	6021      	streq	r1, [r4, #0]
 8009be8:	605c      	str	r4, [r3, #4]
 8009bea:	e7c7      	b.n	8009b7c <_free_r+0x24>
 8009bec:	bd38      	pop	{r3, r4, r5, pc}
 8009bee:	bf00      	nop
 8009bf0:	20004b18 	.word	0x20004b18

08009bf4 <_malloc_r>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	1ccd      	adds	r5, r1, #3
 8009bf8:	f025 0503 	bic.w	r5, r5, #3
 8009bfc:	3508      	adds	r5, #8
 8009bfe:	2d0c      	cmp	r5, #12
 8009c00:	bf38      	it	cc
 8009c02:	250c      	movcc	r5, #12
 8009c04:	2d00      	cmp	r5, #0
 8009c06:	4606      	mov	r6, r0
 8009c08:	db01      	blt.n	8009c0e <_malloc_r+0x1a>
 8009c0a:	42a9      	cmp	r1, r5
 8009c0c:	d903      	bls.n	8009c16 <_malloc_r+0x22>
 8009c0e:	230c      	movs	r3, #12
 8009c10:	6033      	str	r3, [r6, #0]
 8009c12:	2000      	movs	r0, #0
 8009c14:	bd70      	pop	{r4, r5, r6, pc}
 8009c16:	f001 fe98 	bl	800b94a <__malloc_lock>
 8009c1a:	4a21      	ldr	r2, [pc, #132]	; (8009ca0 <_malloc_r+0xac>)
 8009c1c:	6814      	ldr	r4, [r2, #0]
 8009c1e:	4621      	mov	r1, r4
 8009c20:	b991      	cbnz	r1, 8009c48 <_malloc_r+0x54>
 8009c22:	4c20      	ldr	r4, [pc, #128]	; (8009ca4 <_malloc_r+0xb0>)
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	b91b      	cbnz	r3, 8009c30 <_malloc_r+0x3c>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 fdb9 	bl	800a7a0 <_sbrk_r>
 8009c2e:	6020      	str	r0, [r4, #0]
 8009c30:	4629      	mov	r1, r5
 8009c32:	4630      	mov	r0, r6
 8009c34:	f000 fdb4 	bl	800a7a0 <_sbrk_r>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d124      	bne.n	8009c86 <_malloc_r+0x92>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	6033      	str	r3, [r6, #0]
 8009c40:	4630      	mov	r0, r6
 8009c42:	f001 fe83 	bl	800b94c <__malloc_unlock>
 8009c46:	e7e4      	b.n	8009c12 <_malloc_r+0x1e>
 8009c48:	680b      	ldr	r3, [r1, #0]
 8009c4a:	1b5b      	subs	r3, r3, r5
 8009c4c:	d418      	bmi.n	8009c80 <_malloc_r+0x8c>
 8009c4e:	2b0b      	cmp	r3, #11
 8009c50:	d90f      	bls.n	8009c72 <_malloc_r+0x7e>
 8009c52:	600b      	str	r3, [r1, #0]
 8009c54:	50cd      	str	r5, [r1, r3]
 8009c56:	18cc      	adds	r4, r1, r3
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f001 fe77 	bl	800b94c <__malloc_unlock>
 8009c5e:	f104 000b 	add.w	r0, r4, #11
 8009c62:	1d23      	adds	r3, r4, #4
 8009c64:	f020 0007 	bic.w	r0, r0, #7
 8009c68:	1ac3      	subs	r3, r0, r3
 8009c6a:	d0d3      	beq.n	8009c14 <_malloc_r+0x20>
 8009c6c:	425a      	negs	r2, r3
 8009c6e:	50e2      	str	r2, [r4, r3]
 8009c70:	e7d0      	b.n	8009c14 <_malloc_r+0x20>
 8009c72:	428c      	cmp	r4, r1
 8009c74:	684b      	ldr	r3, [r1, #4]
 8009c76:	bf16      	itet	ne
 8009c78:	6063      	strne	r3, [r4, #4]
 8009c7a:	6013      	streq	r3, [r2, #0]
 8009c7c:	460c      	movne	r4, r1
 8009c7e:	e7eb      	b.n	8009c58 <_malloc_r+0x64>
 8009c80:	460c      	mov	r4, r1
 8009c82:	6849      	ldr	r1, [r1, #4]
 8009c84:	e7cc      	b.n	8009c20 <_malloc_r+0x2c>
 8009c86:	1cc4      	adds	r4, r0, #3
 8009c88:	f024 0403 	bic.w	r4, r4, #3
 8009c8c:	42a0      	cmp	r0, r4
 8009c8e:	d005      	beq.n	8009c9c <_malloc_r+0xa8>
 8009c90:	1a21      	subs	r1, r4, r0
 8009c92:	4630      	mov	r0, r6
 8009c94:	f000 fd84 	bl	800a7a0 <_sbrk_r>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d0cf      	beq.n	8009c3c <_malloc_r+0x48>
 8009c9c:	6025      	str	r5, [r4, #0]
 8009c9e:	e7db      	b.n	8009c58 <_malloc_r+0x64>
 8009ca0:	20004b18 	.word	0x20004b18
 8009ca4:	20004b1c 	.word	0x20004b1c

08009ca8 <__sfputc_r>:
 8009ca8:	6893      	ldr	r3, [r2, #8]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	b410      	push	{r4}
 8009cb0:	6093      	str	r3, [r2, #8]
 8009cb2:	da08      	bge.n	8009cc6 <__sfputc_r+0x1e>
 8009cb4:	6994      	ldr	r4, [r2, #24]
 8009cb6:	42a3      	cmp	r3, r4
 8009cb8:	db01      	blt.n	8009cbe <__sfputc_r+0x16>
 8009cba:	290a      	cmp	r1, #10
 8009cbc:	d103      	bne.n	8009cc6 <__sfputc_r+0x1e>
 8009cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cc2:	f000 bd9d 	b.w	800a800 <__swbuf_r>
 8009cc6:	6813      	ldr	r3, [r2, #0]
 8009cc8:	1c58      	adds	r0, r3, #1
 8009cca:	6010      	str	r0, [r2, #0]
 8009ccc:	7019      	strb	r1, [r3, #0]
 8009cce:	4608      	mov	r0, r1
 8009cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <__sfputs_r>:
 8009cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd8:	4606      	mov	r6, r0
 8009cda:	460f      	mov	r7, r1
 8009cdc:	4614      	mov	r4, r2
 8009cde:	18d5      	adds	r5, r2, r3
 8009ce0:	42ac      	cmp	r4, r5
 8009ce2:	d101      	bne.n	8009ce8 <__sfputs_r+0x12>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	e007      	b.n	8009cf8 <__sfputs_r+0x22>
 8009ce8:	463a      	mov	r2, r7
 8009cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f7ff ffda 	bl	8009ca8 <__sfputc_r>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d1f3      	bne.n	8009ce0 <__sfputs_r+0xa>
 8009cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cfc <_vfiprintf_r>:
 8009cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d00:	460c      	mov	r4, r1
 8009d02:	b09d      	sub	sp, #116	; 0x74
 8009d04:	4617      	mov	r7, r2
 8009d06:	461d      	mov	r5, r3
 8009d08:	4606      	mov	r6, r0
 8009d0a:	b118      	cbz	r0, 8009d14 <_vfiprintf_r+0x18>
 8009d0c:	6983      	ldr	r3, [r0, #24]
 8009d0e:	b90b      	cbnz	r3, 8009d14 <_vfiprintf_r+0x18>
 8009d10:	f001 fd06 	bl	800b720 <__sinit>
 8009d14:	4b7c      	ldr	r3, [pc, #496]	; (8009f08 <_vfiprintf_r+0x20c>)
 8009d16:	429c      	cmp	r4, r3
 8009d18:	d158      	bne.n	8009dcc <_vfiprintf_r+0xd0>
 8009d1a:	6874      	ldr	r4, [r6, #4]
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	0718      	lsls	r0, r3, #28
 8009d20:	d55e      	bpl.n	8009de0 <_vfiprintf_r+0xe4>
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d05b      	beq.n	8009de0 <_vfiprintf_r+0xe4>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2c:	2320      	movs	r3, #32
 8009d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d32:	2330      	movs	r3, #48	; 0x30
 8009d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d38:	9503      	str	r5, [sp, #12]
 8009d3a:	f04f 0b01 	mov.w	fp, #1
 8009d3e:	46b8      	mov	r8, r7
 8009d40:	4645      	mov	r5, r8
 8009d42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d46:	b10b      	cbz	r3, 8009d4c <_vfiprintf_r+0x50>
 8009d48:	2b25      	cmp	r3, #37	; 0x25
 8009d4a:	d154      	bne.n	8009df6 <_vfiprintf_r+0xfa>
 8009d4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009d50:	d00b      	beq.n	8009d6a <_vfiprintf_r+0x6e>
 8009d52:	4653      	mov	r3, sl
 8009d54:	463a      	mov	r2, r7
 8009d56:	4621      	mov	r1, r4
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff ffbc 	bl	8009cd6 <__sfputs_r>
 8009d5e:	3001      	adds	r0, #1
 8009d60:	f000 80c2 	beq.w	8009ee8 <_vfiprintf_r+0x1ec>
 8009d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d66:	4453      	add	r3, sl
 8009d68:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6a:	f898 3000 	ldrb.w	r3, [r8]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 80ba 	beq.w	8009ee8 <_vfiprintf_r+0x1ec>
 8009d74:	2300      	movs	r3, #0
 8009d76:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	9307      	str	r3, [sp, #28]
 8009d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d86:	931a      	str	r3, [sp, #104]	; 0x68
 8009d88:	46a8      	mov	r8, r5
 8009d8a:	2205      	movs	r2, #5
 8009d8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009d90:	485e      	ldr	r0, [pc, #376]	; (8009f0c <_vfiprintf_r+0x210>)
 8009d92:	f7f6 fa5d 	bl	8000250 <memchr>
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	bb78      	cbnz	r0, 8009dfa <_vfiprintf_r+0xfe>
 8009d9a:	06d9      	lsls	r1, r3, #27
 8009d9c:	bf44      	itt	mi
 8009d9e:	2220      	movmi	r2, #32
 8009da0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009da4:	071a      	lsls	r2, r3, #28
 8009da6:	bf44      	itt	mi
 8009da8:	222b      	movmi	r2, #43	; 0x2b
 8009daa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dae:	782a      	ldrb	r2, [r5, #0]
 8009db0:	2a2a      	cmp	r2, #42	; 0x2a
 8009db2:	d02a      	beq.n	8009e0a <_vfiprintf_r+0x10e>
 8009db4:	9a07      	ldr	r2, [sp, #28]
 8009db6:	46a8      	mov	r8, r5
 8009db8:	2000      	movs	r0, #0
 8009dba:	250a      	movs	r5, #10
 8009dbc:	4641      	mov	r1, r8
 8009dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc2:	3b30      	subs	r3, #48	; 0x30
 8009dc4:	2b09      	cmp	r3, #9
 8009dc6:	d969      	bls.n	8009e9c <_vfiprintf_r+0x1a0>
 8009dc8:	b360      	cbz	r0, 8009e24 <_vfiprintf_r+0x128>
 8009dca:	e024      	b.n	8009e16 <_vfiprintf_r+0x11a>
 8009dcc:	4b50      	ldr	r3, [pc, #320]	; (8009f10 <_vfiprintf_r+0x214>)
 8009dce:	429c      	cmp	r4, r3
 8009dd0:	d101      	bne.n	8009dd6 <_vfiprintf_r+0xda>
 8009dd2:	68b4      	ldr	r4, [r6, #8]
 8009dd4:	e7a2      	b.n	8009d1c <_vfiprintf_r+0x20>
 8009dd6:	4b4f      	ldr	r3, [pc, #316]	; (8009f14 <_vfiprintf_r+0x218>)
 8009dd8:	429c      	cmp	r4, r3
 8009dda:	bf08      	it	eq
 8009ddc:	68f4      	ldreq	r4, [r6, #12]
 8009dde:	e79d      	b.n	8009d1c <_vfiprintf_r+0x20>
 8009de0:	4621      	mov	r1, r4
 8009de2:	4630      	mov	r0, r6
 8009de4:	f000 fd5e 	bl	800a8a4 <__swsetup_r>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d09d      	beq.n	8009d28 <_vfiprintf_r+0x2c>
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	b01d      	add	sp, #116	; 0x74
 8009df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df6:	46a8      	mov	r8, r5
 8009df8:	e7a2      	b.n	8009d40 <_vfiprintf_r+0x44>
 8009dfa:	4a44      	ldr	r2, [pc, #272]	; (8009f0c <_vfiprintf_r+0x210>)
 8009dfc:	1a80      	subs	r0, r0, r2
 8009dfe:	fa0b f000 	lsl.w	r0, fp, r0
 8009e02:	4318      	orrs	r0, r3
 8009e04:	9004      	str	r0, [sp, #16]
 8009e06:	4645      	mov	r5, r8
 8009e08:	e7be      	b.n	8009d88 <_vfiprintf_r+0x8c>
 8009e0a:	9a03      	ldr	r2, [sp, #12]
 8009e0c:	1d11      	adds	r1, r2, #4
 8009e0e:	6812      	ldr	r2, [r2, #0]
 8009e10:	9103      	str	r1, [sp, #12]
 8009e12:	2a00      	cmp	r2, #0
 8009e14:	db01      	blt.n	8009e1a <_vfiprintf_r+0x11e>
 8009e16:	9207      	str	r2, [sp, #28]
 8009e18:	e004      	b.n	8009e24 <_vfiprintf_r+0x128>
 8009e1a:	4252      	negs	r2, r2
 8009e1c:	f043 0302 	orr.w	r3, r3, #2
 8009e20:	9207      	str	r2, [sp, #28]
 8009e22:	9304      	str	r3, [sp, #16]
 8009e24:	f898 3000 	ldrb.w	r3, [r8]
 8009e28:	2b2e      	cmp	r3, #46	; 0x2e
 8009e2a:	d10e      	bne.n	8009e4a <_vfiprintf_r+0x14e>
 8009e2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e30:	2b2a      	cmp	r3, #42	; 0x2a
 8009e32:	d138      	bne.n	8009ea6 <_vfiprintf_r+0x1aa>
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	1d1a      	adds	r2, r3, #4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	9203      	str	r2, [sp, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	bfb8      	it	lt
 8009e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e44:	f108 0802 	add.w	r8, r8, #2
 8009e48:	9305      	str	r3, [sp, #20]
 8009e4a:	4d33      	ldr	r5, [pc, #204]	; (8009f18 <_vfiprintf_r+0x21c>)
 8009e4c:	f898 1000 	ldrb.w	r1, [r8]
 8009e50:	2203      	movs	r2, #3
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7f6 f9fc 	bl	8000250 <memchr>
 8009e58:	b140      	cbz	r0, 8009e6c <_vfiprintf_r+0x170>
 8009e5a:	2340      	movs	r3, #64	; 0x40
 8009e5c:	1b40      	subs	r0, r0, r5
 8009e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e62:	9b04      	ldr	r3, [sp, #16]
 8009e64:	4303      	orrs	r3, r0
 8009e66:	f108 0801 	add.w	r8, r8, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	f898 1000 	ldrb.w	r1, [r8]
 8009e70:	482a      	ldr	r0, [pc, #168]	; (8009f1c <_vfiprintf_r+0x220>)
 8009e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e76:	2206      	movs	r2, #6
 8009e78:	f108 0701 	add.w	r7, r8, #1
 8009e7c:	f7f6 f9e8 	bl	8000250 <memchr>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d037      	beq.n	8009ef4 <_vfiprintf_r+0x1f8>
 8009e84:	4b26      	ldr	r3, [pc, #152]	; (8009f20 <_vfiprintf_r+0x224>)
 8009e86:	bb1b      	cbnz	r3, 8009ed0 <_vfiprintf_r+0x1d4>
 8009e88:	9b03      	ldr	r3, [sp, #12]
 8009e8a:	3307      	adds	r3, #7
 8009e8c:	f023 0307 	bic.w	r3, r3, #7
 8009e90:	3308      	adds	r3, #8
 8009e92:	9303      	str	r3, [sp, #12]
 8009e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e96:	444b      	add	r3, r9
 8009e98:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9a:	e750      	b.n	8009d3e <_vfiprintf_r+0x42>
 8009e9c:	fb05 3202 	mla	r2, r5, r2, r3
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	4688      	mov	r8, r1
 8009ea4:	e78a      	b.n	8009dbc <_vfiprintf_r+0xc0>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f108 0801 	add.w	r8, r8, #1
 8009eac:	9305      	str	r3, [sp, #20]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	250a      	movs	r5, #10
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eb8:	3a30      	subs	r2, #48	; 0x30
 8009eba:	2a09      	cmp	r2, #9
 8009ebc:	d903      	bls.n	8009ec6 <_vfiprintf_r+0x1ca>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0c3      	beq.n	8009e4a <_vfiprintf_r+0x14e>
 8009ec2:	9105      	str	r1, [sp, #20]
 8009ec4:	e7c1      	b.n	8009e4a <_vfiprintf_r+0x14e>
 8009ec6:	fb05 2101 	mla	r1, r5, r1, r2
 8009eca:	2301      	movs	r3, #1
 8009ecc:	4680      	mov	r8, r0
 8009ece:	e7f0      	b.n	8009eb2 <_vfiprintf_r+0x1b6>
 8009ed0:	ab03      	add	r3, sp, #12
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <_vfiprintf_r+0x228>)
 8009ed8:	a904      	add	r1, sp, #16
 8009eda:	4630      	mov	r0, r6
 8009edc:	f000 f8ac 	bl	800a038 <_printf_float>
 8009ee0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ee4:	4681      	mov	r9, r0
 8009ee6:	d1d5      	bne.n	8009e94 <_vfiprintf_r+0x198>
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	065b      	lsls	r3, r3, #25
 8009eec:	f53f af7e 	bmi.w	8009dec <_vfiprintf_r+0xf0>
 8009ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef2:	e77d      	b.n	8009df0 <_vfiprintf_r+0xf4>
 8009ef4:	ab03      	add	r3, sp, #12
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4b0a      	ldr	r3, [pc, #40]	; (8009f24 <_vfiprintf_r+0x228>)
 8009efc:	a904      	add	r1, sp, #16
 8009efe:	4630      	mov	r0, r6
 8009f00:	f000 fb3c 	bl	800a57c <_printf_i>
 8009f04:	e7ec      	b.n	8009ee0 <_vfiprintf_r+0x1e4>
 8009f06:	bf00      	nop
 8009f08:	0800c82c 	.word	0x0800c82c
 8009f0c:	0800c7b8 	.word	0x0800c7b8
 8009f10:	0800c84c 	.word	0x0800c84c
 8009f14:	0800c80c 	.word	0x0800c80c
 8009f18:	0800c7be 	.word	0x0800c7be
 8009f1c:	0800c7c2 	.word	0x0800c7c2
 8009f20:	0800a039 	.word	0x0800a039
 8009f24:	08009cd7 	.word	0x08009cd7

08009f28 <__cvt>:
 8009f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f2a:	ed2d 8b02 	vpush	{d8}
 8009f2e:	eeb0 8b40 	vmov.f64	d8, d0
 8009f32:	b085      	sub	sp, #20
 8009f34:	4617      	mov	r7, r2
 8009f36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009f38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009f3a:	ee18 2a90 	vmov	r2, s17
 8009f3e:	f025 0520 	bic.w	r5, r5, #32
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	bfb6      	itet	lt
 8009f46:	222d      	movlt	r2, #45	; 0x2d
 8009f48:	2200      	movge	r2, #0
 8009f4a:	eeb1 8b40 	vneglt.f64	d8, d0
 8009f4e:	2d46      	cmp	r5, #70	; 0x46
 8009f50:	460c      	mov	r4, r1
 8009f52:	701a      	strb	r2, [r3, #0]
 8009f54:	d004      	beq.n	8009f60 <__cvt+0x38>
 8009f56:	2d45      	cmp	r5, #69	; 0x45
 8009f58:	d100      	bne.n	8009f5c <__cvt+0x34>
 8009f5a:	3401      	adds	r4, #1
 8009f5c:	2102      	movs	r1, #2
 8009f5e:	e000      	b.n	8009f62 <__cvt+0x3a>
 8009f60:	2103      	movs	r1, #3
 8009f62:	ab03      	add	r3, sp, #12
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	ab02      	add	r3, sp, #8
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	4633      	mov	r3, r6
 8009f6e:	eeb0 0b48 	vmov.f64	d0, d8
 8009f72:	f000 fd99 	bl	800aaa8 <_dtoa_r>
 8009f76:	2d47      	cmp	r5, #71	; 0x47
 8009f78:	d101      	bne.n	8009f7e <__cvt+0x56>
 8009f7a:	07fb      	lsls	r3, r7, #31
 8009f7c:	d51e      	bpl.n	8009fbc <__cvt+0x94>
 8009f7e:	2d46      	cmp	r5, #70	; 0x46
 8009f80:	eb00 0304 	add.w	r3, r0, r4
 8009f84:	d10c      	bne.n	8009fa0 <__cvt+0x78>
 8009f86:	7802      	ldrb	r2, [r0, #0]
 8009f88:	2a30      	cmp	r2, #48	; 0x30
 8009f8a:	d107      	bne.n	8009f9c <__cvt+0x74>
 8009f8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f94:	bf1c      	itt	ne
 8009f96:	f1c4 0401 	rsbne	r4, r4, #1
 8009f9a:	6034      	strne	r4, [r6, #0]
 8009f9c:	6832      	ldr	r2, [r6, #0]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa8:	d007      	beq.n	8009fba <__cvt+0x92>
 8009faa:	2130      	movs	r1, #48	; 0x30
 8009fac:	9a03      	ldr	r2, [sp, #12]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d204      	bcs.n	8009fbc <__cvt+0x94>
 8009fb2:	1c54      	adds	r4, r2, #1
 8009fb4:	9403      	str	r4, [sp, #12]
 8009fb6:	7011      	strb	r1, [r2, #0]
 8009fb8:	e7f8      	b.n	8009fac <__cvt+0x84>
 8009fba:	9303      	str	r3, [sp, #12]
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fc0:	1a1b      	subs	r3, r3, r0
 8009fc2:	6013      	str	r3, [r2, #0]
 8009fc4:	b005      	add	sp, #20
 8009fc6:	ecbd 8b02 	vpop	{d8}
 8009fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fcc <__exponent>:
 8009fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	bfba      	itte	lt
 8009fd4:	4249      	neglt	r1, r1
 8009fd6:	232d      	movlt	r3, #45	; 0x2d
 8009fd8:	232b      	movge	r3, #43	; 0x2b
 8009fda:	2909      	cmp	r1, #9
 8009fdc:	f804 2b02 	strb.w	r2, [r4], #2
 8009fe0:	7043      	strb	r3, [r0, #1]
 8009fe2:	dd20      	ble.n	800a026 <__exponent+0x5a>
 8009fe4:	f10d 0307 	add.w	r3, sp, #7
 8009fe8:	461f      	mov	r7, r3
 8009fea:	260a      	movs	r6, #10
 8009fec:	fb91 f5f6 	sdiv	r5, r1, r6
 8009ff0:	fb06 1115 	mls	r1, r6, r5, r1
 8009ff4:	3130      	adds	r1, #48	; 0x30
 8009ff6:	2d09      	cmp	r5, #9
 8009ff8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ffc:	f103 32ff 	add.w	r2, r3, #4294967295
 800a000:	4629      	mov	r1, r5
 800a002:	dc09      	bgt.n	800a018 <__exponent+0x4c>
 800a004:	3130      	adds	r1, #48	; 0x30
 800a006:	3b02      	subs	r3, #2
 800a008:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a00c:	42bb      	cmp	r3, r7
 800a00e:	4622      	mov	r2, r4
 800a010:	d304      	bcc.n	800a01c <__exponent+0x50>
 800a012:	1a10      	subs	r0, r2, r0
 800a014:	b003      	add	sp, #12
 800a016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a018:	4613      	mov	r3, r2
 800a01a:	e7e7      	b.n	8009fec <__exponent+0x20>
 800a01c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a020:	f804 2b01 	strb.w	r2, [r4], #1
 800a024:	e7f2      	b.n	800a00c <__exponent+0x40>
 800a026:	2330      	movs	r3, #48	; 0x30
 800a028:	4419      	add	r1, r3
 800a02a:	7083      	strb	r3, [r0, #2]
 800a02c:	1d02      	adds	r2, r0, #4
 800a02e:	70c1      	strb	r1, [r0, #3]
 800a030:	e7ef      	b.n	800a012 <__exponent+0x46>
 800a032:	0000      	movs	r0, r0
 800a034:	0000      	movs	r0, r0
	...

0800a038 <_printf_float>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	b08d      	sub	sp, #52	; 0x34
 800a03e:	460c      	mov	r4, r1
 800a040:	4616      	mov	r6, r2
 800a042:	461f      	mov	r7, r3
 800a044:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a048:	4605      	mov	r5, r0
 800a04a:	f001 fbf3 	bl	800b834 <_localeconv_r>
 800a04e:	f8d0 b000 	ldr.w	fp, [r0]
 800a052:	4658      	mov	r0, fp
 800a054:	f7f6 f8f4 	bl	8000240 <strlen>
 800a058:	2300      	movs	r3, #0
 800a05a:	930a      	str	r3, [sp, #40]	; 0x28
 800a05c:	f8d8 3000 	ldr.w	r3, [r8]
 800a060:	9005      	str	r0, [sp, #20]
 800a062:	3307      	adds	r3, #7
 800a064:	f023 0307 	bic.w	r3, r3, #7
 800a068:	f103 0108 	add.w	r1, r3, #8
 800a06c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a070:	6822      	ldr	r2, [r4, #0]
 800a072:	f8c8 1000 	str.w	r1, [r8]
 800a076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a07a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a07e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800a308 <_printf_float+0x2d0>
 800a082:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a086:	eeb0 6bc0 	vabs.f64	d6, d0
 800a08a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a092:	dd24      	ble.n	800a0de <_printf_float+0xa6>
 800a094:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a09c:	d502      	bpl.n	800a0a4 <_printf_float+0x6c>
 800a09e:	232d      	movs	r3, #45	; 0x2d
 800a0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a4:	499a      	ldr	r1, [pc, #616]	; (800a310 <_printf_float+0x2d8>)
 800a0a6:	4b9b      	ldr	r3, [pc, #620]	; (800a314 <_printf_float+0x2dc>)
 800a0a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a0ac:	bf8c      	ite	hi
 800a0ae:	4688      	movhi	r8, r1
 800a0b0:	4698      	movls	r8, r3
 800a0b2:	f022 0204 	bic.w	r2, r2, #4
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	6123      	str	r3, [r4, #16]
 800a0ba:	6022      	str	r2, [r4, #0]
 800a0bc:	f04f 0a00 	mov.w	sl, #0
 800a0c0:	9700      	str	r7, [sp, #0]
 800a0c2:	4633      	mov	r3, r6
 800a0c4:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f000 f9e1 	bl	800a490 <_printf_common>
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f040 8089 	bne.w	800a1e6 <_printf_float+0x1ae>
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	b00d      	add	sp, #52	; 0x34
 800a0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0de:	eeb4 0b40 	vcmp.f64	d0, d0
 800a0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e6:	d702      	bvc.n	800a0ee <_printf_float+0xb6>
 800a0e8:	498b      	ldr	r1, [pc, #556]	; (800a318 <_printf_float+0x2e0>)
 800a0ea:	4b8c      	ldr	r3, [pc, #560]	; (800a31c <_printf_float+0x2e4>)
 800a0ec:	e7dc      	b.n	800a0a8 <_printf_float+0x70>
 800a0ee:	6861      	ldr	r1, [r4, #4]
 800a0f0:	1c4b      	adds	r3, r1, #1
 800a0f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0f6:	ab0a      	add	r3, sp, #40	; 0x28
 800a0f8:	a809      	add	r0, sp, #36	; 0x24
 800a0fa:	d13b      	bne.n	800a174 <_printf_float+0x13c>
 800a0fc:	2106      	movs	r1, #6
 800a0fe:	6061      	str	r1, [r4, #4]
 800a100:	f04f 0c00 	mov.w	ip, #0
 800a104:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a108:	e9cd 0900 	strd	r0, r9, [sp]
 800a10c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a110:	6022      	str	r2, [r4, #0]
 800a112:	6861      	ldr	r1, [r4, #4]
 800a114:	4628      	mov	r0, r5
 800a116:	f7ff ff07 	bl	8009f28 <__cvt>
 800a11a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800a11e:	2b47      	cmp	r3, #71	; 0x47
 800a120:	4680      	mov	r8, r0
 800a122:	d109      	bne.n	800a138 <_printf_float+0x100>
 800a124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a126:	1cd8      	adds	r0, r3, #3
 800a128:	db02      	blt.n	800a130 <_printf_float+0xf8>
 800a12a:	6862      	ldr	r2, [r4, #4]
 800a12c:	4293      	cmp	r3, r2
 800a12e:	dd47      	ble.n	800a1c0 <_printf_float+0x188>
 800a130:	f1a9 0902 	sub.w	r9, r9, #2
 800a134:	fa5f f989 	uxtb.w	r9, r9
 800a138:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a13c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a13e:	d824      	bhi.n	800a18a <_printf_float+0x152>
 800a140:	3901      	subs	r1, #1
 800a142:	464a      	mov	r2, r9
 800a144:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a148:	9109      	str	r1, [sp, #36]	; 0x24
 800a14a:	f7ff ff3f 	bl	8009fcc <__exponent>
 800a14e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a150:	1813      	adds	r3, r2, r0
 800a152:	2a01      	cmp	r2, #1
 800a154:	4682      	mov	sl, r0
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	dc02      	bgt.n	800a160 <_printf_float+0x128>
 800a15a:	6822      	ldr	r2, [r4, #0]
 800a15c:	07d1      	lsls	r1, r2, #31
 800a15e:	d501      	bpl.n	800a164 <_printf_float+0x12c>
 800a160:	3301      	adds	r3, #1
 800a162:	6123      	str	r3, [r4, #16]
 800a164:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d0a9      	beq.n	800a0c0 <_printf_float+0x88>
 800a16c:	232d      	movs	r3, #45	; 0x2d
 800a16e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a172:	e7a5      	b.n	800a0c0 <_printf_float+0x88>
 800a174:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800a178:	f000 8178 	beq.w	800a46c <_printf_float+0x434>
 800a17c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a180:	d1be      	bne.n	800a100 <_printf_float+0xc8>
 800a182:	2900      	cmp	r1, #0
 800a184:	d1bc      	bne.n	800a100 <_printf_float+0xc8>
 800a186:	2101      	movs	r1, #1
 800a188:	e7b9      	b.n	800a0fe <_printf_float+0xc6>
 800a18a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a18e:	d119      	bne.n	800a1c4 <_printf_float+0x18c>
 800a190:	2900      	cmp	r1, #0
 800a192:	6863      	ldr	r3, [r4, #4]
 800a194:	dd0c      	ble.n	800a1b0 <_printf_float+0x178>
 800a196:	6121      	str	r1, [r4, #16]
 800a198:	b913      	cbnz	r3, 800a1a0 <_printf_float+0x168>
 800a19a:	6822      	ldr	r2, [r4, #0]
 800a19c:	07d2      	lsls	r2, r2, #31
 800a19e:	d502      	bpl.n	800a1a6 <_printf_float+0x16e>
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	440b      	add	r3, r1
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1aa:	f04f 0a00 	mov.w	sl, #0
 800a1ae:	e7d9      	b.n	800a164 <_printf_float+0x12c>
 800a1b0:	b913      	cbnz	r3, 800a1b8 <_printf_float+0x180>
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	07d0      	lsls	r0, r2, #31
 800a1b6:	d501      	bpl.n	800a1bc <_printf_float+0x184>
 800a1b8:	3302      	adds	r3, #2
 800a1ba:	e7f3      	b.n	800a1a4 <_printf_float+0x16c>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e7f1      	b.n	800a1a4 <_printf_float+0x16c>
 800a1c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a1c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	db05      	blt.n	800a1d8 <_printf_float+0x1a0>
 800a1cc:	6822      	ldr	r2, [r4, #0]
 800a1ce:	6123      	str	r3, [r4, #16]
 800a1d0:	07d1      	lsls	r1, r2, #31
 800a1d2:	d5e8      	bpl.n	800a1a6 <_printf_float+0x16e>
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	e7e5      	b.n	800a1a4 <_printf_float+0x16c>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bfd4      	ite	le
 800a1dc:	f1c3 0302 	rsble	r3, r3, #2
 800a1e0:	2301      	movgt	r3, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	e7de      	b.n	800a1a4 <_printf_float+0x16c>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	055a      	lsls	r2, r3, #21
 800a1ea:	d407      	bmi.n	800a1fc <_printf_float+0x1c4>
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	4642      	mov	r2, r8
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d12a      	bne.n	800a250 <_printf_float+0x218>
 800a1fa:	e76b      	b.n	800a0d4 <_printf_float+0x9c>
 800a1fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a200:	f240 80de 	bls.w	800a3c0 <_printf_float+0x388>
 800a204:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a208:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a210:	d133      	bne.n	800a27a <_printf_float+0x242>
 800a212:	2301      	movs	r3, #1
 800a214:	4a42      	ldr	r2, [pc, #264]	; (800a320 <_printf_float+0x2e8>)
 800a216:	4631      	mov	r1, r6
 800a218:	4628      	mov	r0, r5
 800a21a:	47b8      	blx	r7
 800a21c:	3001      	adds	r0, #1
 800a21e:	f43f af59 	beq.w	800a0d4 <_printf_float+0x9c>
 800a222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a226:	429a      	cmp	r2, r3
 800a228:	db02      	blt.n	800a230 <_printf_float+0x1f8>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	07d8      	lsls	r0, r3, #31
 800a22e:	d50f      	bpl.n	800a250 <_printf_float+0x218>
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	465a      	mov	r2, fp
 800a234:	4631      	mov	r1, r6
 800a236:	4628      	mov	r0, r5
 800a238:	47b8      	blx	r7
 800a23a:	3001      	adds	r0, #1
 800a23c:	f43f af4a 	beq.w	800a0d4 <_printf_float+0x9c>
 800a240:	f04f 0800 	mov.w	r8, #0
 800a244:	f104 091a 	add.w	r9, r4, #26
 800a248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24a:	3b01      	subs	r3, #1
 800a24c:	4543      	cmp	r3, r8
 800a24e:	dc09      	bgt.n	800a264 <_printf_float+0x22c>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	079b      	lsls	r3, r3, #30
 800a254:	f100 8105 	bmi.w	800a462 <_printf_float+0x42a>
 800a258:	68e0      	ldr	r0, [r4, #12]
 800a25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a25c:	4298      	cmp	r0, r3
 800a25e:	bfb8      	it	lt
 800a260:	4618      	movlt	r0, r3
 800a262:	e739      	b.n	800a0d8 <_printf_float+0xa0>
 800a264:	2301      	movs	r3, #1
 800a266:	464a      	mov	r2, r9
 800a268:	4631      	mov	r1, r6
 800a26a:	4628      	mov	r0, r5
 800a26c:	47b8      	blx	r7
 800a26e:	3001      	adds	r0, #1
 800a270:	f43f af30 	beq.w	800a0d4 <_printf_float+0x9c>
 800a274:	f108 0801 	add.w	r8, r8, #1
 800a278:	e7e6      	b.n	800a248 <_printf_float+0x210>
 800a27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dc2b      	bgt.n	800a2d8 <_printf_float+0x2a0>
 800a280:	2301      	movs	r3, #1
 800a282:	4a27      	ldr	r2, [pc, #156]	; (800a320 <_printf_float+0x2e8>)
 800a284:	4631      	mov	r1, r6
 800a286:	4628      	mov	r0, r5
 800a288:	47b8      	blx	r7
 800a28a:	3001      	adds	r0, #1
 800a28c:	f43f af22 	beq.w	800a0d4 <_printf_float+0x9c>
 800a290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a292:	b923      	cbnz	r3, 800a29e <_printf_float+0x266>
 800a294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a296:	b913      	cbnz	r3, 800a29e <_printf_float+0x266>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	07d9      	lsls	r1, r3, #31
 800a29c:	d5d8      	bpl.n	800a250 <_printf_float+0x218>
 800a29e:	9b05      	ldr	r3, [sp, #20]
 800a2a0:	465a      	mov	r2, fp
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f af13 	beq.w	800a0d4 <_printf_float+0x9c>
 800a2ae:	f04f 0900 	mov.w	r9, #0
 800a2b2:	f104 0a1a 	add.w	sl, r4, #26
 800a2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b8:	425b      	negs	r3, r3
 800a2ba:	454b      	cmp	r3, r9
 800a2bc:	dc01      	bgt.n	800a2c2 <_printf_float+0x28a>
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	e795      	b.n	800a1ee <_printf_float+0x1b6>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4652      	mov	r2, sl
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	47b8      	blx	r7
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	f43f af01 	beq.w	800a0d4 <_printf_float+0x9c>
 800a2d2:	f109 0901 	add.w	r9, r9, #1
 800a2d6:	e7ee      	b.n	800a2b6 <_printf_float+0x27e>
 800a2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	bfa8      	it	ge
 800a2e0:	461a      	movge	r2, r3
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	4691      	mov	r9, r2
 800a2e6:	dd07      	ble.n	800a2f8 <_printf_float+0x2c0>
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f43f aeee 	beq.w	800a0d4 <_printf_float+0x9c>
 800a2f8:	f104 031a 	add.w	r3, r4, #26
 800a2fc:	f04f 0a00 	mov.w	sl, #0
 800a300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a304:	9307      	str	r3, [sp, #28]
 800a306:	e017      	b.n	800a338 <_printf_float+0x300>
 800a308:	ffffffff 	.word	0xffffffff
 800a30c:	7fefffff 	.word	0x7fefffff
 800a310:	0800c7cd 	.word	0x0800c7cd
 800a314:	0800c7c9 	.word	0x0800c7c9
 800a318:	0800c7d5 	.word	0x0800c7d5
 800a31c:	0800c7d1 	.word	0x0800c7d1
 800a320:	0800c7d9 	.word	0x0800c7d9
 800a324:	2301      	movs	r3, #1
 800a326:	9a07      	ldr	r2, [sp, #28]
 800a328:	4631      	mov	r1, r6
 800a32a:	4628      	mov	r0, r5
 800a32c:	47b8      	blx	r7
 800a32e:	3001      	adds	r0, #1
 800a330:	f43f aed0 	beq.w	800a0d4 <_printf_float+0x9c>
 800a334:	f10a 0a01 	add.w	sl, sl, #1
 800a338:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a33a:	9306      	str	r3, [sp, #24]
 800a33c:	eba3 0309 	sub.w	r3, r3, r9
 800a340:	4553      	cmp	r3, sl
 800a342:	dcef      	bgt.n	800a324 <_printf_float+0x2ec>
 800a344:	9b06      	ldr	r3, [sp, #24]
 800a346:	4498      	add	r8, r3
 800a348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a34c:	429a      	cmp	r2, r3
 800a34e:	db15      	blt.n	800a37c <_printf_float+0x344>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	07da      	lsls	r2, r3, #31
 800a354:	d412      	bmi.n	800a37c <_printf_float+0x344>
 800a356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a358:	9a06      	ldr	r2, [sp, #24]
 800a35a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a35c:	1a9a      	subs	r2, r3, r2
 800a35e:	eba3 0a01 	sub.w	sl, r3, r1
 800a362:	4592      	cmp	sl, r2
 800a364:	bfa8      	it	ge
 800a366:	4692      	movge	sl, r2
 800a368:	f1ba 0f00 	cmp.w	sl, #0
 800a36c:	dc0e      	bgt.n	800a38c <_printf_float+0x354>
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a376:	f104 091a 	add.w	r9, r4, #26
 800a37a:	e019      	b.n	800a3b0 <_printf_float+0x378>
 800a37c:	9b05      	ldr	r3, [sp, #20]
 800a37e:	465a      	mov	r2, fp
 800a380:	4631      	mov	r1, r6
 800a382:	4628      	mov	r0, r5
 800a384:	47b8      	blx	r7
 800a386:	3001      	adds	r0, #1
 800a388:	d1e5      	bne.n	800a356 <_printf_float+0x31e>
 800a38a:	e6a3      	b.n	800a0d4 <_printf_float+0x9c>
 800a38c:	4653      	mov	r3, sl
 800a38e:	4642      	mov	r2, r8
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	d1e9      	bne.n	800a36e <_printf_float+0x336>
 800a39a:	e69b      	b.n	800a0d4 <_printf_float+0x9c>
 800a39c:	2301      	movs	r3, #1
 800a39e:	464a      	mov	r2, r9
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	47b8      	blx	r7
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	f43f ae94 	beq.w	800a0d4 <_printf_float+0x9c>
 800a3ac:	f108 0801 	add.w	r8, r8, #1
 800a3b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	eba3 030a 	sub.w	r3, r3, sl
 800a3ba:	4543      	cmp	r3, r8
 800a3bc:	dcee      	bgt.n	800a39c <_printf_float+0x364>
 800a3be:	e747      	b.n	800a250 <_printf_float+0x218>
 800a3c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3c2:	2a01      	cmp	r2, #1
 800a3c4:	dc01      	bgt.n	800a3ca <_printf_float+0x392>
 800a3c6:	07db      	lsls	r3, r3, #31
 800a3c8:	d539      	bpl.n	800a43e <_printf_float+0x406>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	4642      	mov	r2, r8
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f43f ae7d 	beq.w	800a0d4 <_printf_float+0x9c>
 800a3da:	9b05      	ldr	r3, [sp, #20]
 800a3dc:	465a      	mov	r2, fp
 800a3de:	4631      	mov	r1, r6
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b8      	blx	r7
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	f108 0801 	add.w	r8, r8, #1
 800a3ea:	f43f ae73 	beq.w	800a0d4 <_printf_float+0x9c>
 800a3ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a3f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fc:	f103 33ff 	add.w	r3, r3, #4294967295
 800a400:	d018      	beq.n	800a434 <_printf_float+0x3fc>
 800a402:	4642      	mov	r2, r8
 800a404:	4631      	mov	r1, r6
 800a406:	4628      	mov	r0, r5
 800a408:	47b8      	blx	r7
 800a40a:	3001      	adds	r0, #1
 800a40c:	d10e      	bne.n	800a42c <_printf_float+0x3f4>
 800a40e:	e661      	b.n	800a0d4 <_printf_float+0x9c>
 800a410:	2301      	movs	r3, #1
 800a412:	464a      	mov	r2, r9
 800a414:	4631      	mov	r1, r6
 800a416:	4628      	mov	r0, r5
 800a418:	47b8      	blx	r7
 800a41a:	3001      	adds	r0, #1
 800a41c:	f43f ae5a 	beq.w	800a0d4 <_printf_float+0x9c>
 800a420:	f108 0801 	add.w	r8, r8, #1
 800a424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a426:	3b01      	subs	r3, #1
 800a428:	4543      	cmp	r3, r8
 800a42a:	dcf1      	bgt.n	800a410 <_printf_float+0x3d8>
 800a42c:	4653      	mov	r3, sl
 800a42e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a432:	e6dd      	b.n	800a1f0 <_printf_float+0x1b8>
 800a434:	f04f 0800 	mov.w	r8, #0
 800a438:	f104 091a 	add.w	r9, r4, #26
 800a43c:	e7f2      	b.n	800a424 <_printf_float+0x3ec>
 800a43e:	2301      	movs	r3, #1
 800a440:	e7df      	b.n	800a402 <_printf_float+0x3ca>
 800a442:	2301      	movs	r3, #1
 800a444:	464a      	mov	r2, r9
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	f43f ae41 	beq.w	800a0d4 <_printf_float+0x9c>
 800a452:	f108 0801 	add.w	r8, r8, #1
 800a456:	68e3      	ldr	r3, [r4, #12]
 800a458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a45a:	1a9b      	subs	r3, r3, r2
 800a45c:	4543      	cmp	r3, r8
 800a45e:	dcf0      	bgt.n	800a442 <_printf_float+0x40a>
 800a460:	e6fa      	b.n	800a258 <_printf_float+0x220>
 800a462:	f04f 0800 	mov.w	r8, #0
 800a466:	f104 0919 	add.w	r9, r4, #25
 800a46a:	e7f4      	b.n	800a456 <_printf_float+0x41e>
 800a46c:	2900      	cmp	r1, #0
 800a46e:	f43f ae8a 	beq.w	800a186 <_printf_float+0x14e>
 800a472:	f04f 0c00 	mov.w	ip, #0
 800a476:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a47a:	e9cd 0900 	strd	r0, r9, [sp]
 800a47e:	6022      	str	r2, [r4, #0]
 800a480:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a484:	4628      	mov	r0, r5
 800a486:	f7ff fd4f 	bl	8009f28 <__cvt>
 800a48a:	4680      	mov	r8, r0
 800a48c:	e64a      	b.n	800a124 <_printf_float+0xec>
 800a48e:	bf00      	nop

0800a490 <_printf_common>:
 800a490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a494:	4691      	mov	r9, r2
 800a496:	461f      	mov	r7, r3
 800a498:	688a      	ldr	r2, [r1, #8]
 800a49a:	690b      	ldr	r3, [r1, #16]
 800a49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	bfb8      	it	lt
 800a4a4:	4613      	movlt	r3, r2
 800a4a6:	f8c9 3000 	str.w	r3, [r9]
 800a4aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	b112      	cbz	r2, 800a4ba <_printf_common+0x2a>
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	f8c9 3000 	str.w	r3, [r9]
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	0699      	lsls	r1, r3, #26
 800a4be:	bf42      	ittt	mi
 800a4c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4c4:	3302      	addmi	r3, #2
 800a4c6:	f8c9 3000 	strmi.w	r3, [r9]
 800a4ca:	6825      	ldr	r5, [r4, #0]
 800a4cc:	f015 0506 	ands.w	r5, r5, #6
 800a4d0:	d107      	bne.n	800a4e2 <_printf_common+0x52>
 800a4d2:	f104 0a19 	add.w	sl, r4, #25
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	42ab      	cmp	r3, r5
 800a4e0:	dc28      	bgt.n	800a534 <_printf_common+0xa4>
 800a4e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4e6:	6822      	ldr	r2, [r4, #0]
 800a4e8:	3300      	adds	r3, #0
 800a4ea:	bf18      	it	ne
 800a4ec:	2301      	movne	r3, #1
 800a4ee:	0692      	lsls	r2, r2, #26
 800a4f0:	d42d      	bmi.n	800a54e <_printf_common+0xbe>
 800a4f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	47c0      	blx	r8
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d020      	beq.n	800a542 <_printf_common+0xb2>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	68e5      	ldr	r5, [r4, #12]
 800a504:	f8d9 2000 	ldr.w	r2, [r9]
 800a508:	f003 0306 	and.w	r3, r3, #6
 800a50c:	2b04      	cmp	r3, #4
 800a50e:	bf08      	it	eq
 800a510:	1aad      	subeq	r5, r5, r2
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	6922      	ldr	r2, [r4, #16]
 800a516:	bf0c      	ite	eq
 800a518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a51c:	2500      	movne	r5, #0
 800a51e:	4293      	cmp	r3, r2
 800a520:	bfc4      	itt	gt
 800a522:	1a9b      	subgt	r3, r3, r2
 800a524:	18ed      	addgt	r5, r5, r3
 800a526:	f04f 0900 	mov.w	r9, #0
 800a52a:	341a      	adds	r4, #26
 800a52c:	454d      	cmp	r5, r9
 800a52e:	d11a      	bne.n	800a566 <_printf_common+0xd6>
 800a530:	2000      	movs	r0, #0
 800a532:	e008      	b.n	800a546 <_printf_common+0xb6>
 800a534:	2301      	movs	r3, #1
 800a536:	4652      	mov	r2, sl
 800a538:	4639      	mov	r1, r7
 800a53a:	4630      	mov	r0, r6
 800a53c:	47c0      	blx	r8
 800a53e:	3001      	adds	r0, #1
 800a540:	d103      	bne.n	800a54a <_printf_common+0xba>
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	3501      	adds	r5, #1
 800a54c:	e7c3      	b.n	800a4d6 <_printf_common+0x46>
 800a54e:	18e1      	adds	r1, r4, r3
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	2030      	movs	r0, #48	; 0x30
 800a554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a558:	4422      	add	r2, r4
 800a55a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a55e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a562:	3302      	adds	r3, #2
 800a564:	e7c5      	b.n	800a4f2 <_printf_common+0x62>
 800a566:	2301      	movs	r3, #1
 800a568:	4622      	mov	r2, r4
 800a56a:	4639      	mov	r1, r7
 800a56c:	4630      	mov	r0, r6
 800a56e:	47c0      	blx	r8
 800a570:	3001      	adds	r0, #1
 800a572:	d0e6      	beq.n	800a542 <_printf_common+0xb2>
 800a574:	f109 0901 	add.w	r9, r9, #1
 800a578:	e7d8      	b.n	800a52c <_printf_common+0x9c>
	...

0800a57c <_printf_i>:
 800a57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a580:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a584:	460c      	mov	r4, r1
 800a586:	7e09      	ldrb	r1, [r1, #24]
 800a588:	b085      	sub	sp, #20
 800a58a:	296e      	cmp	r1, #110	; 0x6e
 800a58c:	4617      	mov	r7, r2
 800a58e:	4606      	mov	r6, r0
 800a590:	4698      	mov	r8, r3
 800a592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a594:	f000 80b3 	beq.w	800a6fe <_printf_i+0x182>
 800a598:	d822      	bhi.n	800a5e0 <_printf_i+0x64>
 800a59a:	2963      	cmp	r1, #99	; 0x63
 800a59c:	d036      	beq.n	800a60c <_printf_i+0x90>
 800a59e:	d80a      	bhi.n	800a5b6 <_printf_i+0x3a>
 800a5a0:	2900      	cmp	r1, #0
 800a5a2:	f000 80b9 	beq.w	800a718 <_printf_i+0x19c>
 800a5a6:	2958      	cmp	r1, #88	; 0x58
 800a5a8:	f000 8083 	beq.w	800a6b2 <_printf_i+0x136>
 800a5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a5b4:	e032      	b.n	800a61c <_printf_i+0xa0>
 800a5b6:	2964      	cmp	r1, #100	; 0x64
 800a5b8:	d001      	beq.n	800a5be <_printf_i+0x42>
 800a5ba:	2969      	cmp	r1, #105	; 0x69
 800a5bc:	d1f6      	bne.n	800a5ac <_printf_i+0x30>
 800a5be:	6820      	ldr	r0, [r4, #0]
 800a5c0:	6813      	ldr	r3, [r2, #0]
 800a5c2:	0605      	lsls	r5, r0, #24
 800a5c4:	f103 0104 	add.w	r1, r3, #4
 800a5c8:	d52a      	bpl.n	800a620 <_printf_i+0xa4>
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6011      	str	r1, [r2, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	da03      	bge.n	800a5da <_printf_i+0x5e>
 800a5d2:	222d      	movs	r2, #45	; 0x2d
 800a5d4:	425b      	negs	r3, r3
 800a5d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a5da:	486f      	ldr	r0, [pc, #444]	; (800a798 <_printf_i+0x21c>)
 800a5dc:	220a      	movs	r2, #10
 800a5de:	e039      	b.n	800a654 <_printf_i+0xd8>
 800a5e0:	2973      	cmp	r1, #115	; 0x73
 800a5e2:	f000 809d 	beq.w	800a720 <_printf_i+0x1a4>
 800a5e6:	d808      	bhi.n	800a5fa <_printf_i+0x7e>
 800a5e8:	296f      	cmp	r1, #111	; 0x6f
 800a5ea:	d020      	beq.n	800a62e <_printf_i+0xb2>
 800a5ec:	2970      	cmp	r1, #112	; 0x70
 800a5ee:	d1dd      	bne.n	800a5ac <_printf_i+0x30>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	f043 0320 	orr.w	r3, r3, #32
 800a5f6:	6023      	str	r3, [r4, #0]
 800a5f8:	e003      	b.n	800a602 <_printf_i+0x86>
 800a5fa:	2975      	cmp	r1, #117	; 0x75
 800a5fc:	d017      	beq.n	800a62e <_printf_i+0xb2>
 800a5fe:	2978      	cmp	r1, #120	; 0x78
 800a600:	d1d4      	bne.n	800a5ac <_printf_i+0x30>
 800a602:	2378      	movs	r3, #120	; 0x78
 800a604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a608:	4864      	ldr	r0, [pc, #400]	; (800a79c <_printf_i+0x220>)
 800a60a:	e055      	b.n	800a6b8 <_printf_i+0x13c>
 800a60c:	6813      	ldr	r3, [r2, #0]
 800a60e:	1d19      	adds	r1, r3, #4
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6011      	str	r1, [r2, #0]
 800a614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a61c:	2301      	movs	r3, #1
 800a61e:	e08c      	b.n	800a73a <_printf_i+0x1be>
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6011      	str	r1, [r2, #0]
 800a624:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a628:	bf18      	it	ne
 800a62a:	b21b      	sxthne	r3, r3
 800a62c:	e7cf      	b.n	800a5ce <_printf_i+0x52>
 800a62e:	6813      	ldr	r3, [r2, #0]
 800a630:	6825      	ldr	r5, [r4, #0]
 800a632:	1d18      	adds	r0, r3, #4
 800a634:	6010      	str	r0, [r2, #0]
 800a636:	0628      	lsls	r0, r5, #24
 800a638:	d501      	bpl.n	800a63e <_printf_i+0xc2>
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	e002      	b.n	800a644 <_printf_i+0xc8>
 800a63e:	0668      	lsls	r0, r5, #25
 800a640:	d5fb      	bpl.n	800a63a <_printf_i+0xbe>
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	4854      	ldr	r0, [pc, #336]	; (800a798 <_printf_i+0x21c>)
 800a646:	296f      	cmp	r1, #111	; 0x6f
 800a648:	bf14      	ite	ne
 800a64a:	220a      	movne	r2, #10
 800a64c:	2208      	moveq	r2, #8
 800a64e:	2100      	movs	r1, #0
 800a650:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a654:	6865      	ldr	r5, [r4, #4]
 800a656:	60a5      	str	r5, [r4, #8]
 800a658:	2d00      	cmp	r5, #0
 800a65a:	f2c0 8095 	blt.w	800a788 <_printf_i+0x20c>
 800a65e:	6821      	ldr	r1, [r4, #0]
 800a660:	f021 0104 	bic.w	r1, r1, #4
 800a664:	6021      	str	r1, [r4, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d13d      	bne.n	800a6e6 <_printf_i+0x16a>
 800a66a:	2d00      	cmp	r5, #0
 800a66c:	f040 808e 	bne.w	800a78c <_printf_i+0x210>
 800a670:	4665      	mov	r5, ip
 800a672:	2a08      	cmp	r2, #8
 800a674:	d10b      	bne.n	800a68e <_printf_i+0x112>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	07db      	lsls	r3, r3, #31
 800a67a:	d508      	bpl.n	800a68e <_printf_i+0x112>
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	6862      	ldr	r2, [r4, #4]
 800a680:	429a      	cmp	r2, r3
 800a682:	bfde      	ittt	le
 800a684:	2330      	movle	r3, #48	; 0x30
 800a686:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a68a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a68e:	ebac 0305 	sub.w	r3, ip, r5
 800a692:	6123      	str	r3, [r4, #16]
 800a694:	f8cd 8000 	str.w	r8, [sp]
 800a698:	463b      	mov	r3, r7
 800a69a:	aa03      	add	r2, sp, #12
 800a69c:	4621      	mov	r1, r4
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f7ff fef6 	bl	800a490 <_printf_common>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d14d      	bne.n	800a744 <_printf_i+0x1c8>
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ac:	b005      	add	sp, #20
 800a6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6b2:	4839      	ldr	r0, [pc, #228]	; (800a798 <_printf_i+0x21c>)
 800a6b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a6b8:	6813      	ldr	r3, [r2, #0]
 800a6ba:	6821      	ldr	r1, [r4, #0]
 800a6bc:	1d1d      	adds	r5, r3, #4
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6015      	str	r5, [r2, #0]
 800a6c2:	060a      	lsls	r2, r1, #24
 800a6c4:	d50b      	bpl.n	800a6de <_printf_i+0x162>
 800a6c6:	07ca      	lsls	r2, r1, #31
 800a6c8:	bf44      	itt	mi
 800a6ca:	f041 0120 	orrmi.w	r1, r1, #32
 800a6ce:	6021      	strmi	r1, [r4, #0]
 800a6d0:	b91b      	cbnz	r3, 800a6da <_printf_i+0x15e>
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	f022 0220 	bic.w	r2, r2, #32
 800a6d8:	6022      	str	r2, [r4, #0]
 800a6da:	2210      	movs	r2, #16
 800a6dc:	e7b7      	b.n	800a64e <_printf_i+0xd2>
 800a6de:	064d      	lsls	r5, r1, #25
 800a6e0:	bf48      	it	mi
 800a6e2:	b29b      	uxthmi	r3, r3
 800a6e4:	e7ef      	b.n	800a6c6 <_printf_i+0x14a>
 800a6e6:	4665      	mov	r5, ip
 800a6e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6ec:	fb02 3311 	mls	r3, r2, r1, r3
 800a6f0:	5cc3      	ldrb	r3, [r0, r3]
 800a6f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	d1f5      	bne.n	800a6e8 <_printf_i+0x16c>
 800a6fc:	e7b9      	b.n	800a672 <_printf_i+0xf6>
 800a6fe:	6813      	ldr	r3, [r2, #0]
 800a700:	6825      	ldr	r5, [r4, #0]
 800a702:	6961      	ldr	r1, [r4, #20]
 800a704:	1d18      	adds	r0, r3, #4
 800a706:	6010      	str	r0, [r2, #0]
 800a708:	0628      	lsls	r0, r5, #24
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	d501      	bpl.n	800a712 <_printf_i+0x196>
 800a70e:	6019      	str	r1, [r3, #0]
 800a710:	e002      	b.n	800a718 <_printf_i+0x19c>
 800a712:	066a      	lsls	r2, r5, #25
 800a714:	d5fb      	bpl.n	800a70e <_printf_i+0x192>
 800a716:	8019      	strh	r1, [r3, #0]
 800a718:	2300      	movs	r3, #0
 800a71a:	6123      	str	r3, [r4, #16]
 800a71c:	4665      	mov	r5, ip
 800a71e:	e7b9      	b.n	800a694 <_printf_i+0x118>
 800a720:	6813      	ldr	r3, [r2, #0]
 800a722:	1d19      	adds	r1, r3, #4
 800a724:	6011      	str	r1, [r2, #0]
 800a726:	681d      	ldr	r5, [r3, #0]
 800a728:	6862      	ldr	r2, [r4, #4]
 800a72a:	2100      	movs	r1, #0
 800a72c:	4628      	mov	r0, r5
 800a72e:	f7f5 fd8f 	bl	8000250 <memchr>
 800a732:	b108      	cbz	r0, 800a738 <_printf_i+0x1bc>
 800a734:	1b40      	subs	r0, r0, r5
 800a736:	6060      	str	r0, [r4, #4]
 800a738:	6863      	ldr	r3, [r4, #4]
 800a73a:	6123      	str	r3, [r4, #16]
 800a73c:	2300      	movs	r3, #0
 800a73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a742:	e7a7      	b.n	800a694 <_printf_i+0x118>
 800a744:	6923      	ldr	r3, [r4, #16]
 800a746:	462a      	mov	r2, r5
 800a748:	4639      	mov	r1, r7
 800a74a:	4630      	mov	r0, r6
 800a74c:	47c0      	blx	r8
 800a74e:	3001      	adds	r0, #1
 800a750:	d0aa      	beq.n	800a6a8 <_printf_i+0x12c>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	079b      	lsls	r3, r3, #30
 800a756:	d413      	bmi.n	800a780 <_printf_i+0x204>
 800a758:	68e0      	ldr	r0, [r4, #12]
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	4298      	cmp	r0, r3
 800a75e:	bfb8      	it	lt
 800a760:	4618      	movlt	r0, r3
 800a762:	e7a3      	b.n	800a6ac <_printf_i+0x130>
 800a764:	2301      	movs	r3, #1
 800a766:	464a      	mov	r2, r9
 800a768:	4639      	mov	r1, r7
 800a76a:	4630      	mov	r0, r6
 800a76c:	47c0      	blx	r8
 800a76e:	3001      	adds	r0, #1
 800a770:	d09a      	beq.n	800a6a8 <_printf_i+0x12c>
 800a772:	3501      	adds	r5, #1
 800a774:	68e3      	ldr	r3, [r4, #12]
 800a776:	9a03      	ldr	r2, [sp, #12]
 800a778:	1a9b      	subs	r3, r3, r2
 800a77a:	42ab      	cmp	r3, r5
 800a77c:	dcf2      	bgt.n	800a764 <_printf_i+0x1e8>
 800a77e:	e7eb      	b.n	800a758 <_printf_i+0x1dc>
 800a780:	2500      	movs	r5, #0
 800a782:	f104 0919 	add.w	r9, r4, #25
 800a786:	e7f5      	b.n	800a774 <_printf_i+0x1f8>
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1ac      	bne.n	800a6e6 <_printf_i+0x16a>
 800a78c:	7803      	ldrb	r3, [r0, #0]
 800a78e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a792:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a796:	e76c      	b.n	800a672 <_printf_i+0xf6>
 800a798:	0800c7db 	.word	0x0800c7db
 800a79c:	0800c7ec 	.word	0x0800c7ec

0800a7a0 <_sbrk_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4c06      	ldr	r4, [pc, #24]	; (800a7bc <_sbrk_r+0x1c>)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	f7f7 fcb2 	bl	8002114 <_sbrk>
 800a7b0:	1c43      	adds	r3, r0, #1
 800a7b2:	d102      	bne.n	800a7ba <_sbrk_r+0x1a>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	b103      	cbz	r3, 800a7ba <_sbrk_r+0x1a>
 800a7b8:	602b      	str	r3, [r5, #0]
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
 800a7bc:	20004e28 	.word	0x20004e28

0800a7c0 <siprintf>:
 800a7c0:	b40e      	push	{r1, r2, r3}
 800a7c2:	b500      	push	{lr}
 800a7c4:	b09c      	sub	sp, #112	; 0x70
 800a7c6:	ab1d      	add	r3, sp, #116	; 0x74
 800a7c8:	9002      	str	r0, [sp, #8]
 800a7ca:	9006      	str	r0, [sp, #24]
 800a7cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7d0:	4809      	ldr	r0, [pc, #36]	; (800a7f8 <siprintf+0x38>)
 800a7d2:	9107      	str	r1, [sp, #28]
 800a7d4:	9104      	str	r1, [sp, #16]
 800a7d6:	4909      	ldr	r1, [pc, #36]	; (800a7fc <siprintf+0x3c>)
 800a7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7dc:	9105      	str	r1, [sp, #20]
 800a7de:	6800      	ldr	r0, [r0, #0]
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	a902      	add	r1, sp, #8
 800a7e4:	f001 fc1c 	bl	800c020 <_svfiprintf_r>
 800a7e8:	9b02      	ldr	r3, [sp, #8]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	701a      	strb	r2, [r3, #0]
 800a7ee:	b01c      	add	sp, #112	; 0x70
 800a7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f4:	b003      	add	sp, #12
 800a7f6:	4770      	bx	lr
 800a7f8:	20000010 	.word	0x20000010
 800a7fc:	ffff0208 	.word	0xffff0208

0800a800 <__swbuf_r>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	460e      	mov	r6, r1
 800a804:	4614      	mov	r4, r2
 800a806:	4605      	mov	r5, r0
 800a808:	b118      	cbz	r0, 800a812 <__swbuf_r+0x12>
 800a80a:	6983      	ldr	r3, [r0, #24]
 800a80c:	b90b      	cbnz	r3, 800a812 <__swbuf_r+0x12>
 800a80e:	f000 ff87 	bl	800b720 <__sinit>
 800a812:	4b21      	ldr	r3, [pc, #132]	; (800a898 <__swbuf_r+0x98>)
 800a814:	429c      	cmp	r4, r3
 800a816:	d12a      	bne.n	800a86e <__swbuf_r+0x6e>
 800a818:	686c      	ldr	r4, [r5, #4]
 800a81a:	69a3      	ldr	r3, [r4, #24]
 800a81c:	60a3      	str	r3, [r4, #8]
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	071a      	lsls	r2, r3, #28
 800a822:	d52e      	bpl.n	800a882 <__swbuf_r+0x82>
 800a824:	6923      	ldr	r3, [r4, #16]
 800a826:	b363      	cbz	r3, 800a882 <__swbuf_r+0x82>
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	6820      	ldr	r0, [r4, #0]
 800a82c:	1ac0      	subs	r0, r0, r3
 800a82e:	6963      	ldr	r3, [r4, #20]
 800a830:	b2f6      	uxtb	r6, r6
 800a832:	4283      	cmp	r3, r0
 800a834:	4637      	mov	r7, r6
 800a836:	dc04      	bgt.n	800a842 <__swbuf_r+0x42>
 800a838:	4621      	mov	r1, r4
 800a83a:	4628      	mov	r0, r5
 800a83c:	f000 ff06 	bl	800b64c <_fflush_r>
 800a840:	bb28      	cbnz	r0, 800a88e <__swbuf_r+0x8e>
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	3b01      	subs	r3, #1
 800a846:	60a3      	str	r3, [r4, #8]
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	6022      	str	r2, [r4, #0]
 800a84e:	701e      	strb	r6, [r3, #0]
 800a850:	6963      	ldr	r3, [r4, #20]
 800a852:	3001      	adds	r0, #1
 800a854:	4283      	cmp	r3, r0
 800a856:	d004      	beq.n	800a862 <__swbuf_r+0x62>
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	07db      	lsls	r3, r3, #31
 800a85c:	d519      	bpl.n	800a892 <__swbuf_r+0x92>
 800a85e:	2e0a      	cmp	r6, #10
 800a860:	d117      	bne.n	800a892 <__swbuf_r+0x92>
 800a862:	4621      	mov	r1, r4
 800a864:	4628      	mov	r0, r5
 800a866:	f000 fef1 	bl	800b64c <_fflush_r>
 800a86a:	b190      	cbz	r0, 800a892 <__swbuf_r+0x92>
 800a86c:	e00f      	b.n	800a88e <__swbuf_r+0x8e>
 800a86e:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <__swbuf_r+0x9c>)
 800a870:	429c      	cmp	r4, r3
 800a872:	d101      	bne.n	800a878 <__swbuf_r+0x78>
 800a874:	68ac      	ldr	r4, [r5, #8]
 800a876:	e7d0      	b.n	800a81a <__swbuf_r+0x1a>
 800a878:	4b09      	ldr	r3, [pc, #36]	; (800a8a0 <__swbuf_r+0xa0>)
 800a87a:	429c      	cmp	r4, r3
 800a87c:	bf08      	it	eq
 800a87e:	68ec      	ldreq	r4, [r5, #12]
 800a880:	e7cb      	b.n	800a81a <__swbuf_r+0x1a>
 800a882:	4621      	mov	r1, r4
 800a884:	4628      	mov	r0, r5
 800a886:	f000 f80d 	bl	800a8a4 <__swsetup_r>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d0cc      	beq.n	800a828 <__swbuf_r+0x28>
 800a88e:	f04f 37ff 	mov.w	r7, #4294967295
 800a892:	4638      	mov	r0, r7
 800a894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a896:	bf00      	nop
 800a898:	0800c82c 	.word	0x0800c82c
 800a89c:	0800c84c 	.word	0x0800c84c
 800a8a0:	0800c80c 	.word	0x0800c80c

0800a8a4 <__swsetup_r>:
 800a8a4:	4b32      	ldr	r3, [pc, #200]	; (800a970 <__swsetup_r+0xcc>)
 800a8a6:	b570      	push	{r4, r5, r6, lr}
 800a8a8:	681d      	ldr	r5, [r3, #0]
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	b125      	cbz	r5, 800a8ba <__swsetup_r+0x16>
 800a8b0:	69ab      	ldr	r3, [r5, #24]
 800a8b2:	b913      	cbnz	r3, 800a8ba <__swsetup_r+0x16>
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f000 ff33 	bl	800b720 <__sinit>
 800a8ba:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <__swsetup_r+0xd0>)
 800a8bc:	429c      	cmp	r4, r3
 800a8be:	d10f      	bne.n	800a8e0 <__swsetup_r+0x3c>
 800a8c0:	686c      	ldr	r4, [r5, #4]
 800a8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	0715      	lsls	r5, r2, #28
 800a8ca:	d42c      	bmi.n	800a926 <__swsetup_r+0x82>
 800a8cc:	06d0      	lsls	r0, r2, #27
 800a8ce:	d411      	bmi.n	800a8f4 <__swsetup_r+0x50>
 800a8d0:	2209      	movs	r2, #9
 800a8d2:	6032      	str	r2, [r6, #0]
 800a8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	f04f 30ff 	mov.w	r0, #4294967295
 800a8de:	e03e      	b.n	800a95e <__swsetup_r+0xba>
 800a8e0:	4b25      	ldr	r3, [pc, #148]	; (800a978 <__swsetup_r+0xd4>)
 800a8e2:	429c      	cmp	r4, r3
 800a8e4:	d101      	bne.n	800a8ea <__swsetup_r+0x46>
 800a8e6:	68ac      	ldr	r4, [r5, #8]
 800a8e8:	e7eb      	b.n	800a8c2 <__swsetup_r+0x1e>
 800a8ea:	4b24      	ldr	r3, [pc, #144]	; (800a97c <__swsetup_r+0xd8>)
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	bf08      	it	eq
 800a8f0:	68ec      	ldreq	r4, [r5, #12]
 800a8f2:	e7e6      	b.n	800a8c2 <__swsetup_r+0x1e>
 800a8f4:	0751      	lsls	r1, r2, #29
 800a8f6:	d512      	bpl.n	800a91e <__swsetup_r+0x7a>
 800a8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8fa:	b141      	cbz	r1, 800a90e <__swsetup_r+0x6a>
 800a8fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a900:	4299      	cmp	r1, r3
 800a902:	d002      	beq.n	800a90a <__swsetup_r+0x66>
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff f927 	bl	8009b58 <_free_r>
 800a90a:	2300      	movs	r3, #0
 800a90c:	6363      	str	r3, [r4, #52]	; 0x34
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	2300      	movs	r3, #0
 800a918:	6063      	str	r3, [r4, #4]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	f043 0308 	orr.w	r3, r3, #8
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	b94b      	cbnz	r3, 800a93e <__swsetup_r+0x9a>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a934:	d003      	beq.n	800a93e <__swsetup_r+0x9a>
 800a936:	4621      	mov	r1, r4
 800a938:	4630      	mov	r0, r6
 800a93a:	f000 ffad 	bl	800b898 <__smakebuf_r>
 800a93e:	89a2      	ldrh	r2, [r4, #12]
 800a940:	f012 0301 	ands.w	r3, r2, #1
 800a944:	d00c      	beq.n	800a960 <__swsetup_r+0xbc>
 800a946:	2300      	movs	r3, #0
 800a948:	60a3      	str	r3, [r4, #8]
 800a94a:	6963      	ldr	r3, [r4, #20]
 800a94c:	425b      	negs	r3, r3
 800a94e:	61a3      	str	r3, [r4, #24]
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	b953      	cbnz	r3, 800a96a <__swsetup_r+0xc6>
 800a954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a958:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a95c:	d1ba      	bne.n	800a8d4 <__swsetup_r+0x30>
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	0792      	lsls	r2, r2, #30
 800a962:	bf58      	it	pl
 800a964:	6963      	ldrpl	r3, [r4, #20]
 800a966:	60a3      	str	r3, [r4, #8]
 800a968:	e7f2      	b.n	800a950 <__swsetup_r+0xac>
 800a96a:	2000      	movs	r0, #0
 800a96c:	e7f7      	b.n	800a95e <__swsetup_r+0xba>
 800a96e:	bf00      	nop
 800a970:	20000010 	.word	0x20000010
 800a974:	0800c82c 	.word	0x0800c82c
 800a978:	0800c84c 	.word	0x0800c84c
 800a97c:	0800c80c 	.word	0x0800c80c

0800a980 <abort>:
 800a980:	b508      	push	{r3, lr}
 800a982:	2006      	movs	r0, #6
 800a984:	f001 fc6c 	bl	800c260 <raise>
 800a988:	2001      	movs	r0, #1
 800a98a:	f7f7 fb4b 	bl	8002024 <_exit>

0800a98e <quorem>:
 800a98e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a992:	6903      	ldr	r3, [r0, #16]
 800a994:	690c      	ldr	r4, [r1, #16]
 800a996:	42a3      	cmp	r3, r4
 800a998:	4680      	mov	r8, r0
 800a99a:	f2c0 8082 	blt.w	800aaa2 <quorem+0x114>
 800a99e:	3c01      	subs	r4, #1
 800a9a0:	f101 0714 	add.w	r7, r1, #20
 800a9a4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a9a8:	f100 0614 	add.w	r6, r0, #20
 800a9ac:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a9b0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a9b4:	eb06 030c 	add.w	r3, r6, ip
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	eb07 090c 	add.w	r9, r7, ip
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	fbb0 f5f5 	udiv	r5, r0, r5
 800a9c4:	b395      	cbz	r5, 800aa2c <quorem+0x9e>
 800a9c6:	f04f 0a00 	mov.w	sl, #0
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	46b6      	mov	lr, r6
 800a9ce:	46d3      	mov	fp, sl
 800a9d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9d4:	b293      	uxth	r3, r2
 800a9d6:	fb05 a303 	mla	r3, r5, r3, sl
 800a9da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	ebab 0303 	sub.w	r3, fp, r3
 800a9e4:	0c12      	lsrs	r2, r2, #16
 800a9e6:	f8de b000 	ldr.w	fp, [lr]
 800a9ea:	fb05 a202 	mla	r2, r5, r2, sl
 800a9ee:	fa13 f38b 	uxtah	r3, r3, fp
 800a9f2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a9f6:	fa1f fb82 	uxth.w	fp, r2
 800a9fa:	f8de 2000 	ldr.w	r2, [lr]
 800a9fe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800aa02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa0c:	4581      	cmp	r9, r0
 800aa0e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800aa12:	f84e 3b04 	str.w	r3, [lr], #4
 800aa16:	d2db      	bcs.n	800a9d0 <quorem+0x42>
 800aa18:	f856 300c 	ldr.w	r3, [r6, ip]
 800aa1c:	b933      	cbnz	r3, 800aa2c <quorem+0x9e>
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	3b04      	subs	r3, #4
 800aa22:	429e      	cmp	r6, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	d330      	bcc.n	800aa8a <quorem+0xfc>
 800aa28:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	f001 f9a3 	bl	800bd78 <__mcmp>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	db25      	blt.n	800aa82 <quorem+0xf4>
 800aa36:	3501      	adds	r5, #1
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f04f 0c00 	mov.w	ip, #0
 800aa3e:	f857 2b04 	ldr.w	r2, [r7], #4
 800aa42:	f8d0 e000 	ldr.w	lr, [r0]
 800aa46:	b293      	uxth	r3, r2
 800aa48:	ebac 0303 	sub.w	r3, ip, r3
 800aa4c:	0c12      	lsrs	r2, r2, #16
 800aa4e:	fa13 f38e 	uxtah	r3, r3, lr
 800aa52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa60:	45b9      	cmp	r9, r7
 800aa62:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aa66:	f840 3b04 	str.w	r3, [r0], #4
 800aa6a:	d2e8      	bcs.n	800aa3e <quorem+0xb0>
 800aa6c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800aa70:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800aa74:	b92a      	cbnz	r2, 800aa82 <quorem+0xf4>
 800aa76:	3b04      	subs	r3, #4
 800aa78:	429e      	cmp	r6, r3
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	d30b      	bcc.n	800aa96 <quorem+0x108>
 800aa7e:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa82:	4628      	mov	r0, r5
 800aa84:	b003      	add	sp, #12
 800aa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8a:	6812      	ldr	r2, [r2, #0]
 800aa8c:	3b04      	subs	r3, #4
 800aa8e:	2a00      	cmp	r2, #0
 800aa90:	d1ca      	bne.n	800aa28 <quorem+0x9a>
 800aa92:	3c01      	subs	r4, #1
 800aa94:	e7c5      	b.n	800aa22 <quorem+0x94>
 800aa96:	6812      	ldr	r2, [r2, #0]
 800aa98:	3b04      	subs	r3, #4
 800aa9a:	2a00      	cmp	r2, #0
 800aa9c:	d1ef      	bne.n	800aa7e <quorem+0xf0>
 800aa9e:	3c01      	subs	r4, #1
 800aaa0:	e7ea      	b.n	800aa78 <quorem+0xea>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	e7ee      	b.n	800aa84 <quorem+0xf6>
	...

0800aaa8 <_dtoa_r>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	ec57 6b10 	vmov	r6, r7, d0
 800aab0:	b095      	sub	sp, #84	; 0x54
 800aab2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aab4:	9108      	str	r1, [sp, #32]
 800aab6:	4604      	mov	r4, r0
 800aab8:	920a      	str	r2, [sp, #40]	; 0x28
 800aaba:	9311      	str	r3, [sp, #68]	; 0x44
 800aabc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800aac0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800aac4:	b93d      	cbnz	r5, 800aad6 <_dtoa_r+0x2e>
 800aac6:	2010      	movs	r0, #16
 800aac8:	f7ff f82a 	bl	8009b20 <malloc>
 800aacc:	6260      	str	r0, [r4, #36]	; 0x24
 800aace:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aad2:	6005      	str	r5, [r0, #0]
 800aad4:	60c5      	str	r5, [r0, #12]
 800aad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aad8:	6819      	ldr	r1, [r3, #0]
 800aada:	b151      	cbz	r1, 800aaf2 <_dtoa_r+0x4a>
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	604a      	str	r2, [r1, #4]
 800aae0:	2301      	movs	r3, #1
 800aae2:	4093      	lsls	r3, r2
 800aae4:	608b      	str	r3, [r1, #8]
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 ff65 	bl	800b9b6 <_Bfree>
 800aaec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
 800aaf2:	1e3b      	subs	r3, r7, #0
 800aaf4:	bfb9      	ittee	lt
 800aaf6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aafa:	9303      	strlt	r3, [sp, #12]
 800aafc:	2300      	movge	r3, #0
 800aafe:	f8c8 3000 	strge.w	r3, [r8]
 800ab02:	9d03      	ldr	r5, [sp, #12]
 800ab04:	4bac      	ldr	r3, [pc, #688]	; (800adb8 <_dtoa_r+0x310>)
 800ab06:	bfbc      	itt	lt
 800ab08:	2201      	movlt	r2, #1
 800ab0a:	f8c8 2000 	strlt.w	r2, [r8]
 800ab0e:	43ab      	bics	r3, r5
 800ab10:	d11b      	bne.n	800ab4a <_dtoa_r+0xa2>
 800ab12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab14:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	b923      	cbnz	r3, 800ab28 <_dtoa_r+0x80>
 800ab1e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ab22:	2d00      	cmp	r5, #0
 800ab24:	f000 84dd 	beq.w	800b4e2 <_dtoa_r+0xa3a>
 800ab28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab2a:	b953      	cbnz	r3, 800ab42 <_dtoa_r+0x9a>
 800ab2c:	4ba3      	ldr	r3, [pc, #652]	; (800adbc <_dtoa_r+0x314>)
 800ab2e:	e020      	b.n	800ab72 <_dtoa_r+0xca>
 800ab30:	4ba3      	ldr	r3, [pc, #652]	; (800adc0 <_dtoa_r+0x318>)
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	3308      	adds	r3, #8
 800ab36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ab38:	6013      	str	r3, [r2, #0]
 800ab3a:	9804      	ldr	r0, [sp, #16]
 800ab3c:	b015      	add	sp, #84	; 0x54
 800ab3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab42:	4b9e      	ldr	r3, [pc, #632]	; (800adbc <_dtoa_r+0x314>)
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	3303      	adds	r3, #3
 800ab48:	e7f5      	b.n	800ab36 <_dtoa_r+0x8e>
 800ab4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab56:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ab5a:	d10c      	bne.n	800ab76 <_dtoa_r+0xce>
 800ab5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab5e:	2301      	movs	r3, #1
 800ab60:	6013      	str	r3, [r2, #0]
 800ab62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 84b9 	beq.w	800b4dc <_dtoa_r+0xa34>
 800ab6a:	4b96      	ldr	r3, [pc, #600]	; (800adc4 <_dtoa_r+0x31c>)
 800ab6c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	e7e1      	b.n	800ab3a <_dtoa_r+0x92>
 800ab76:	a913      	add	r1, sp, #76	; 0x4c
 800ab78:	aa12      	add	r2, sp, #72	; 0x48
 800ab7a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f001 f971 	bl	800be66 <__d2b>
 800ab84:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800ab88:	9001      	str	r0, [sp, #4]
 800ab8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ab8c:	2e00      	cmp	r6, #0
 800ab8e:	d046      	beq.n	800ac1e <_dtoa_r+0x176>
 800ab90:	9805      	ldr	r0, [sp, #20]
 800ab92:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800ab96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab9a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800ab9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aba2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800aba6:	2700      	movs	r7, #0
 800aba8:	ee07 aa90 	vmov	s15, sl
 800abac:	ec43 2b16 	vmov	d6, r2, r3
 800abb0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800abb4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800ada0 <_dtoa_r+0x2f8>
 800abb8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800abbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800abc0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ada8 <_dtoa_r+0x300>
 800abc4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800abc8:	eeb0 7b46 	vmov.f64	d7, d6
 800abcc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800adb0 <_dtoa_r+0x308>
 800abd0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800abd4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800abd8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800abdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe0:	ee16 ba90 	vmov	fp, s13
 800abe4:	d508      	bpl.n	800abf8 <_dtoa_r+0x150>
 800abe6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800abea:	eeb4 6b47 	vcmp.f64	d6, d7
 800abee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf2:	bf18      	it	ne
 800abf4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800abf8:	f1bb 0f16 	cmp.w	fp, #22
 800abfc:	d834      	bhi.n	800ac68 <_dtoa_r+0x1c0>
 800abfe:	4b72      	ldr	r3, [pc, #456]	; (800adc8 <_dtoa_r+0x320>)
 800ac00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac04:	ed93 7b00 	vldr	d7, [r3]
 800ac08:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac14:	dd01      	ble.n	800ac1a <_dtoa_r+0x172>
 800ac16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e025      	b.n	800ac6a <_dtoa_r+0x1c2>
 800ac1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac20:	eb01 0a03 	add.w	sl, r1, r3
 800ac24:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	dd17      	ble.n	800ac5c <_dtoa_r+0x1b4>
 800ac2c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ac30:	9a02      	ldr	r2, [sp, #8]
 800ac32:	409d      	lsls	r5, r3
 800ac34:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800ac38:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3c:	432b      	orrs	r3, r5
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ac46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac4e:	9805      	ldr	r0, [sp, #20]
 800ac50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac54:	2701      	movs	r7, #1
 800ac56:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800ac5a:	e7a5      	b.n	800aba8 <_dtoa_r+0x100>
 800ac5c:	9a02      	ldr	r2, [sp, #8]
 800ac5e:	f1c3 0320 	rsb	r3, r3, #32
 800ac62:	fa02 f303 	lsl.w	r3, r2, r3
 800ac66:	e7ea      	b.n	800ac3e <_dtoa_r+0x196>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	eba1 0a0a 	sub.w	sl, r1, sl
 800ac6e:	9310      	str	r3, [sp, #64]	; 0x40
 800ac70:	f1ba 0301 	subs.w	r3, sl, #1
 800ac74:	9307      	str	r3, [sp, #28]
 800ac76:	bf43      	ittte	mi
 800ac78:	2300      	movmi	r3, #0
 800ac7a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800ac7e:	9307      	strmi	r3, [sp, #28]
 800ac80:	f04f 0a00 	movpl.w	sl, #0
 800ac84:	f1bb 0f00 	cmp.w	fp, #0
 800ac88:	db19      	blt.n	800acbe <_dtoa_r+0x216>
 800ac8a:	9b07      	ldr	r3, [sp, #28]
 800ac8c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ac90:	445b      	add	r3, fp
 800ac92:	9307      	str	r3, [sp, #28]
 800ac94:	f04f 0800 	mov.w	r8, #0
 800ac98:	9b08      	ldr	r3, [sp, #32]
 800ac9a:	2b09      	cmp	r3, #9
 800ac9c:	d866      	bhi.n	800ad6c <_dtoa_r+0x2c4>
 800ac9e:	2b05      	cmp	r3, #5
 800aca0:	bfc4      	itt	gt
 800aca2:	3b04      	subgt	r3, #4
 800aca4:	9308      	strgt	r3, [sp, #32]
 800aca6:	9b08      	ldr	r3, [sp, #32]
 800aca8:	f1a3 0302 	sub.w	r3, r3, #2
 800acac:	bfcc      	ite	gt
 800acae:	2500      	movgt	r5, #0
 800acb0:	2501      	movle	r5, #1
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	d866      	bhi.n	800ad84 <_dtoa_r+0x2dc>
 800acb6:	e8df f003 	tbb	[pc, r3]
 800acba:	5755      	.short	0x5755
 800acbc:	4909      	.short	0x4909
 800acbe:	2300      	movs	r3, #0
 800acc0:	ebaa 0a0b 	sub.w	sl, sl, fp
 800acc4:	f1cb 0800 	rsb	r8, fp, #0
 800acc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800acca:	e7e5      	b.n	800ac98 <_dtoa_r+0x1f0>
 800accc:	2301      	movs	r3, #1
 800acce:	9309      	str	r3, [sp, #36]	; 0x24
 800acd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	dd59      	ble.n	800ad8a <_dtoa_r+0x2e2>
 800acd6:	9306      	str	r3, [sp, #24]
 800acd8:	4699      	mov	r9, r3
 800acda:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acdc:	2200      	movs	r2, #0
 800acde:	6072      	str	r2, [r6, #4]
 800ace0:	2204      	movs	r2, #4
 800ace2:	f102 0014 	add.w	r0, r2, #20
 800ace6:	4298      	cmp	r0, r3
 800ace8:	6871      	ldr	r1, [r6, #4]
 800acea:	d953      	bls.n	800ad94 <_dtoa_r+0x2ec>
 800acec:	4620      	mov	r0, r4
 800acee:	f000 fe2e 	bl	800b94e <_Balloc>
 800acf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acf4:	6030      	str	r0, [r6, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	f1b9 0f0e 	cmp.w	r9, #14
 800acfe:	f200 80c2 	bhi.w	800ae86 <_dtoa_r+0x3de>
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	f000 80bf 	beq.w	800ae86 <_dtoa_r+0x3de>
 800ad08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad0c:	f1bb 0f00 	cmp.w	fp, #0
 800ad10:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800ad14:	f340 80e6 	ble.w	800aee4 <_dtoa_r+0x43c>
 800ad18:	4a2b      	ldr	r2, [pc, #172]	; (800adc8 <_dtoa_r+0x320>)
 800ad1a:	f00b 030f 	and.w	r3, fp, #15
 800ad1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad22:	ed93 7b00 	vldr	d7, [r3]
 800ad26:	ea4f 132b 	mov.w	r3, fp, asr #4
 800ad2a:	06da      	lsls	r2, r3, #27
 800ad2c:	f140 80d8 	bpl.w	800aee0 <_dtoa_r+0x438>
 800ad30:	4a26      	ldr	r2, [pc, #152]	; (800adcc <_dtoa_r+0x324>)
 800ad32:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800ad36:	ed92 6b08 	vldr	d6, [r2, #32]
 800ad3a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ad3e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ad42:	f003 030f 	and.w	r3, r3, #15
 800ad46:	2203      	movs	r2, #3
 800ad48:	4920      	ldr	r1, [pc, #128]	; (800adcc <_dtoa_r+0x324>)
 800ad4a:	e04a      	b.n	800ade2 <_dtoa_r+0x33a>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	445b      	add	r3, fp
 800ad54:	f103 0901 	add.w	r9, r3, #1
 800ad58:	9306      	str	r3, [sp, #24]
 800ad5a:	464b      	mov	r3, r9
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	bfb8      	it	lt
 800ad60:	2301      	movlt	r3, #1
 800ad62:	e7ba      	b.n	800acda <_dtoa_r+0x232>
 800ad64:	2300      	movs	r3, #0
 800ad66:	e7b2      	b.n	800acce <_dtoa_r+0x226>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e7f0      	b.n	800ad4e <_dtoa_r+0x2a6>
 800ad6c:	2501      	movs	r5, #1
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800ad74:	f04f 33ff 	mov.w	r3, #4294967295
 800ad78:	9306      	str	r3, [sp, #24]
 800ad7a:	4699      	mov	r9, r3
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2312      	movs	r3, #18
 800ad80:	920a      	str	r2, [sp, #40]	; 0x28
 800ad82:	e7aa      	b.n	800acda <_dtoa_r+0x232>
 800ad84:	2301      	movs	r3, #1
 800ad86:	9309      	str	r3, [sp, #36]	; 0x24
 800ad88:	e7f4      	b.n	800ad74 <_dtoa_r+0x2cc>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	9306      	str	r3, [sp, #24]
 800ad8e:	4699      	mov	r9, r3
 800ad90:	461a      	mov	r2, r3
 800ad92:	e7f5      	b.n	800ad80 <_dtoa_r+0x2d8>
 800ad94:	3101      	adds	r1, #1
 800ad96:	6071      	str	r1, [r6, #4]
 800ad98:	0052      	lsls	r2, r2, #1
 800ad9a:	e7a2      	b.n	800ace2 <_dtoa_r+0x23a>
 800ad9c:	f3af 8000 	nop.w
 800ada0:	636f4361 	.word	0x636f4361
 800ada4:	3fd287a7 	.word	0x3fd287a7
 800ada8:	8b60c8b3 	.word	0x8b60c8b3
 800adac:	3fc68a28 	.word	0x3fc68a28
 800adb0:	509f79fb 	.word	0x509f79fb
 800adb4:	3fd34413 	.word	0x3fd34413
 800adb8:	7ff00000 	.word	0x7ff00000
 800adbc:	0800c806 	.word	0x0800c806
 800adc0:	0800c7fd 	.word	0x0800c7fd
 800adc4:	0800c7da 	.word	0x0800c7da
 800adc8:	0800c898 	.word	0x0800c898
 800adcc:	0800c870 	.word	0x0800c870
 800add0:	07de      	lsls	r6, r3, #31
 800add2:	d504      	bpl.n	800adde <_dtoa_r+0x336>
 800add4:	ed91 6b00 	vldr	d6, [r1]
 800add8:	3201      	adds	r2, #1
 800adda:	ee27 7b06 	vmul.f64	d7, d7, d6
 800adde:	105b      	asrs	r3, r3, #1
 800ade0:	3108      	adds	r1, #8
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1f4      	bne.n	800add0 <_dtoa_r+0x328>
 800ade6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800adea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800adee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800adf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 80a7 	beq.w	800af48 <_dtoa_r+0x4a0>
 800adfa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800adfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ae06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0a:	f140 809d 	bpl.w	800af48 <_dtoa_r+0x4a0>
 800ae0e:	f1b9 0f00 	cmp.w	r9, #0
 800ae12:	f000 8099 	beq.w	800af48 <_dtoa_r+0x4a0>
 800ae16:	9b06      	ldr	r3, [sp, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	dd30      	ble.n	800ae7e <_dtoa_r+0x3d6>
 800ae1c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ae20:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae28:	9d06      	ldr	r5, [sp, #24]
 800ae2a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ae2e:	3201      	adds	r2, #1
 800ae30:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae34:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ae38:	ee07 2a90 	vmov	s15, r2
 800ae3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae40:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ae44:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ae48:	9a03      	ldr	r2, [sp, #12]
 800ae4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae4e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800ae52:	2d00      	cmp	r5, #0
 800ae54:	d17b      	bne.n	800af4e <_dtoa_r+0x4a6>
 800ae56:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ae5a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ae5e:	ec41 0b17 	vmov	d7, r0, r1
 800ae62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6a:	f300 8253 	bgt.w	800b314 <_dtoa_r+0x86c>
 800ae6e:	eeb1 7b47 	vneg.f64	d7, d7
 800ae72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7a:	f100 8249 	bmi.w	800b310 <_dtoa_r+0x868>
 800ae7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ae82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f2c0 8119 	blt.w	800b0c0 <_dtoa_r+0x618>
 800ae8e:	f1bb 0f0e 	cmp.w	fp, #14
 800ae92:	f300 8115 	bgt.w	800b0c0 <_dtoa_r+0x618>
 800ae96:	4bc3      	ldr	r3, [pc, #780]	; (800b1a4 <_dtoa_r+0x6fc>)
 800ae98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae9c:	ed93 6b00 	vldr	d6, [r3]
 800aea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f280 80ba 	bge.w	800b01c <_dtoa_r+0x574>
 800aea8:	f1b9 0f00 	cmp.w	r9, #0
 800aeac:	f300 80b6 	bgt.w	800b01c <_dtoa_r+0x574>
 800aeb0:	f040 822d 	bne.w	800b30e <_dtoa_r+0x866>
 800aeb4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800aeb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aec0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec8:	464d      	mov	r5, r9
 800aeca:	464f      	mov	r7, r9
 800aecc:	f280 8204 	bge.w	800b2d8 <_dtoa_r+0x830>
 800aed0:	9b04      	ldr	r3, [sp, #16]
 800aed2:	9a04      	ldr	r2, [sp, #16]
 800aed4:	1c5e      	adds	r6, r3, #1
 800aed6:	2331      	movs	r3, #49	; 0x31
 800aed8:	7013      	strb	r3, [r2, #0]
 800aeda:	f10b 0b01 	add.w	fp, fp, #1
 800aede:	e1ff      	b.n	800b2e0 <_dtoa_r+0x838>
 800aee0:	2202      	movs	r2, #2
 800aee2:	e731      	b.n	800ad48 <_dtoa_r+0x2a0>
 800aee4:	d02e      	beq.n	800af44 <_dtoa_r+0x49c>
 800aee6:	f1cb 0300 	rsb	r3, fp, #0
 800aeea:	4aae      	ldr	r2, [pc, #696]	; (800b1a4 <_dtoa_r+0x6fc>)
 800aeec:	f003 010f 	and.w	r1, r3, #15
 800aef0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aef4:	ed92 7b00 	vldr	d7, [r2]
 800aef8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800aefc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800af00:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800af04:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800af08:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800af0c:	49a6      	ldr	r1, [pc, #664]	; (800b1a8 <_dtoa_r+0x700>)
 800af0e:	111b      	asrs	r3, r3, #4
 800af10:	2000      	movs	r0, #0
 800af12:	2202      	movs	r2, #2
 800af14:	b93b      	cbnz	r3, 800af26 <_dtoa_r+0x47e>
 800af16:	2800      	cmp	r0, #0
 800af18:	f43f af6b 	beq.w	800adf2 <_dtoa_r+0x34a>
 800af1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af24:	e765      	b.n	800adf2 <_dtoa_r+0x34a>
 800af26:	07dd      	lsls	r5, r3, #31
 800af28:	d509      	bpl.n	800af3e <_dtoa_r+0x496>
 800af2a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800af2e:	ed91 7b00 	vldr	d7, [r1]
 800af32:	ee26 7b07 	vmul.f64	d7, d6, d7
 800af36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800af3a:	3201      	adds	r2, #1
 800af3c:	2001      	movs	r0, #1
 800af3e:	105b      	asrs	r3, r3, #1
 800af40:	3108      	adds	r1, #8
 800af42:	e7e7      	b.n	800af14 <_dtoa_r+0x46c>
 800af44:	2202      	movs	r2, #2
 800af46:	e754      	b.n	800adf2 <_dtoa_r+0x34a>
 800af48:	465b      	mov	r3, fp
 800af4a:	464d      	mov	r5, r9
 800af4c:	e770      	b.n	800ae30 <_dtoa_r+0x388>
 800af4e:	4a95      	ldr	r2, [pc, #596]	; (800b1a4 <_dtoa_r+0x6fc>)
 800af50:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800af54:	ed12 4b02 	vldr	d4, [r2, #-8]
 800af58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af5a:	ec41 0b17 	vmov	d7, r0, r1
 800af5e:	b35a      	cbz	r2, 800afb8 <_dtoa_r+0x510>
 800af60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800af64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800af68:	9e04      	ldr	r6, [sp, #16]
 800af6a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800af6e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800af72:	ee35 7b47 	vsub.f64	d7, d5, d7
 800af76:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800af7a:	ee14 2a90 	vmov	r2, s9
 800af7e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800af82:	3230      	adds	r2, #48	; 0x30
 800af84:	ee36 6b45 	vsub.f64	d6, d6, d5
 800af88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af90:	f806 2b01 	strb.w	r2, [r6], #1
 800af94:	d43b      	bmi.n	800b00e <_dtoa_r+0x566>
 800af96:	ee32 5b46 	vsub.f64	d5, d2, d6
 800af9a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800af9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa2:	d472      	bmi.n	800b08a <_dtoa_r+0x5e2>
 800afa4:	9a04      	ldr	r2, [sp, #16]
 800afa6:	1ab2      	subs	r2, r6, r2
 800afa8:	4295      	cmp	r5, r2
 800afaa:	f77f af68 	ble.w	800ae7e <_dtoa_r+0x3d6>
 800afae:	ee27 7b03 	vmul.f64	d7, d7, d3
 800afb2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800afb6:	e7de      	b.n	800af76 <_dtoa_r+0x4ce>
 800afb8:	9a04      	ldr	r2, [sp, #16]
 800afba:	ee24 7b07 	vmul.f64	d7, d4, d7
 800afbe:	1956      	adds	r6, r2, r5
 800afc0:	4611      	mov	r1, r2
 800afc2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800afc6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800afca:	ee14 2a90 	vmov	r2, s9
 800afce:	3230      	adds	r2, #48	; 0x30
 800afd0:	f801 2b01 	strb.w	r2, [r1], #1
 800afd4:	42b1      	cmp	r1, r6
 800afd6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800afda:	ee36 6b45 	vsub.f64	d6, d6, d5
 800afde:	d11a      	bne.n	800b016 <_dtoa_r+0x56e>
 800afe0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800afe4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800afe8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800afec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff0:	dc4b      	bgt.n	800b08a <_dtoa_r+0x5e2>
 800aff2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aff6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800affa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800affe:	f57f af3e 	bpl.w	800ae7e <_dtoa_r+0x3d6>
 800b002:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b006:	2a30      	cmp	r2, #48	; 0x30
 800b008:	f106 31ff 	add.w	r1, r6, #4294967295
 800b00c:	d001      	beq.n	800b012 <_dtoa_r+0x56a>
 800b00e:	469b      	mov	fp, r3
 800b010:	e02a      	b.n	800b068 <_dtoa_r+0x5c0>
 800b012:	460e      	mov	r6, r1
 800b014:	e7f5      	b.n	800b002 <_dtoa_r+0x55a>
 800b016:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b01a:	e7d4      	b.n	800afc6 <_dtoa_r+0x51e>
 800b01c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b020:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b024:	9e04      	ldr	r6, [sp, #16]
 800b026:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b02a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b02e:	ee15 3a10 	vmov	r3, s10
 800b032:	3330      	adds	r3, #48	; 0x30
 800b034:	f806 3b01 	strb.w	r3, [r6], #1
 800b038:	9b04      	ldr	r3, [sp, #16]
 800b03a:	1af3      	subs	r3, r6, r3
 800b03c:	4599      	cmp	r9, r3
 800b03e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b042:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b046:	d133      	bne.n	800b0b0 <_dtoa_r+0x608>
 800b048:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b04c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b054:	dc18      	bgt.n	800b088 <_dtoa_r+0x5e0>
 800b056:	eeb4 7b46 	vcmp.f64	d7, d6
 800b05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b05e:	d103      	bne.n	800b068 <_dtoa_r+0x5c0>
 800b060:	ee15 3a10 	vmov	r3, s10
 800b064:	07db      	lsls	r3, r3, #31
 800b066:	d40f      	bmi.n	800b088 <_dtoa_r+0x5e0>
 800b068:	9901      	ldr	r1, [sp, #4]
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 fca3 	bl	800b9b6 <_Bfree>
 800b070:	2300      	movs	r3, #0
 800b072:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b074:	7033      	strb	r3, [r6, #0]
 800b076:	f10b 0301 	add.w	r3, fp, #1
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f43f ad5b 	beq.w	800ab3a <_dtoa_r+0x92>
 800b084:	601e      	str	r6, [r3, #0]
 800b086:	e558      	b.n	800ab3a <_dtoa_r+0x92>
 800b088:	465b      	mov	r3, fp
 800b08a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b08e:	2939      	cmp	r1, #57	; 0x39
 800b090:	f106 32ff 	add.w	r2, r6, #4294967295
 800b094:	d106      	bne.n	800b0a4 <_dtoa_r+0x5fc>
 800b096:	9904      	ldr	r1, [sp, #16]
 800b098:	4291      	cmp	r1, r2
 800b09a:	d107      	bne.n	800b0ac <_dtoa_r+0x604>
 800b09c:	2230      	movs	r2, #48	; 0x30
 800b09e:	700a      	strb	r2, [r1, #0]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	460a      	mov	r2, r1
 800b0a4:	7811      	ldrb	r1, [r2, #0]
 800b0a6:	3101      	adds	r1, #1
 800b0a8:	7011      	strb	r1, [r2, #0]
 800b0aa:	e7b0      	b.n	800b00e <_dtoa_r+0x566>
 800b0ac:	4616      	mov	r6, r2
 800b0ae:	e7ec      	b.n	800b08a <_dtoa_r+0x5e2>
 800b0b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b0b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0bc:	d1b3      	bne.n	800b026 <_dtoa_r+0x57e>
 800b0be:	e7d3      	b.n	800b068 <_dtoa_r+0x5c0>
 800b0c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c2:	2a00      	cmp	r2, #0
 800b0c4:	f000 808d 	beq.w	800b1e2 <_dtoa_r+0x73a>
 800b0c8:	9a08      	ldr	r2, [sp, #32]
 800b0ca:	2a01      	cmp	r2, #1
 800b0cc:	dc72      	bgt.n	800b1b4 <_dtoa_r+0x70c>
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	d06c      	beq.n	800b1ac <_dtoa_r+0x704>
 800b0d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0d6:	4645      	mov	r5, r8
 800b0d8:	4656      	mov	r6, sl
 800b0da:	9a07      	ldr	r2, [sp, #28]
 800b0dc:	2101      	movs	r1, #1
 800b0de:	441a      	add	r2, r3
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	449a      	add	sl, r3
 800b0e4:	9207      	str	r2, [sp, #28]
 800b0e6:	f000 fd06 	bl	800baf6 <__i2b>
 800b0ea:	4607      	mov	r7, r0
 800b0ec:	2e00      	cmp	r6, #0
 800b0ee:	dd0b      	ble.n	800b108 <_dtoa_r+0x660>
 800b0f0:	9b07      	ldr	r3, [sp, #28]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dd08      	ble.n	800b108 <_dtoa_r+0x660>
 800b0f6:	42b3      	cmp	r3, r6
 800b0f8:	9a07      	ldr	r2, [sp, #28]
 800b0fa:	bfa8      	it	ge
 800b0fc:	4633      	movge	r3, r6
 800b0fe:	ebaa 0a03 	sub.w	sl, sl, r3
 800b102:	1af6      	subs	r6, r6, r3
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	9307      	str	r3, [sp, #28]
 800b108:	f1b8 0f00 	cmp.w	r8, #0
 800b10c:	d01d      	beq.n	800b14a <_dtoa_r+0x6a2>
 800b10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	d06a      	beq.n	800b1ea <_dtoa_r+0x742>
 800b114:	b18d      	cbz	r5, 800b13a <_dtoa_r+0x692>
 800b116:	4639      	mov	r1, r7
 800b118:	462a      	mov	r2, r5
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fd8a 	bl	800bc34 <__pow5mult>
 800b120:	9a01      	ldr	r2, [sp, #4]
 800b122:	4601      	mov	r1, r0
 800b124:	4607      	mov	r7, r0
 800b126:	4620      	mov	r0, r4
 800b128:	f000 fcee 	bl	800bb08 <__multiply>
 800b12c:	9901      	ldr	r1, [sp, #4]
 800b12e:	900c      	str	r0, [sp, #48]	; 0x30
 800b130:	4620      	mov	r0, r4
 800b132:	f000 fc40 	bl	800b9b6 <_Bfree>
 800b136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	ebb8 0205 	subs.w	r2, r8, r5
 800b13e:	d004      	beq.n	800b14a <_dtoa_r+0x6a2>
 800b140:	9901      	ldr	r1, [sp, #4]
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fd76 	bl	800bc34 <__pow5mult>
 800b148:	9001      	str	r0, [sp, #4]
 800b14a:	2101      	movs	r1, #1
 800b14c:	4620      	mov	r0, r4
 800b14e:	f000 fcd2 	bl	800baf6 <__i2b>
 800b152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b154:	4605      	mov	r5, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 81ca 	beq.w	800b4f0 <_dtoa_r+0xa48>
 800b15c:	461a      	mov	r2, r3
 800b15e:	4601      	mov	r1, r0
 800b160:	4620      	mov	r0, r4
 800b162:	f000 fd67 	bl	800bc34 <__pow5mult>
 800b166:	9b08      	ldr	r3, [sp, #32]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	4605      	mov	r5, r0
 800b16c:	dc44      	bgt.n	800b1f8 <_dtoa_r+0x750>
 800b16e:	9b02      	ldr	r3, [sp, #8]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d13c      	bne.n	800b1ee <_dtoa_r+0x746>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d137      	bne.n	800b1ee <_dtoa_r+0x746>
 800b17e:	9b03      	ldr	r3, [sp, #12]
 800b180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b184:	0d1b      	lsrs	r3, r3, #20
 800b186:	051b      	lsls	r3, r3, #20
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d033      	beq.n	800b1f4 <_dtoa_r+0x74c>
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	3301      	adds	r3, #1
 800b190:	f10a 0a01 	add.w	sl, sl, #1
 800b194:	9307      	str	r3, [sp, #28]
 800b196:	f04f 0801 	mov.w	r8, #1
 800b19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b19c:	bb73      	cbnz	r3, 800b1fc <_dtoa_r+0x754>
 800b19e:	2001      	movs	r0, #1
 800b1a0:	e034      	b.n	800b20c <_dtoa_r+0x764>
 800b1a2:	bf00      	nop
 800b1a4:	0800c898 	.word	0x0800c898
 800b1a8:	0800c870 	.word	0x0800c870
 800b1ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1b2:	e790      	b.n	800b0d6 <_dtoa_r+0x62e>
 800b1b4:	f109 35ff 	add.w	r5, r9, #4294967295
 800b1b8:	45a8      	cmp	r8, r5
 800b1ba:	bfbf      	itttt	lt
 800b1bc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b1be:	eba5 0808 	sublt.w	r8, r5, r8
 800b1c2:	4443      	addlt	r3, r8
 800b1c4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b1c6:	bfb6      	itet	lt
 800b1c8:	46a8      	movlt	r8, r5
 800b1ca:	eba8 0505 	subge.w	r5, r8, r5
 800b1ce:	2500      	movlt	r5, #0
 800b1d0:	f1b9 0f00 	cmp.w	r9, #0
 800b1d4:	bfb9      	ittee	lt
 800b1d6:	ebaa 0609 	sublt.w	r6, sl, r9
 800b1da:	2300      	movlt	r3, #0
 800b1dc:	4656      	movge	r6, sl
 800b1de:	464b      	movge	r3, r9
 800b1e0:	e77b      	b.n	800b0da <_dtoa_r+0x632>
 800b1e2:	4645      	mov	r5, r8
 800b1e4:	4656      	mov	r6, sl
 800b1e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b1e8:	e780      	b.n	800b0ec <_dtoa_r+0x644>
 800b1ea:	4642      	mov	r2, r8
 800b1ec:	e7a8      	b.n	800b140 <_dtoa_r+0x698>
 800b1ee:	f04f 0800 	mov.w	r8, #0
 800b1f2:	e7d2      	b.n	800b19a <_dtoa_r+0x6f2>
 800b1f4:	4698      	mov	r8, r3
 800b1f6:	e7d0      	b.n	800b19a <_dtoa_r+0x6f2>
 800b1f8:	f04f 0800 	mov.w	r8, #0
 800b1fc:	692b      	ldr	r3, [r5, #16]
 800b1fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b202:	6918      	ldr	r0, [r3, #16]
 800b204:	f000 fc29 	bl	800ba5a <__hi0bits>
 800b208:	f1c0 0020 	rsb	r0, r0, #32
 800b20c:	9b07      	ldr	r3, [sp, #28]
 800b20e:	4418      	add	r0, r3
 800b210:	f010 001f 	ands.w	r0, r0, #31
 800b214:	d047      	beq.n	800b2a6 <_dtoa_r+0x7fe>
 800b216:	f1c0 0320 	rsb	r3, r0, #32
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	dd3b      	ble.n	800b296 <_dtoa_r+0x7ee>
 800b21e:	9b07      	ldr	r3, [sp, #28]
 800b220:	f1c0 001c 	rsb	r0, r0, #28
 800b224:	4482      	add	sl, r0
 800b226:	4406      	add	r6, r0
 800b228:	4403      	add	r3, r0
 800b22a:	9307      	str	r3, [sp, #28]
 800b22c:	f1ba 0f00 	cmp.w	sl, #0
 800b230:	dd05      	ble.n	800b23e <_dtoa_r+0x796>
 800b232:	4652      	mov	r2, sl
 800b234:	9901      	ldr	r1, [sp, #4]
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fd4a 	bl	800bcd0 <__lshift>
 800b23c:	9001      	str	r0, [sp, #4]
 800b23e:	9b07      	ldr	r3, [sp, #28]
 800b240:	2b00      	cmp	r3, #0
 800b242:	dd05      	ble.n	800b250 <_dtoa_r+0x7a8>
 800b244:	4629      	mov	r1, r5
 800b246:	461a      	mov	r2, r3
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 fd41 	bl	800bcd0 <__lshift>
 800b24e:	4605      	mov	r5, r0
 800b250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b252:	b353      	cbz	r3, 800b2aa <_dtoa_r+0x802>
 800b254:	4629      	mov	r1, r5
 800b256:	9801      	ldr	r0, [sp, #4]
 800b258:	f000 fd8e 	bl	800bd78 <__mcmp>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	da24      	bge.n	800b2aa <_dtoa_r+0x802>
 800b260:	2300      	movs	r3, #0
 800b262:	220a      	movs	r2, #10
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	4620      	mov	r0, r4
 800b268:	f000 fbbc 	bl	800b9e4 <__multadd>
 800b26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26e:	9001      	str	r0, [sp, #4]
 800b270:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 8142 	beq.w	800b4fe <_dtoa_r+0xa56>
 800b27a:	2300      	movs	r3, #0
 800b27c:	4639      	mov	r1, r7
 800b27e:	220a      	movs	r2, #10
 800b280:	4620      	mov	r0, r4
 800b282:	f000 fbaf 	bl	800b9e4 <__multadd>
 800b286:	9b06      	ldr	r3, [sp, #24]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	4607      	mov	r7, r0
 800b28c:	dc4b      	bgt.n	800b326 <_dtoa_r+0x87e>
 800b28e:	9b08      	ldr	r3, [sp, #32]
 800b290:	2b02      	cmp	r3, #2
 800b292:	dd48      	ble.n	800b326 <_dtoa_r+0x87e>
 800b294:	e011      	b.n	800b2ba <_dtoa_r+0x812>
 800b296:	d0c9      	beq.n	800b22c <_dtoa_r+0x784>
 800b298:	9a07      	ldr	r2, [sp, #28]
 800b29a:	331c      	adds	r3, #28
 800b29c:	441a      	add	r2, r3
 800b29e:	449a      	add	sl, r3
 800b2a0:	441e      	add	r6, r3
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	e7c1      	b.n	800b22a <_dtoa_r+0x782>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	e7f6      	b.n	800b298 <_dtoa_r+0x7f0>
 800b2aa:	f1b9 0f00 	cmp.w	r9, #0
 800b2ae:	dc34      	bgt.n	800b31a <_dtoa_r+0x872>
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	dd31      	ble.n	800b31a <_dtoa_r+0x872>
 800b2b6:	f8cd 9018 	str.w	r9, [sp, #24]
 800b2ba:	9b06      	ldr	r3, [sp, #24]
 800b2bc:	b963      	cbnz	r3, 800b2d8 <_dtoa_r+0x830>
 800b2be:	4629      	mov	r1, r5
 800b2c0:	2205      	movs	r2, #5
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 fb8e 	bl	800b9e4 <__multadd>
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	9801      	ldr	r0, [sp, #4]
 800b2ce:	f000 fd53 	bl	800bd78 <__mcmp>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	f73f adfc 	bgt.w	800aed0 <_dtoa_r+0x428>
 800b2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2da:	9e04      	ldr	r6, [sp, #16]
 800b2dc:	ea6f 0b03 	mvn.w	fp, r3
 800b2e0:	f04f 0900 	mov.w	r9, #0
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f000 fb65 	bl	800b9b6 <_Bfree>
 800b2ec:	2f00      	cmp	r7, #0
 800b2ee:	f43f aebb 	beq.w	800b068 <_dtoa_r+0x5c0>
 800b2f2:	f1b9 0f00 	cmp.w	r9, #0
 800b2f6:	d005      	beq.n	800b304 <_dtoa_r+0x85c>
 800b2f8:	45b9      	cmp	r9, r7
 800b2fa:	d003      	beq.n	800b304 <_dtoa_r+0x85c>
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	4620      	mov	r0, r4
 800b300:	f000 fb59 	bl	800b9b6 <_Bfree>
 800b304:	4639      	mov	r1, r7
 800b306:	4620      	mov	r0, r4
 800b308:	f000 fb55 	bl	800b9b6 <_Bfree>
 800b30c:	e6ac      	b.n	800b068 <_dtoa_r+0x5c0>
 800b30e:	2500      	movs	r5, #0
 800b310:	462f      	mov	r7, r5
 800b312:	e7e1      	b.n	800b2d8 <_dtoa_r+0x830>
 800b314:	469b      	mov	fp, r3
 800b316:	462f      	mov	r7, r5
 800b318:	e5da      	b.n	800aed0 <_dtoa_r+0x428>
 800b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31c:	f8cd 9018 	str.w	r9, [sp, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 80f3 	beq.w	800b50c <_dtoa_r+0xa64>
 800b326:	2e00      	cmp	r6, #0
 800b328:	dd05      	ble.n	800b336 <_dtoa_r+0x88e>
 800b32a:	4639      	mov	r1, r7
 800b32c:	4632      	mov	r2, r6
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 fcce 	bl	800bcd0 <__lshift>
 800b334:	4607      	mov	r7, r0
 800b336:	f1b8 0f00 	cmp.w	r8, #0
 800b33a:	d04c      	beq.n	800b3d6 <_dtoa_r+0x92e>
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 fb05 	bl	800b94e <_Balloc>
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	3202      	adds	r2, #2
 800b348:	4606      	mov	r6, r0
 800b34a:	0092      	lsls	r2, r2, #2
 800b34c:	f107 010c 	add.w	r1, r7, #12
 800b350:	300c      	adds	r0, #12
 800b352:	f7fe fbed 	bl	8009b30 <memcpy>
 800b356:	2201      	movs	r2, #1
 800b358:	4631      	mov	r1, r6
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fcb8 	bl	800bcd0 <__lshift>
 800b360:	9b02      	ldr	r3, [sp, #8]
 800b362:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	46b9      	mov	r9, r7
 800b36c:	9307      	str	r3, [sp, #28]
 800b36e:	4607      	mov	r7, r0
 800b370:	4629      	mov	r1, r5
 800b372:	9801      	ldr	r0, [sp, #4]
 800b374:	f7ff fb0b 	bl	800a98e <quorem>
 800b378:	4649      	mov	r1, r9
 800b37a:	4606      	mov	r6, r0
 800b37c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b380:	9801      	ldr	r0, [sp, #4]
 800b382:	f000 fcf9 	bl	800bd78 <__mcmp>
 800b386:	463a      	mov	r2, r7
 800b388:	9002      	str	r0, [sp, #8]
 800b38a:	4629      	mov	r1, r5
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 fd0d 	bl	800bdac <__mdiff>
 800b392:	68c3      	ldr	r3, [r0, #12]
 800b394:	4602      	mov	r2, r0
 800b396:	bb03      	cbnz	r3, 800b3da <_dtoa_r+0x932>
 800b398:	4601      	mov	r1, r0
 800b39a:	9009      	str	r0, [sp, #36]	; 0x24
 800b39c:	9801      	ldr	r0, [sp, #4]
 800b39e:	f000 fceb 	bl	800bd78 <__mcmp>
 800b3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ac:	f000 fb03 	bl	800b9b6 <_Bfree>
 800b3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b2:	b9a3      	cbnz	r3, 800b3de <_dtoa_r+0x936>
 800b3b4:	9a08      	ldr	r2, [sp, #32]
 800b3b6:	b992      	cbnz	r2, 800b3de <_dtoa_r+0x936>
 800b3b8:	9a07      	ldr	r2, [sp, #28]
 800b3ba:	b982      	cbnz	r2, 800b3de <_dtoa_r+0x936>
 800b3bc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b3c0:	d029      	beq.n	800b416 <_dtoa_r+0x96e>
 800b3c2:	9b02      	ldr	r3, [sp, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	dd01      	ble.n	800b3cc <_dtoa_r+0x924>
 800b3c8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800b3cc:	f10a 0601 	add.w	r6, sl, #1
 800b3d0:	f88a 8000 	strb.w	r8, [sl]
 800b3d4:	e786      	b.n	800b2e4 <_dtoa_r+0x83c>
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	e7c2      	b.n	800b360 <_dtoa_r+0x8b8>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e7e3      	b.n	800b3a6 <_dtoa_r+0x8fe>
 800b3de:	9a02      	ldr	r2, [sp, #8]
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	db04      	blt.n	800b3ee <_dtoa_r+0x946>
 800b3e4:	d124      	bne.n	800b430 <_dtoa_r+0x988>
 800b3e6:	9a08      	ldr	r2, [sp, #32]
 800b3e8:	bb12      	cbnz	r2, 800b430 <_dtoa_r+0x988>
 800b3ea:	9a07      	ldr	r2, [sp, #28]
 800b3ec:	bb02      	cbnz	r2, 800b430 <_dtoa_r+0x988>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	ddec      	ble.n	800b3cc <_dtoa_r+0x924>
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	9901      	ldr	r1, [sp, #4]
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f000 fc6a 	bl	800bcd0 <__lshift>
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	9001      	str	r0, [sp, #4]
 800b400:	f000 fcba 	bl	800bd78 <__mcmp>
 800b404:	2800      	cmp	r0, #0
 800b406:	dc03      	bgt.n	800b410 <_dtoa_r+0x968>
 800b408:	d1e0      	bne.n	800b3cc <_dtoa_r+0x924>
 800b40a:	f018 0f01 	tst.w	r8, #1
 800b40e:	d0dd      	beq.n	800b3cc <_dtoa_r+0x924>
 800b410:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b414:	d1d8      	bne.n	800b3c8 <_dtoa_r+0x920>
 800b416:	2339      	movs	r3, #57	; 0x39
 800b418:	f10a 0601 	add.w	r6, sl, #1
 800b41c:	f88a 3000 	strb.w	r3, [sl]
 800b420:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b424:	2b39      	cmp	r3, #57	; 0x39
 800b426:	f106 32ff 	add.w	r2, r6, #4294967295
 800b42a:	d04c      	beq.n	800b4c6 <_dtoa_r+0xa1e>
 800b42c:	3301      	adds	r3, #1
 800b42e:	e051      	b.n	800b4d4 <_dtoa_r+0xa2c>
 800b430:	2b00      	cmp	r3, #0
 800b432:	f10a 0601 	add.w	r6, sl, #1
 800b436:	dd05      	ble.n	800b444 <_dtoa_r+0x99c>
 800b438:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b43c:	d0eb      	beq.n	800b416 <_dtoa_r+0x96e>
 800b43e:	f108 0801 	add.w	r8, r8, #1
 800b442:	e7c5      	b.n	800b3d0 <_dtoa_r+0x928>
 800b444:	9b04      	ldr	r3, [sp, #16]
 800b446:	9a06      	ldr	r2, [sp, #24]
 800b448:	f806 8c01 	strb.w	r8, [r6, #-1]
 800b44c:	1af3      	subs	r3, r6, r3
 800b44e:	4293      	cmp	r3, r2
 800b450:	d021      	beq.n	800b496 <_dtoa_r+0x9ee>
 800b452:	2300      	movs	r3, #0
 800b454:	220a      	movs	r2, #10
 800b456:	9901      	ldr	r1, [sp, #4]
 800b458:	4620      	mov	r0, r4
 800b45a:	f000 fac3 	bl	800b9e4 <__multadd>
 800b45e:	45b9      	cmp	r9, r7
 800b460:	9001      	str	r0, [sp, #4]
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	f04f 020a 	mov.w	r2, #10
 800b46a:	4649      	mov	r1, r9
 800b46c:	4620      	mov	r0, r4
 800b46e:	d105      	bne.n	800b47c <_dtoa_r+0x9d4>
 800b470:	f000 fab8 	bl	800b9e4 <__multadd>
 800b474:	4681      	mov	r9, r0
 800b476:	4607      	mov	r7, r0
 800b478:	46b2      	mov	sl, r6
 800b47a:	e779      	b.n	800b370 <_dtoa_r+0x8c8>
 800b47c:	f000 fab2 	bl	800b9e4 <__multadd>
 800b480:	4639      	mov	r1, r7
 800b482:	4681      	mov	r9, r0
 800b484:	2300      	movs	r3, #0
 800b486:	220a      	movs	r2, #10
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 faab 	bl	800b9e4 <__multadd>
 800b48e:	4607      	mov	r7, r0
 800b490:	e7f2      	b.n	800b478 <_dtoa_r+0x9d0>
 800b492:	f04f 0900 	mov.w	r9, #0
 800b496:	2201      	movs	r2, #1
 800b498:	9901      	ldr	r1, [sp, #4]
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 fc18 	bl	800bcd0 <__lshift>
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	9001      	str	r0, [sp, #4]
 800b4a4:	f000 fc68 	bl	800bd78 <__mcmp>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	dcb9      	bgt.n	800b420 <_dtoa_r+0x978>
 800b4ac:	d102      	bne.n	800b4b4 <_dtoa_r+0xa0c>
 800b4ae:	f018 0f01 	tst.w	r8, #1
 800b4b2:	d1b5      	bne.n	800b420 <_dtoa_r+0x978>
 800b4b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4b8:	2b30      	cmp	r3, #48	; 0x30
 800b4ba:	f106 32ff 	add.w	r2, r6, #4294967295
 800b4be:	f47f af11 	bne.w	800b2e4 <_dtoa_r+0x83c>
 800b4c2:	4616      	mov	r6, r2
 800b4c4:	e7f6      	b.n	800b4b4 <_dtoa_r+0xa0c>
 800b4c6:	9b04      	ldr	r3, [sp, #16]
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d105      	bne.n	800b4d8 <_dtoa_r+0xa30>
 800b4cc:	9a04      	ldr	r2, [sp, #16]
 800b4ce:	f10b 0b01 	add.w	fp, fp, #1
 800b4d2:	2331      	movs	r3, #49	; 0x31
 800b4d4:	7013      	strb	r3, [r2, #0]
 800b4d6:	e705      	b.n	800b2e4 <_dtoa_r+0x83c>
 800b4d8:	4616      	mov	r6, r2
 800b4da:	e7a1      	b.n	800b420 <_dtoa_r+0x978>
 800b4dc:	4b16      	ldr	r3, [pc, #88]	; (800b538 <_dtoa_r+0xa90>)
 800b4de:	f7ff bb48 	b.w	800ab72 <_dtoa_r+0xca>
 800b4e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f47f ab23 	bne.w	800ab30 <_dtoa_r+0x88>
 800b4ea:	4b14      	ldr	r3, [pc, #80]	; (800b53c <_dtoa_r+0xa94>)
 800b4ec:	f7ff bb41 	b.w	800ab72 <_dtoa_r+0xca>
 800b4f0:	9b08      	ldr	r3, [sp, #32]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	f77f ae3b 	ble.w	800b16e <_dtoa_r+0x6c6>
 800b4f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b4fc:	e64f      	b.n	800b19e <_dtoa_r+0x6f6>
 800b4fe:	9b06      	ldr	r3, [sp, #24]
 800b500:	2b00      	cmp	r3, #0
 800b502:	dc03      	bgt.n	800b50c <_dtoa_r+0xa64>
 800b504:	9b08      	ldr	r3, [sp, #32]
 800b506:	2b02      	cmp	r3, #2
 800b508:	f73f aed7 	bgt.w	800b2ba <_dtoa_r+0x812>
 800b50c:	9e04      	ldr	r6, [sp, #16]
 800b50e:	9801      	ldr	r0, [sp, #4]
 800b510:	4629      	mov	r1, r5
 800b512:	f7ff fa3c 	bl	800a98e <quorem>
 800b516:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b51a:	f806 8b01 	strb.w	r8, [r6], #1
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	9a06      	ldr	r2, [sp, #24]
 800b522:	1af3      	subs	r3, r6, r3
 800b524:	429a      	cmp	r2, r3
 800b526:	ddb4      	ble.n	800b492 <_dtoa_r+0x9ea>
 800b528:	2300      	movs	r3, #0
 800b52a:	220a      	movs	r2, #10
 800b52c:	9901      	ldr	r1, [sp, #4]
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 fa58 	bl	800b9e4 <__multadd>
 800b534:	9001      	str	r0, [sp, #4]
 800b536:	e7ea      	b.n	800b50e <_dtoa_r+0xa66>
 800b538:	0800c7d9 	.word	0x0800c7d9
 800b53c:	0800c7fd 	.word	0x0800c7fd

0800b540 <__sflush_r>:
 800b540:	898a      	ldrh	r2, [r1, #12]
 800b542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b546:	4605      	mov	r5, r0
 800b548:	0710      	lsls	r0, r2, #28
 800b54a:	460c      	mov	r4, r1
 800b54c:	d458      	bmi.n	800b600 <__sflush_r+0xc0>
 800b54e:	684b      	ldr	r3, [r1, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	dc05      	bgt.n	800b560 <__sflush_r+0x20>
 800b554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b556:	2b00      	cmp	r3, #0
 800b558:	dc02      	bgt.n	800b560 <__sflush_r+0x20>
 800b55a:	2000      	movs	r0, #0
 800b55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b562:	2e00      	cmp	r6, #0
 800b564:	d0f9      	beq.n	800b55a <__sflush_r+0x1a>
 800b566:	2300      	movs	r3, #0
 800b568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b56c:	682f      	ldr	r7, [r5, #0]
 800b56e:	6a21      	ldr	r1, [r4, #32]
 800b570:	602b      	str	r3, [r5, #0]
 800b572:	d032      	beq.n	800b5da <__sflush_r+0x9a>
 800b574:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	075a      	lsls	r2, r3, #29
 800b57a:	d505      	bpl.n	800b588 <__sflush_r+0x48>
 800b57c:	6863      	ldr	r3, [r4, #4]
 800b57e:	1ac0      	subs	r0, r0, r3
 800b580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b582:	b10b      	cbz	r3, 800b588 <__sflush_r+0x48>
 800b584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b586:	1ac0      	subs	r0, r0, r3
 800b588:	2300      	movs	r3, #0
 800b58a:	4602      	mov	r2, r0
 800b58c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b58e:	6a21      	ldr	r1, [r4, #32]
 800b590:	4628      	mov	r0, r5
 800b592:	47b0      	blx	r6
 800b594:	1c43      	adds	r3, r0, #1
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	d106      	bne.n	800b5a8 <__sflush_r+0x68>
 800b59a:	6829      	ldr	r1, [r5, #0]
 800b59c:	291d      	cmp	r1, #29
 800b59e:	d848      	bhi.n	800b632 <__sflush_r+0xf2>
 800b5a0:	4a29      	ldr	r2, [pc, #164]	; (800b648 <__sflush_r+0x108>)
 800b5a2:	40ca      	lsrs	r2, r1
 800b5a4:	07d6      	lsls	r6, r2, #31
 800b5a6:	d544      	bpl.n	800b632 <__sflush_r+0xf2>
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	6062      	str	r2, [r4, #4]
 800b5ac:	04d9      	lsls	r1, r3, #19
 800b5ae:	6922      	ldr	r2, [r4, #16]
 800b5b0:	6022      	str	r2, [r4, #0]
 800b5b2:	d504      	bpl.n	800b5be <__sflush_r+0x7e>
 800b5b4:	1c42      	adds	r2, r0, #1
 800b5b6:	d101      	bne.n	800b5bc <__sflush_r+0x7c>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b903      	cbnz	r3, 800b5be <__sflush_r+0x7e>
 800b5bc:	6560      	str	r0, [r4, #84]	; 0x54
 800b5be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5c0:	602f      	str	r7, [r5, #0]
 800b5c2:	2900      	cmp	r1, #0
 800b5c4:	d0c9      	beq.n	800b55a <__sflush_r+0x1a>
 800b5c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ca:	4299      	cmp	r1, r3
 800b5cc:	d002      	beq.n	800b5d4 <__sflush_r+0x94>
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f7fe fac2 	bl	8009b58 <_free_r>
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	6360      	str	r0, [r4, #52]	; 0x34
 800b5d8:	e7c0      	b.n	800b55c <__sflush_r+0x1c>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b0      	blx	r6
 800b5e0:	1c41      	adds	r1, r0, #1
 800b5e2:	d1c8      	bne.n	800b576 <__sflush_r+0x36>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d0c5      	beq.n	800b576 <__sflush_r+0x36>
 800b5ea:	2b1d      	cmp	r3, #29
 800b5ec:	d001      	beq.n	800b5f2 <__sflush_r+0xb2>
 800b5ee:	2b16      	cmp	r3, #22
 800b5f0:	d101      	bne.n	800b5f6 <__sflush_r+0xb6>
 800b5f2:	602f      	str	r7, [r5, #0]
 800b5f4:	e7b1      	b.n	800b55a <__sflush_r+0x1a>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	e7ad      	b.n	800b55c <__sflush_r+0x1c>
 800b600:	690f      	ldr	r7, [r1, #16]
 800b602:	2f00      	cmp	r7, #0
 800b604:	d0a9      	beq.n	800b55a <__sflush_r+0x1a>
 800b606:	0793      	lsls	r3, r2, #30
 800b608:	680e      	ldr	r6, [r1, #0]
 800b60a:	bf08      	it	eq
 800b60c:	694b      	ldreq	r3, [r1, #20]
 800b60e:	600f      	str	r7, [r1, #0]
 800b610:	bf18      	it	ne
 800b612:	2300      	movne	r3, #0
 800b614:	eba6 0807 	sub.w	r8, r6, r7
 800b618:	608b      	str	r3, [r1, #8]
 800b61a:	f1b8 0f00 	cmp.w	r8, #0
 800b61e:	dd9c      	ble.n	800b55a <__sflush_r+0x1a>
 800b620:	4643      	mov	r3, r8
 800b622:	463a      	mov	r2, r7
 800b624:	6a21      	ldr	r1, [r4, #32]
 800b626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b628:	4628      	mov	r0, r5
 800b62a:	47b0      	blx	r6
 800b62c:	2800      	cmp	r0, #0
 800b62e:	dc06      	bgt.n	800b63e <__sflush_r+0xfe>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b636:	81a3      	strh	r3, [r4, #12]
 800b638:	f04f 30ff 	mov.w	r0, #4294967295
 800b63c:	e78e      	b.n	800b55c <__sflush_r+0x1c>
 800b63e:	4407      	add	r7, r0
 800b640:	eba8 0800 	sub.w	r8, r8, r0
 800b644:	e7e9      	b.n	800b61a <__sflush_r+0xda>
 800b646:	bf00      	nop
 800b648:	20400001 	.word	0x20400001

0800b64c <_fflush_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	690b      	ldr	r3, [r1, #16]
 800b650:	4605      	mov	r5, r0
 800b652:	460c      	mov	r4, r1
 800b654:	b1db      	cbz	r3, 800b68e <_fflush_r+0x42>
 800b656:	b118      	cbz	r0, 800b660 <_fflush_r+0x14>
 800b658:	6983      	ldr	r3, [r0, #24]
 800b65a:	b90b      	cbnz	r3, 800b660 <_fflush_r+0x14>
 800b65c:	f000 f860 	bl	800b720 <__sinit>
 800b660:	4b0c      	ldr	r3, [pc, #48]	; (800b694 <_fflush_r+0x48>)
 800b662:	429c      	cmp	r4, r3
 800b664:	d109      	bne.n	800b67a <_fflush_r+0x2e>
 800b666:	686c      	ldr	r4, [r5, #4]
 800b668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b66c:	b17b      	cbz	r3, 800b68e <_fflush_r+0x42>
 800b66e:	4621      	mov	r1, r4
 800b670:	4628      	mov	r0, r5
 800b672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b676:	f7ff bf63 	b.w	800b540 <__sflush_r>
 800b67a:	4b07      	ldr	r3, [pc, #28]	; (800b698 <_fflush_r+0x4c>)
 800b67c:	429c      	cmp	r4, r3
 800b67e:	d101      	bne.n	800b684 <_fflush_r+0x38>
 800b680:	68ac      	ldr	r4, [r5, #8]
 800b682:	e7f1      	b.n	800b668 <_fflush_r+0x1c>
 800b684:	4b05      	ldr	r3, [pc, #20]	; (800b69c <_fflush_r+0x50>)
 800b686:	429c      	cmp	r4, r3
 800b688:	bf08      	it	eq
 800b68a:	68ec      	ldreq	r4, [r5, #12]
 800b68c:	e7ec      	b.n	800b668 <_fflush_r+0x1c>
 800b68e:	2000      	movs	r0, #0
 800b690:	bd38      	pop	{r3, r4, r5, pc}
 800b692:	bf00      	nop
 800b694:	0800c82c 	.word	0x0800c82c
 800b698:	0800c84c 	.word	0x0800c84c
 800b69c:	0800c80c 	.word	0x0800c80c

0800b6a0 <std>:
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b6aa:	6083      	str	r3, [r0, #8]
 800b6ac:	8181      	strh	r1, [r0, #12]
 800b6ae:	6643      	str	r3, [r0, #100]	; 0x64
 800b6b0:	81c2      	strh	r2, [r0, #14]
 800b6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6b6:	6183      	str	r3, [r0, #24]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	2208      	movs	r2, #8
 800b6bc:	305c      	adds	r0, #92	; 0x5c
 800b6be:	f7fe fa42 	bl	8009b46 <memset>
 800b6c2:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <std+0x38>)
 800b6c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <std+0x3c>)
 800b6c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6ca:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <std+0x40>)
 800b6cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6ce:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <std+0x44>)
 800b6d0:	6224      	str	r4, [r4, #32]
 800b6d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	bf00      	nop
 800b6d8:	0800c299 	.word	0x0800c299
 800b6dc:	0800c2bb 	.word	0x0800c2bb
 800b6e0:	0800c2f3 	.word	0x0800c2f3
 800b6e4:	0800c317 	.word	0x0800c317

0800b6e8 <_cleanup_r>:
 800b6e8:	4901      	ldr	r1, [pc, #4]	; (800b6f0 <_cleanup_r+0x8>)
 800b6ea:	f000 b885 	b.w	800b7f8 <_fwalk_reent>
 800b6ee:	bf00      	nop
 800b6f0:	0800b64d 	.word	0x0800b64d

0800b6f4 <__sfmoreglue>:
 800b6f4:	b570      	push	{r4, r5, r6, lr}
 800b6f6:	1e4a      	subs	r2, r1, #1
 800b6f8:	2568      	movs	r5, #104	; 0x68
 800b6fa:	4355      	muls	r5, r2
 800b6fc:	460e      	mov	r6, r1
 800b6fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b702:	f7fe fa77 	bl	8009bf4 <_malloc_r>
 800b706:	4604      	mov	r4, r0
 800b708:	b140      	cbz	r0, 800b71c <__sfmoreglue+0x28>
 800b70a:	2100      	movs	r1, #0
 800b70c:	e9c0 1600 	strd	r1, r6, [r0]
 800b710:	300c      	adds	r0, #12
 800b712:	60a0      	str	r0, [r4, #8]
 800b714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b718:	f7fe fa15 	bl	8009b46 <memset>
 800b71c:	4620      	mov	r0, r4
 800b71e:	bd70      	pop	{r4, r5, r6, pc}

0800b720 <__sinit>:
 800b720:	6983      	ldr	r3, [r0, #24]
 800b722:	b510      	push	{r4, lr}
 800b724:	4604      	mov	r4, r0
 800b726:	bb33      	cbnz	r3, 800b776 <__sinit+0x56>
 800b728:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b72c:	6503      	str	r3, [r0, #80]	; 0x50
 800b72e:	4b12      	ldr	r3, [pc, #72]	; (800b778 <__sinit+0x58>)
 800b730:	4a12      	ldr	r2, [pc, #72]	; (800b77c <__sinit+0x5c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6282      	str	r2, [r0, #40]	; 0x28
 800b736:	4298      	cmp	r0, r3
 800b738:	bf04      	itt	eq
 800b73a:	2301      	moveq	r3, #1
 800b73c:	6183      	streq	r3, [r0, #24]
 800b73e:	f000 f81f 	bl	800b780 <__sfp>
 800b742:	6060      	str	r0, [r4, #4]
 800b744:	4620      	mov	r0, r4
 800b746:	f000 f81b 	bl	800b780 <__sfp>
 800b74a:	60a0      	str	r0, [r4, #8]
 800b74c:	4620      	mov	r0, r4
 800b74e:	f000 f817 	bl	800b780 <__sfp>
 800b752:	2200      	movs	r2, #0
 800b754:	60e0      	str	r0, [r4, #12]
 800b756:	2104      	movs	r1, #4
 800b758:	6860      	ldr	r0, [r4, #4]
 800b75a:	f7ff ffa1 	bl	800b6a0 <std>
 800b75e:	2201      	movs	r2, #1
 800b760:	2109      	movs	r1, #9
 800b762:	68a0      	ldr	r0, [r4, #8]
 800b764:	f7ff ff9c 	bl	800b6a0 <std>
 800b768:	2202      	movs	r2, #2
 800b76a:	2112      	movs	r1, #18
 800b76c:	68e0      	ldr	r0, [r4, #12]
 800b76e:	f7ff ff97 	bl	800b6a0 <std>
 800b772:	2301      	movs	r3, #1
 800b774:	61a3      	str	r3, [r4, #24]
 800b776:	bd10      	pop	{r4, pc}
 800b778:	0800c7b4 	.word	0x0800c7b4
 800b77c:	0800b6e9 	.word	0x0800b6e9

0800b780 <__sfp>:
 800b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <__sfp+0x70>)
 800b784:	681e      	ldr	r6, [r3, #0]
 800b786:	69b3      	ldr	r3, [r6, #24]
 800b788:	4607      	mov	r7, r0
 800b78a:	b913      	cbnz	r3, 800b792 <__sfp+0x12>
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7ff ffc7 	bl	800b720 <__sinit>
 800b792:	3648      	adds	r6, #72	; 0x48
 800b794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b798:	3b01      	subs	r3, #1
 800b79a:	d503      	bpl.n	800b7a4 <__sfp+0x24>
 800b79c:	6833      	ldr	r3, [r6, #0]
 800b79e:	b133      	cbz	r3, 800b7ae <__sfp+0x2e>
 800b7a0:	6836      	ldr	r6, [r6, #0]
 800b7a2:	e7f7      	b.n	800b794 <__sfp+0x14>
 800b7a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7a8:	b16d      	cbz	r5, 800b7c6 <__sfp+0x46>
 800b7aa:	3468      	adds	r4, #104	; 0x68
 800b7ac:	e7f4      	b.n	800b798 <__sfp+0x18>
 800b7ae:	2104      	movs	r1, #4
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f7ff ff9f 	bl	800b6f4 <__sfmoreglue>
 800b7b6:	6030      	str	r0, [r6, #0]
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d1f1      	bne.n	800b7a0 <__sfp+0x20>
 800b7bc:	230c      	movs	r3, #12
 800b7be:	603b      	str	r3, [r7, #0]
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c6:	4b0b      	ldr	r3, [pc, #44]	; (800b7f4 <__sfp+0x74>)
 800b7c8:	6665      	str	r5, [r4, #100]	; 0x64
 800b7ca:	e9c4 5500 	strd	r5, r5, [r4]
 800b7ce:	60a5      	str	r5, [r4, #8]
 800b7d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b7d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b7d8:	2208      	movs	r2, #8
 800b7da:	4629      	mov	r1, r5
 800b7dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7e0:	f7fe f9b1 	bl	8009b46 <memset>
 800b7e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7ec:	e7e9      	b.n	800b7c2 <__sfp+0x42>
 800b7ee:	bf00      	nop
 800b7f0:	0800c7b4 	.word	0x0800c7b4
 800b7f4:	ffff0001 	.word	0xffff0001

0800b7f8 <_fwalk_reent>:
 800b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	4689      	mov	r9, r1
 800b800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b804:	2600      	movs	r6, #0
 800b806:	b914      	cbnz	r4, 800b80e <_fwalk_reent+0x16>
 800b808:	4630      	mov	r0, r6
 800b80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b812:	3f01      	subs	r7, #1
 800b814:	d501      	bpl.n	800b81a <_fwalk_reent+0x22>
 800b816:	6824      	ldr	r4, [r4, #0]
 800b818:	e7f5      	b.n	800b806 <_fwalk_reent+0xe>
 800b81a:	89ab      	ldrh	r3, [r5, #12]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d907      	bls.n	800b830 <_fwalk_reent+0x38>
 800b820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b824:	3301      	adds	r3, #1
 800b826:	d003      	beq.n	800b830 <_fwalk_reent+0x38>
 800b828:	4629      	mov	r1, r5
 800b82a:	4640      	mov	r0, r8
 800b82c:	47c8      	blx	r9
 800b82e:	4306      	orrs	r6, r0
 800b830:	3568      	adds	r5, #104	; 0x68
 800b832:	e7ee      	b.n	800b812 <_fwalk_reent+0x1a>

0800b834 <_localeconv_r>:
 800b834:	4b04      	ldr	r3, [pc, #16]	; (800b848 <_localeconv_r+0x14>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6a18      	ldr	r0, [r3, #32]
 800b83a:	4b04      	ldr	r3, [pc, #16]	; (800b84c <_localeconv_r+0x18>)
 800b83c:	2800      	cmp	r0, #0
 800b83e:	bf08      	it	eq
 800b840:	4618      	moveq	r0, r3
 800b842:	30f0      	adds	r0, #240	; 0xf0
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	20000010 	.word	0x20000010
 800b84c:	20000074 	.word	0x20000074

0800b850 <__swhatbuf_r>:
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	460e      	mov	r6, r1
 800b854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b858:	2900      	cmp	r1, #0
 800b85a:	b096      	sub	sp, #88	; 0x58
 800b85c:	4614      	mov	r4, r2
 800b85e:	461d      	mov	r5, r3
 800b860:	da07      	bge.n	800b872 <__swhatbuf_r+0x22>
 800b862:	2300      	movs	r3, #0
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	89b3      	ldrh	r3, [r6, #12]
 800b868:	061a      	lsls	r2, r3, #24
 800b86a:	d410      	bmi.n	800b88e <__swhatbuf_r+0x3e>
 800b86c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b870:	e00e      	b.n	800b890 <__swhatbuf_r+0x40>
 800b872:	466a      	mov	r2, sp
 800b874:	f000 fd76 	bl	800c364 <_fstat_r>
 800b878:	2800      	cmp	r0, #0
 800b87a:	dbf2      	blt.n	800b862 <__swhatbuf_r+0x12>
 800b87c:	9a01      	ldr	r2, [sp, #4]
 800b87e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b886:	425a      	negs	r2, r3
 800b888:	415a      	adcs	r2, r3
 800b88a:	602a      	str	r2, [r5, #0]
 800b88c:	e7ee      	b.n	800b86c <__swhatbuf_r+0x1c>
 800b88e:	2340      	movs	r3, #64	; 0x40
 800b890:	2000      	movs	r0, #0
 800b892:	6023      	str	r3, [r4, #0]
 800b894:	b016      	add	sp, #88	; 0x58
 800b896:	bd70      	pop	{r4, r5, r6, pc}

0800b898 <__smakebuf_r>:
 800b898:	898b      	ldrh	r3, [r1, #12]
 800b89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b89c:	079d      	lsls	r5, r3, #30
 800b89e:	4606      	mov	r6, r0
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	d507      	bpl.n	800b8b4 <__smakebuf_r+0x1c>
 800b8a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	6123      	str	r3, [r4, #16]
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	6163      	str	r3, [r4, #20]
 800b8b0:	b002      	add	sp, #8
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}
 800b8b4:	ab01      	add	r3, sp, #4
 800b8b6:	466a      	mov	r2, sp
 800b8b8:	f7ff ffca 	bl	800b850 <__swhatbuf_r>
 800b8bc:	9900      	ldr	r1, [sp, #0]
 800b8be:	4605      	mov	r5, r0
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f7fe f997 	bl	8009bf4 <_malloc_r>
 800b8c6:	b948      	cbnz	r0, 800b8dc <__smakebuf_r+0x44>
 800b8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8cc:	059a      	lsls	r2, r3, #22
 800b8ce:	d4ef      	bmi.n	800b8b0 <__smakebuf_r+0x18>
 800b8d0:	f023 0303 	bic.w	r3, r3, #3
 800b8d4:	f043 0302 	orr.w	r3, r3, #2
 800b8d8:	81a3      	strh	r3, [r4, #12]
 800b8da:	e7e3      	b.n	800b8a4 <__smakebuf_r+0xc>
 800b8dc:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <__smakebuf_r+0x7c>)
 800b8de:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	6020      	str	r0, [r4, #0]
 800b8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e8:	81a3      	strh	r3, [r4, #12]
 800b8ea:	9b00      	ldr	r3, [sp, #0]
 800b8ec:	6163      	str	r3, [r4, #20]
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	6120      	str	r0, [r4, #16]
 800b8f2:	b15b      	cbz	r3, 800b90c <__smakebuf_r+0x74>
 800b8f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f000 fd45 	bl	800c388 <_isatty_r>
 800b8fe:	b128      	cbz	r0, 800b90c <__smakebuf_r+0x74>
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	f023 0303 	bic.w	r3, r3, #3
 800b906:	f043 0301 	orr.w	r3, r3, #1
 800b90a:	81a3      	strh	r3, [r4, #12]
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	431d      	orrs	r5, r3
 800b910:	81a5      	strh	r5, [r4, #12]
 800b912:	e7cd      	b.n	800b8b0 <__smakebuf_r+0x18>
 800b914:	0800b6e9 	.word	0x0800b6e9

0800b918 <memmove>:
 800b918:	4288      	cmp	r0, r1
 800b91a:	b510      	push	{r4, lr}
 800b91c:	eb01 0302 	add.w	r3, r1, r2
 800b920:	d807      	bhi.n	800b932 <memmove+0x1a>
 800b922:	1e42      	subs	r2, r0, #1
 800b924:	4299      	cmp	r1, r3
 800b926:	d00a      	beq.n	800b93e <memmove+0x26>
 800b928:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b930:	e7f8      	b.n	800b924 <memmove+0xc>
 800b932:	4283      	cmp	r3, r0
 800b934:	d9f5      	bls.n	800b922 <memmove+0xa>
 800b936:	1881      	adds	r1, r0, r2
 800b938:	1ad2      	subs	r2, r2, r3
 800b93a:	42d3      	cmn	r3, r2
 800b93c:	d100      	bne.n	800b940 <memmove+0x28>
 800b93e:	bd10      	pop	{r4, pc}
 800b940:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b944:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b948:	e7f7      	b.n	800b93a <memmove+0x22>

0800b94a <__malloc_lock>:
 800b94a:	4770      	bx	lr

0800b94c <__malloc_unlock>:
 800b94c:	4770      	bx	lr

0800b94e <_Balloc>:
 800b94e:	b570      	push	{r4, r5, r6, lr}
 800b950:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b952:	4604      	mov	r4, r0
 800b954:	460e      	mov	r6, r1
 800b956:	b93d      	cbnz	r5, 800b968 <_Balloc+0x1a>
 800b958:	2010      	movs	r0, #16
 800b95a:	f7fe f8e1 	bl	8009b20 <malloc>
 800b95e:	6260      	str	r0, [r4, #36]	; 0x24
 800b960:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b964:	6005      	str	r5, [r0, #0]
 800b966:	60c5      	str	r5, [r0, #12]
 800b968:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b96a:	68eb      	ldr	r3, [r5, #12]
 800b96c:	b183      	cbz	r3, 800b990 <_Balloc+0x42>
 800b96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b976:	b9b8      	cbnz	r0, 800b9a8 <_Balloc+0x5a>
 800b978:	2101      	movs	r1, #1
 800b97a:	fa01 f506 	lsl.w	r5, r1, r6
 800b97e:	1d6a      	adds	r2, r5, #5
 800b980:	0092      	lsls	r2, r2, #2
 800b982:	4620      	mov	r0, r4
 800b984:	f000 fabe 	bl	800bf04 <_calloc_r>
 800b988:	b160      	cbz	r0, 800b9a4 <_Balloc+0x56>
 800b98a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b98e:	e00e      	b.n	800b9ae <_Balloc+0x60>
 800b990:	2221      	movs	r2, #33	; 0x21
 800b992:	2104      	movs	r1, #4
 800b994:	4620      	mov	r0, r4
 800b996:	f000 fab5 	bl	800bf04 <_calloc_r>
 800b99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b99c:	60e8      	str	r0, [r5, #12]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e4      	bne.n	800b96e <_Balloc+0x20>
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}
 800b9a8:	6802      	ldr	r2, [r0, #0]
 800b9aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9b4:	e7f7      	b.n	800b9a6 <_Balloc+0x58>

0800b9b6 <_Bfree>:
 800b9b6:	b570      	push	{r4, r5, r6, lr}
 800b9b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	460d      	mov	r5, r1
 800b9be:	b93c      	cbnz	r4, 800b9d0 <_Bfree+0x1a>
 800b9c0:	2010      	movs	r0, #16
 800b9c2:	f7fe f8ad 	bl	8009b20 <malloc>
 800b9c6:	6270      	str	r0, [r6, #36]	; 0x24
 800b9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9cc:	6004      	str	r4, [r0, #0]
 800b9ce:	60c4      	str	r4, [r0, #12]
 800b9d0:	b13d      	cbz	r5, 800b9e2 <_Bfree+0x2c>
 800b9d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b9d4:	686a      	ldr	r2, [r5, #4]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9dc:	6029      	str	r1, [r5, #0]
 800b9de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}

0800b9e4 <__multadd>:
 800b9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e8:	690d      	ldr	r5, [r1, #16]
 800b9ea:	461f      	mov	r7, r3
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	f101 0c14 	add.w	ip, r1, #20
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f8dc 0000 	ldr.w	r0, [ip]
 800b9fa:	b281      	uxth	r1, r0
 800b9fc:	fb02 7101 	mla	r1, r2, r1, r7
 800ba00:	0c0f      	lsrs	r7, r1, #16
 800ba02:	0c00      	lsrs	r0, r0, #16
 800ba04:	fb02 7000 	mla	r0, r2, r0, r7
 800ba08:	b289      	uxth	r1, r1
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ba10:	429d      	cmp	r5, r3
 800ba12:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ba16:	f84c 1b04 	str.w	r1, [ip], #4
 800ba1a:	dcec      	bgt.n	800b9f6 <__multadd+0x12>
 800ba1c:	b1d7      	cbz	r7, 800ba54 <__multadd+0x70>
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	dc12      	bgt.n	800ba4a <__multadd+0x66>
 800ba24:	6861      	ldr	r1, [r4, #4]
 800ba26:	4630      	mov	r0, r6
 800ba28:	3101      	adds	r1, #1
 800ba2a:	f7ff ff90 	bl	800b94e <_Balloc>
 800ba2e:	6922      	ldr	r2, [r4, #16]
 800ba30:	3202      	adds	r2, #2
 800ba32:	f104 010c 	add.w	r1, r4, #12
 800ba36:	4680      	mov	r8, r0
 800ba38:	0092      	lsls	r2, r2, #2
 800ba3a:	300c      	adds	r0, #12
 800ba3c:	f7fe f878 	bl	8009b30 <memcpy>
 800ba40:	4621      	mov	r1, r4
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7ff ffb7 	bl	800b9b6 <_Bfree>
 800ba48:	4644      	mov	r4, r8
 800ba4a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba4e:	3501      	adds	r5, #1
 800ba50:	615f      	str	r7, [r3, #20]
 800ba52:	6125      	str	r5, [r4, #16]
 800ba54:	4620      	mov	r0, r4
 800ba56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba5a <__hi0bits>:
 800ba5a:	0c02      	lsrs	r2, r0, #16
 800ba5c:	0412      	lsls	r2, r2, #16
 800ba5e:	4603      	mov	r3, r0
 800ba60:	b9b2      	cbnz	r2, 800ba90 <__hi0bits+0x36>
 800ba62:	0403      	lsls	r3, r0, #16
 800ba64:	2010      	movs	r0, #16
 800ba66:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba6a:	bf04      	itt	eq
 800ba6c:	021b      	lsleq	r3, r3, #8
 800ba6e:	3008      	addeq	r0, #8
 800ba70:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba74:	bf04      	itt	eq
 800ba76:	011b      	lsleq	r3, r3, #4
 800ba78:	3004      	addeq	r0, #4
 800ba7a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba7e:	bf04      	itt	eq
 800ba80:	009b      	lsleq	r3, r3, #2
 800ba82:	3002      	addeq	r0, #2
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	db06      	blt.n	800ba96 <__hi0bits+0x3c>
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	d503      	bpl.n	800ba94 <__hi0bits+0x3a>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	4770      	bx	lr
 800ba90:	2000      	movs	r0, #0
 800ba92:	e7e8      	b.n	800ba66 <__hi0bits+0xc>
 800ba94:	2020      	movs	r0, #32
 800ba96:	4770      	bx	lr

0800ba98 <__lo0bits>:
 800ba98:	6803      	ldr	r3, [r0, #0]
 800ba9a:	f013 0207 	ands.w	r2, r3, #7
 800ba9e:	4601      	mov	r1, r0
 800baa0:	d00b      	beq.n	800baba <__lo0bits+0x22>
 800baa2:	07da      	lsls	r2, r3, #31
 800baa4:	d423      	bmi.n	800baee <__lo0bits+0x56>
 800baa6:	0798      	lsls	r0, r3, #30
 800baa8:	bf49      	itett	mi
 800baaa:	085b      	lsrmi	r3, r3, #1
 800baac:	089b      	lsrpl	r3, r3, #2
 800baae:	2001      	movmi	r0, #1
 800bab0:	600b      	strmi	r3, [r1, #0]
 800bab2:	bf5c      	itt	pl
 800bab4:	600b      	strpl	r3, [r1, #0]
 800bab6:	2002      	movpl	r0, #2
 800bab8:	4770      	bx	lr
 800baba:	b298      	uxth	r0, r3
 800babc:	b9a8      	cbnz	r0, 800baea <__lo0bits+0x52>
 800babe:	0c1b      	lsrs	r3, r3, #16
 800bac0:	2010      	movs	r0, #16
 800bac2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bac6:	bf04      	itt	eq
 800bac8:	0a1b      	lsreq	r3, r3, #8
 800baca:	3008      	addeq	r0, #8
 800bacc:	071a      	lsls	r2, r3, #28
 800bace:	bf04      	itt	eq
 800bad0:	091b      	lsreq	r3, r3, #4
 800bad2:	3004      	addeq	r0, #4
 800bad4:	079a      	lsls	r2, r3, #30
 800bad6:	bf04      	itt	eq
 800bad8:	089b      	lsreq	r3, r3, #2
 800bada:	3002      	addeq	r0, #2
 800badc:	07da      	lsls	r2, r3, #31
 800bade:	d402      	bmi.n	800bae6 <__lo0bits+0x4e>
 800bae0:	085b      	lsrs	r3, r3, #1
 800bae2:	d006      	beq.n	800baf2 <__lo0bits+0x5a>
 800bae4:	3001      	adds	r0, #1
 800bae6:	600b      	str	r3, [r1, #0]
 800bae8:	4770      	bx	lr
 800baea:	4610      	mov	r0, r2
 800baec:	e7e9      	b.n	800bac2 <__lo0bits+0x2a>
 800baee:	2000      	movs	r0, #0
 800baf0:	4770      	bx	lr
 800baf2:	2020      	movs	r0, #32
 800baf4:	4770      	bx	lr

0800baf6 <__i2b>:
 800baf6:	b510      	push	{r4, lr}
 800baf8:	460c      	mov	r4, r1
 800bafa:	2101      	movs	r1, #1
 800bafc:	f7ff ff27 	bl	800b94e <_Balloc>
 800bb00:	2201      	movs	r2, #1
 800bb02:	6144      	str	r4, [r0, #20]
 800bb04:	6102      	str	r2, [r0, #16]
 800bb06:	bd10      	pop	{r4, pc}

0800bb08 <__multiply>:
 800bb08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	690a      	ldr	r2, [r1, #16]
 800bb10:	6923      	ldr	r3, [r4, #16]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	bfb8      	it	lt
 800bb16:	460b      	movlt	r3, r1
 800bb18:	4688      	mov	r8, r1
 800bb1a:	bfbc      	itt	lt
 800bb1c:	46a0      	movlt	r8, r4
 800bb1e:	461c      	movlt	r4, r3
 800bb20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bb28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb30:	eb07 0609 	add.w	r6, r7, r9
 800bb34:	42b3      	cmp	r3, r6
 800bb36:	bfb8      	it	lt
 800bb38:	3101      	addlt	r1, #1
 800bb3a:	f7ff ff08 	bl	800b94e <_Balloc>
 800bb3e:	f100 0514 	add.w	r5, r0, #20
 800bb42:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bb46:	462b      	mov	r3, r5
 800bb48:	2200      	movs	r2, #0
 800bb4a:	4573      	cmp	r3, lr
 800bb4c:	d316      	bcc.n	800bb7c <__multiply+0x74>
 800bb4e:	f104 0214 	add.w	r2, r4, #20
 800bb52:	f108 0114 	add.w	r1, r8, #20
 800bb56:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bb5a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	9b00      	ldr	r3, [sp, #0]
 800bb62:	9201      	str	r2, [sp, #4]
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d80c      	bhi.n	800bb82 <__multiply+0x7a>
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	dd03      	ble.n	800bb74 <__multiply+0x6c>
 800bb6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d05d      	beq.n	800bc30 <__multiply+0x128>
 800bb74:	6106      	str	r6, [r0, #16]
 800bb76:	b003      	add	sp, #12
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	f843 2b04 	str.w	r2, [r3], #4
 800bb80:	e7e3      	b.n	800bb4a <__multiply+0x42>
 800bb82:	f8b2 b000 	ldrh.w	fp, [r2]
 800bb86:	f1bb 0f00 	cmp.w	fp, #0
 800bb8a:	d023      	beq.n	800bbd4 <__multiply+0xcc>
 800bb8c:	4689      	mov	r9, r1
 800bb8e:	46ac      	mov	ip, r5
 800bb90:	f04f 0800 	mov.w	r8, #0
 800bb94:	f859 4b04 	ldr.w	r4, [r9], #4
 800bb98:	f8dc a000 	ldr.w	sl, [ip]
 800bb9c:	b2a3      	uxth	r3, r4
 800bb9e:	fa1f fa8a 	uxth.w	sl, sl
 800bba2:	fb0b a303 	mla	r3, fp, r3, sl
 800bba6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bbaa:	f8dc 4000 	ldr.w	r4, [ip]
 800bbae:	4443      	add	r3, r8
 800bbb0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bbb4:	fb0b 840a 	mla	r4, fp, sl, r8
 800bbb8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bbbc:	46e2      	mov	sl, ip
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bbc4:	454f      	cmp	r7, r9
 800bbc6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bbca:	f84a 3b04 	str.w	r3, [sl], #4
 800bbce:	d82b      	bhi.n	800bc28 <__multiply+0x120>
 800bbd0:	f8cc 8004 	str.w	r8, [ip, #4]
 800bbd4:	9b01      	ldr	r3, [sp, #4]
 800bbd6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bbda:	3204      	adds	r2, #4
 800bbdc:	f1ba 0f00 	cmp.w	sl, #0
 800bbe0:	d020      	beq.n	800bc24 <__multiply+0x11c>
 800bbe2:	682b      	ldr	r3, [r5, #0]
 800bbe4:	4689      	mov	r9, r1
 800bbe6:	46a8      	mov	r8, r5
 800bbe8:	f04f 0b00 	mov.w	fp, #0
 800bbec:	f8b9 c000 	ldrh.w	ip, [r9]
 800bbf0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bbf4:	fb0a 440c 	mla	r4, sl, ip, r4
 800bbf8:	445c      	add	r4, fp
 800bbfa:	46c4      	mov	ip, r8
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bc02:	f84c 3b04 	str.w	r3, [ip], #4
 800bc06:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc0a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bc0e:	0c1b      	lsrs	r3, r3, #16
 800bc10:	fb0a b303 	mla	r3, sl, r3, fp
 800bc14:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bc18:	454f      	cmp	r7, r9
 800bc1a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bc1e:	d805      	bhi.n	800bc2c <__multiply+0x124>
 800bc20:	f8c8 3004 	str.w	r3, [r8, #4]
 800bc24:	3504      	adds	r5, #4
 800bc26:	e79b      	b.n	800bb60 <__multiply+0x58>
 800bc28:	46d4      	mov	ip, sl
 800bc2a:	e7b3      	b.n	800bb94 <__multiply+0x8c>
 800bc2c:	46e0      	mov	r8, ip
 800bc2e:	e7dd      	b.n	800bbec <__multiply+0xe4>
 800bc30:	3e01      	subs	r6, #1
 800bc32:	e799      	b.n	800bb68 <__multiply+0x60>

0800bc34 <__pow5mult>:
 800bc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc38:	4615      	mov	r5, r2
 800bc3a:	f012 0203 	ands.w	r2, r2, #3
 800bc3e:	4606      	mov	r6, r0
 800bc40:	460f      	mov	r7, r1
 800bc42:	d007      	beq.n	800bc54 <__pow5mult+0x20>
 800bc44:	3a01      	subs	r2, #1
 800bc46:	4c21      	ldr	r4, [pc, #132]	; (800bccc <__pow5mult+0x98>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc4e:	f7ff fec9 	bl	800b9e4 <__multadd>
 800bc52:	4607      	mov	r7, r0
 800bc54:	10ad      	asrs	r5, r5, #2
 800bc56:	d035      	beq.n	800bcc4 <__pow5mult+0x90>
 800bc58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc5a:	b93c      	cbnz	r4, 800bc6c <__pow5mult+0x38>
 800bc5c:	2010      	movs	r0, #16
 800bc5e:	f7fd ff5f 	bl	8009b20 <malloc>
 800bc62:	6270      	str	r0, [r6, #36]	; 0x24
 800bc64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc68:	6004      	str	r4, [r0, #0]
 800bc6a:	60c4      	str	r4, [r0, #12]
 800bc6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc74:	b94c      	cbnz	r4, 800bc8a <__pow5mult+0x56>
 800bc76:	f240 2171 	movw	r1, #625	; 0x271
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f7ff ff3b 	bl	800baf6 <__i2b>
 800bc80:	2300      	movs	r3, #0
 800bc82:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc86:	4604      	mov	r4, r0
 800bc88:	6003      	str	r3, [r0, #0]
 800bc8a:	f04f 0800 	mov.w	r8, #0
 800bc8e:	07eb      	lsls	r3, r5, #31
 800bc90:	d50a      	bpl.n	800bca8 <__pow5mult+0x74>
 800bc92:	4639      	mov	r1, r7
 800bc94:	4622      	mov	r2, r4
 800bc96:	4630      	mov	r0, r6
 800bc98:	f7ff ff36 	bl	800bb08 <__multiply>
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	4681      	mov	r9, r0
 800bca0:	4630      	mov	r0, r6
 800bca2:	f7ff fe88 	bl	800b9b6 <_Bfree>
 800bca6:	464f      	mov	r7, r9
 800bca8:	106d      	asrs	r5, r5, #1
 800bcaa:	d00b      	beq.n	800bcc4 <__pow5mult+0x90>
 800bcac:	6820      	ldr	r0, [r4, #0]
 800bcae:	b938      	cbnz	r0, 800bcc0 <__pow5mult+0x8c>
 800bcb0:	4622      	mov	r2, r4
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff ff27 	bl	800bb08 <__multiply>
 800bcba:	6020      	str	r0, [r4, #0]
 800bcbc:	f8c0 8000 	str.w	r8, [r0]
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	e7e4      	b.n	800bc8e <__pow5mult+0x5a>
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcca:	bf00      	nop
 800bccc:	0800c960 	.word	0x0800c960

0800bcd0 <__lshift>:
 800bcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcda:	6923      	ldr	r3, [r4, #16]
 800bcdc:	6849      	ldr	r1, [r1, #4]
 800bcde:	eb0a 0903 	add.w	r9, sl, r3
 800bce2:	68a3      	ldr	r3, [r4, #8]
 800bce4:	4607      	mov	r7, r0
 800bce6:	4616      	mov	r6, r2
 800bce8:	f109 0501 	add.w	r5, r9, #1
 800bcec:	42ab      	cmp	r3, r5
 800bcee:	db32      	blt.n	800bd56 <__lshift+0x86>
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f7ff fe2c 	bl	800b94e <_Balloc>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	4680      	mov	r8, r0
 800bcfa:	f100 0114 	add.w	r1, r0, #20
 800bcfe:	461a      	mov	r2, r3
 800bd00:	4553      	cmp	r3, sl
 800bd02:	db2b      	blt.n	800bd5c <__lshift+0x8c>
 800bd04:	6920      	ldr	r0, [r4, #16]
 800bd06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd0a:	f104 0314 	add.w	r3, r4, #20
 800bd0e:	f016 021f 	ands.w	r2, r6, #31
 800bd12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd1a:	d025      	beq.n	800bd68 <__lshift+0x98>
 800bd1c:	f1c2 0e20 	rsb	lr, r2, #32
 800bd20:	2000      	movs	r0, #0
 800bd22:	681e      	ldr	r6, [r3, #0]
 800bd24:	468a      	mov	sl, r1
 800bd26:	4096      	lsls	r6, r2
 800bd28:	4330      	orrs	r0, r6
 800bd2a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd2e:	f853 0b04 	ldr.w	r0, [r3], #4
 800bd32:	459c      	cmp	ip, r3
 800bd34:	fa20 f00e 	lsr.w	r0, r0, lr
 800bd38:	d814      	bhi.n	800bd64 <__lshift+0x94>
 800bd3a:	6048      	str	r0, [r1, #4]
 800bd3c:	b108      	cbz	r0, 800bd42 <__lshift+0x72>
 800bd3e:	f109 0502 	add.w	r5, r9, #2
 800bd42:	3d01      	subs	r5, #1
 800bd44:	4638      	mov	r0, r7
 800bd46:	f8c8 5010 	str.w	r5, [r8, #16]
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	f7ff fe33 	bl	800b9b6 <_Bfree>
 800bd50:	4640      	mov	r0, r8
 800bd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd56:	3101      	adds	r1, #1
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	e7c7      	b.n	800bcec <__lshift+0x1c>
 800bd5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bd60:	3301      	adds	r3, #1
 800bd62:	e7cd      	b.n	800bd00 <__lshift+0x30>
 800bd64:	4651      	mov	r1, sl
 800bd66:	e7dc      	b.n	800bd22 <__lshift+0x52>
 800bd68:	3904      	subs	r1, #4
 800bd6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd6e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd72:	459c      	cmp	ip, r3
 800bd74:	d8f9      	bhi.n	800bd6a <__lshift+0x9a>
 800bd76:	e7e4      	b.n	800bd42 <__lshift+0x72>

0800bd78 <__mcmp>:
 800bd78:	6903      	ldr	r3, [r0, #16]
 800bd7a:	690a      	ldr	r2, [r1, #16]
 800bd7c:	1a9b      	subs	r3, r3, r2
 800bd7e:	b530      	push	{r4, r5, lr}
 800bd80:	d10c      	bne.n	800bd9c <__mcmp+0x24>
 800bd82:	0092      	lsls	r2, r2, #2
 800bd84:	3014      	adds	r0, #20
 800bd86:	3114      	adds	r1, #20
 800bd88:	1884      	adds	r4, r0, r2
 800bd8a:	4411      	add	r1, r2
 800bd8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd94:	4295      	cmp	r5, r2
 800bd96:	d003      	beq.n	800bda0 <__mcmp+0x28>
 800bd98:	d305      	bcc.n	800bda6 <__mcmp+0x2e>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	bd30      	pop	{r4, r5, pc}
 800bda0:	42a0      	cmp	r0, r4
 800bda2:	d3f3      	bcc.n	800bd8c <__mcmp+0x14>
 800bda4:	e7fa      	b.n	800bd9c <__mcmp+0x24>
 800bda6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdaa:	e7f7      	b.n	800bd9c <__mcmp+0x24>

0800bdac <__mdiff>:
 800bdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb0:	460d      	mov	r5, r1
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	4614      	mov	r4, r2
 800bdba:	f7ff ffdd 	bl	800bd78 <__mcmp>
 800bdbe:	1e06      	subs	r6, r0, #0
 800bdc0:	d108      	bne.n	800bdd4 <__mdiff+0x28>
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f7ff fdc2 	bl	800b94e <_Balloc>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd4:	bfa4      	itt	ge
 800bdd6:	4623      	movge	r3, r4
 800bdd8:	462c      	movge	r4, r5
 800bdda:	4638      	mov	r0, r7
 800bddc:	6861      	ldr	r1, [r4, #4]
 800bdde:	bfa6      	itte	ge
 800bde0:	461d      	movge	r5, r3
 800bde2:	2600      	movge	r6, #0
 800bde4:	2601      	movlt	r6, #1
 800bde6:	f7ff fdb2 	bl	800b94e <_Balloc>
 800bdea:	692b      	ldr	r3, [r5, #16]
 800bdec:	60c6      	str	r6, [r0, #12]
 800bdee:	6926      	ldr	r6, [r4, #16]
 800bdf0:	f105 0914 	add.w	r9, r5, #20
 800bdf4:	f104 0214 	add.w	r2, r4, #20
 800bdf8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bdfc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800be00:	f100 0514 	add.w	r5, r0, #20
 800be04:	f04f 0e00 	mov.w	lr, #0
 800be08:	f852 ab04 	ldr.w	sl, [r2], #4
 800be0c:	f859 4b04 	ldr.w	r4, [r9], #4
 800be10:	fa1e f18a 	uxtah	r1, lr, sl
 800be14:	b2a3      	uxth	r3, r4
 800be16:	1ac9      	subs	r1, r1, r3
 800be18:	0c23      	lsrs	r3, r4, #16
 800be1a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800be1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800be22:	b289      	uxth	r1, r1
 800be24:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800be28:	45c8      	cmp	r8, r9
 800be2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800be2e:	4694      	mov	ip, r2
 800be30:	f845 3b04 	str.w	r3, [r5], #4
 800be34:	d8e8      	bhi.n	800be08 <__mdiff+0x5c>
 800be36:	45bc      	cmp	ip, r7
 800be38:	d304      	bcc.n	800be44 <__mdiff+0x98>
 800be3a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800be3e:	b183      	cbz	r3, 800be62 <__mdiff+0xb6>
 800be40:	6106      	str	r6, [r0, #16]
 800be42:	e7c5      	b.n	800bdd0 <__mdiff+0x24>
 800be44:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be48:	fa1e f381 	uxtah	r3, lr, r1
 800be4c:	141a      	asrs	r2, r3, #16
 800be4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be52:	b29b      	uxth	r3, r3
 800be54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be58:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800be5c:	f845 3b04 	str.w	r3, [r5], #4
 800be60:	e7e9      	b.n	800be36 <__mdiff+0x8a>
 800be62:	3e01      	subs	r6, #1
 800be64:	e7e9      	b.n	800be3a <__mdiff+0x8e>

0800be66 <__d2b>:
 800be66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be6a:	460e      	mov	r6, r1
 800be6c:	2101      	movs	r1, #1
 800be6e:	ec59 8b10 	vmov	r8, r9, d0
 800be72:	4615      	mov	r5, r2
 800be74:	f7ff fd6b 	bl	800b94e <_Balloc>
 800be78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800be7c:	4607      	mov	r7, r0
 800be7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be82:	bb34      	cbnz	r4, 800bed2 <__d2b+0x6c>
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	f1b8 0300 	subs.w	r3, r8, #0
 800be8a:	d027      	beq.n	800bedc <__d2b+0x76>
 800be8c:	a802      	add	r0, sp, #8
 800be8e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800be92:	f7ff fe01 	bl	800ba98 <__lo0bits>
 800be96:	9900      	ldr	r1, [sp, #0]
 800be98:	b1f0      	cbz	r0, 800bed8 <__d2b+0x72>
 800be9a:	9a01      	ldr	r2, [sp, #4]
 800be9c:	f1c0 0320 	rsb	r3, r0, #32
 800bea0:	fa02 f303 	lsl.w	r3, r2, r3
 800bea4:	430b      	orrs	r3, r1
 800bea6:	40c2      	lsrs	r2, r0
 800bea8:	617b      	str	r3, [r7, #20]
 800beaa:	9201      	str	r2, [sp, #4]
 800beac:	9b01      	ldr	r3, [sp, #4]
 800beae:	61bb      	str	r3, [r7, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	bf14      	ite	ne
 800beb4:	2102      	movne	r1, #2
 800beb6:	2101      	moveq	r1, #1
 800beb8:	6139      	str	r1, [r7, #16]
 800beba:	b1c4      	cbz	r4, 800beee <__d2b+0x88>
 800bebc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bec0:	4404      	add	r4, r0
 800bec2:	6034      	str	r4, [r6, #0]
 800bec4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bec8:	6028      	str	r0, [r5, #0]
 800beca:	4638      	mov	r0, r7
 800becc:	b003      	add	sp, #12
 800bece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bed6:	e7d5      	b.n	800be84 <__d2b+0x1e>
 800bed8:	6179      	str	r1, [r7, #20]
 800beda:	e7e7      	b.n	800beac <__d2b+0x46>
 800bedc:	a801      	add	r0, sp, #4
 800bede:	f7ff fddb 	bl	800ba98 <__lo0bits>
 800bee2:	9b01      	ldr	r3, [sp, #4]
 800bee4:	617b      	str	r3, [r7, #20]
 800bee6:	2101      	movs	r1, #1
 800bee8:	6139      	str	r1, [r7, #16]
 800beea:	3020      	adds	r0, #32
 800beec:	e7e5      	b.n	800beba <__d2b+0x54>
 800beee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bef2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bef6:	6030      	str	r0, [r6, #0]
 800bef8:	6918      	ldr	r0, [r3, #16]
 800befa:	f7ff fdae 	bl	800ba5a <__hi0bits>
 800befe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bf02:	e7e1      	b.n	800bec8 <__d2b+0x62>

0800bf04 <_calloc_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	fb02 f401 	mul.w	r4, r2, r1
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	f7fd fe72 	bl	8009bf4 <_malloc_r>
 800bf10:	4605      	mov	r5, r0
 800bf12:	b118      	cbz	r0, 800bf1c <_calloc_r+0x18>
 800bf14:	4622      	mov	r2, r4
 800bf16:	2100      	movs	r1, #0
 800bf18:	f7fd fe15 	bl	8009b46 <memset>
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	bd38      	pop	{r3, r4, r5, pc}

0800bf20 <_realloc_r>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	4607      	mov	r7, r0
 800bf24:	4614      	mov	r4, r2
 800bf26:	460e      	mov	r6, r1
 800bf28:	b921      	cbnz	r1, 800bf34 <_realloc_r+0x14>
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf30:	f7fd be60 	b.w	8009bf4 <_malloc_r>
 800bf34:	b922      	cbnz	r2, 800bf40 <_realloc_r+0x20>
 800bf36:	f7fd fe0f 	bl	8009b58 <_free_r>
 800bf3a:	4625      	mov	r5, r4
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf40:	f000 fa56 	bl	800c3f0 <_malloc_usable_size_r>
 800bf44:	42a0      	cmp	r0, r4
 800bf46:	d20f      	bcs.n	800bf68 <_realloc_r+0x48>
 800bf48:	4621      	mov	r1, r4
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	f7fd fe52 	bl	8009bf4 <_malloc_r>
 800bf50:	4605      	mov	r5, r0
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d0f2      	beq.n	800bf3c <_realloc_r+0x1c>
 800bf56:	4631      	mov	r1, r6
 800bf58:	4622      	mov	r2, r4
 800bf5a:	f7fd fde9 	bl	8009b30 <memcpy>
 800bf5e:	4631      	mov	r1, r6
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7fd fdf9 	bl	8009b58 <_free_r>
 800bf66:	e7e9      	b.n	800bf3c <_realloc_r+0x1c>
 800bf68:	4635      	mov	r5, r6
 800bf6a:	e7e7      	b.n	800bf3c <_realloc_r+0x1c>

0800bf6c <__ssputs_r>:
 800bf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf70:	688e      	ldr	r6, [r1, #8]
 800bf72:	429e      	cmp	r6, r3
 800bf74:	4682      	mov	sl, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	4690      	mov	r8, r2
 800bf7a:	4699      	mov	r9, r3
 800bf7c:	d837      	bhi.n	800bfee <__ssputs_r+0x82>
 800bf7e:	898a      	ldrh	r2, [r1, #12]
 800bf80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf84:	d031      	beq.n	800bfea <__ssputs_r+0x7e>
 800bf86:	6825      	ldr	r5, [r4, #0]
 800bf88:	6909      	ldr	r1, [r1, #16]
 800bf8a:	1a6f      	subs	r7, r5, r1
 800bf8c:	6965      	ldr	r5, [r4, #20]
 800bf8e:	2302      	movs	r3, #2
 800bf90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf94:	fb95 f5f3 	sdiv	r5, r5, r3
 800bf98:	f109 0301 	add.w	r3, r9, #1
 800bf9c:	443b      	add	r3, r7
 800bf9e:	429d      	cmp	r5, r3
 800bfa0:	bf38      	it	cc
 800bfa2:	461d      	movcc	r5, r3
 800bfa4:	0553      	lsls	r3, r2, #21
 800bfa6:	d530      	bpl.n	800c00a <__ssputs_r+0x9e>
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	f7fd fe23 	bl	8009bf4 <_malloc_r>
 800bfae:	4606      	mov	r6, r0
 800bfb0:	b950      	cbnz	r0, 800bfc8 <__ssputs_r+0x5c>
 800bfb2:	230c      	movs	r3, #12
 800bfb4:	f8ca 3000 	str.w	r3, [sl]
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfbe:	81a3      	strh	r3, [r4, #12]
 800bfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc8:	463a      	mov	r2, r7
 800bfca:	6921      	ldr	r1, [r4, #16]
 800bfcc:	f7fd fdb0 	bl	8009b30 <memcpy>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	6126      	str	r6, [r4, #16]
 800bfde:	6165      	str	r5, [r4, #20]
 800bfe0:	443e      	add	r6, r7
 800bfe2:	1bed      	subs	r5, r5, r7
 800bfe4:	6026      	str	r6, [r4, #0]
 800bfe6:	60a5      	str	r5, [r4, #8]
 800bfe8:	464e      	mov	r6, r9
 800bfea:	454e      	cmp	r6, r9
 800bfec:	d900      	bls.n	800bff0 <__ssputs_r+0x84>
 800bfee:	464e      	mov	r6, r9
 800bff0:	4632      	mov	r2, r6
 800bff2:	4641      	mov	r1, r8
 800bff4:	6820      	ldr	r0, [r4, #0]
 800bff6:	f7ff fc8f 	bl	800b918 <memmove>
 800bffa:	68a3      	ldr	r3, [r4, #8]
 800bffc:	1b9b      	subs	r3, r3, r6
 800bffe:	60a3      	str	r3, [r4, #8]
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	441e      	add	r6, r3
 800c004:	6026      	str	r6, [r4, #0]
 800c006:	2000      	movs	r0, #0
 800c008:	e7dc      	b.n	800bfc4 <__ssputs_r+0x58>
 800c00a:	462a      	mov	r2, r5
 800c00c:	f7ff ff88 	bl	800bf20 <_realloc_r>
 800c010:	4606      	mov	r6, r0
 800c012:	2800      	cmp	r0, #0
 800c014:	d1e2      	bne.n	800bfdc <__ssputs_r+0x70>
 800c016:	6921      	ldr	r1, [r4, #16]
 800c018:	4650      	mov	r0, sl
 800c01a:	f7fd fd9d 	bl	8009b58 <_free_r>
 800c01e:	e7c8      	b.n	800bfb2 <__ssputs_r+0x46>

0800c020 <_svfiprintf_r>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	461d      	mov	r5, r3
 800c026:	898b      	ldrh	r3, [r1, #12]
 800c028:	061f      	lsls	r7, r3, #24
 800c02a:	b09d      	sub	sp, #116	; 0x74
 800c02c:	4680      	mov	r8, r0
 800c02e:	460c      	mov	r4, r1
 800c030:	4616      	mov	r6, r2
 800c032:	d50f      	bpl.n	800c054 <_svfiprintf_r+0x34>
 800c034:	690b      	ldr	r3, [r1, #16]
 800c036:	b96b      	cbnz	r3, 800c054 <_svfiprintf_r+0x34>
 800c038:	2140      	movs	r1, #64	; 0x40
 800c03a:	f7fd fddb 	bl	8009bf4 <_malloc_r>
 800c03e:	6020      	str	r0, [r4, #0]
 800c040:	6120      	str	r0, [r4, #16]
 800c042:	b928      	cbnz	r0, 800c050 <_svfiprintf_r+0x30>
 800c044:	230c      	movs	r3, #12
 800c046:	f8c8 3000 	str.w	r3, [r8]
 800c04a:	f04f 30ff 	mov.w	r0, #4294967295
 800c04e:	e0c8      	b.n	800c1e2 <_svfiprintf_r+0x1c2>
 800c050:	2340      	movs	r3, #64	; 0x40
 800c052:	6163      	str	r3, [r4, #20]
 800c054:	2300      	movs	r3, #0
 800c056:	9309      	str	r3, [sp, #36]	; 0x24
 800c058:	2320      	movs	r3, #32
 800c05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c05e:	2330      	movs	r3, #48	; 0x30
 800c060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c064:	9503      	str	r5, [sp, #12]
 800c066:	f04f 0b01 	mov.w	fp, #1
 800c06a:	4637      	mov	r7, r6
 800c06c:	463d      	mov	r5, r7
 800c06e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c072:	b10b      	cbz	r3, 800c078 <_svfiprintf_r+0x58>
 800c074:	2b25      	cmp	r3, #37	; 0x25
 800c076:	d13e      	bne.n	800c0f6 <_svfiprintf_r+0xd6>
 800c078:	ebb7 0a06 	subs.w	sl, r7, r6
 800c07c:	d00b      	beq.n	800c096 <_svfiprintf_r+0x76>
 800c07e:	4653      	mov	r3, sl
 800c080:	4632      	mov	r2, r6
 800c082:	4621      	mov	r1, r4
 800c084:	4640      	mov	r0, r8
 800c086:	f7ff ff71 	bl	800bf6c <__ssputs_r>
 800c08a:	3001      	adds	r0, #1
 800c08c:	f000 80a4 	beq.w	800c1d8 <_svfiprintf_r+0x1b8>
 800c090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c092:	4453      	add	r3, sl
 800c094:	9309      	str	r3, [sp, #36]	; 0x24
 800c096:	783b      	ldrb	r3, [r7, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 809d 	beq.w	800c1d8 <_svfiprintf_r+0x1b8>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0a8:	9304      	str	r3, [sp, #16]
 800c0aa:	9307      	str	r3, [sp, #28]
 800c0ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c0b2:	462f      	mov	r7, r5
 800c0b4:	2205      	movs	r2, #5
 800c0b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c0ba:	4850      	ldr	r0, [pc, #320]	; (800c1fc <_svfiprintf_r+0x1dc>)
 800c0bc:	f7f4 f8c8 	bl	8000250 <memchr>
 800c0c0:	9b04      	ldr	r3, [sp, #16]
 800c0c2:	b9d0      	cbnz	r0, 800c0fa <_svfiprintf_r+0xda>
 800c0c4:	06d9      	lsls	r1, r3, #27
 800c0c6:	bf44      	itt	mi
 800c0c8:	2220      	movmi	r2, #32
 800c0ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c0ce:	071a      	lsls	r2, r3, #28
 800c0d0:	bf44      	itt	mi
 800c0d2:	222b      	movmi	r2, #43	; 0x2b
 800c0d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c0d8:	782a      	ldrb	r2, [r5, #0]
 800c0da:	2a2a      	cmp	r2, #42	; 0x2a
 800c0dc:	d015      	beq.n	800c10a <_svfiprintf_r+0xea>
 800c0de:	9a07      	ldr	r2, [sp, #28]
 800c0e0:	462f      	mov	r7, r5
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	250a      	movs	r5, #10
 800c0e6:	4639      	mov	r1, r7
 800c0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0ec:	3b30      	subs	r3, #48	; 0x30
 800c0ee:	2b09      	cmp	r3, #9
 800c0f0:	d94d      	bls.n	800c18e <_svfiprintf_r+0x16e>
 800c0f2:	b1b8      	cbz	r0, 800c124 <_svfiprintf_r+0x104>
 800c0f4:	e00f      	b.n	800c116 <_svfiprintf_r+0xf6>
 800c0f6:	462f      	mov	r7, r5
 800c0f8:	e7b8      	b.n	800c06c <_svfiprintf_r+0x4c>
 800c0fa:	4a40      	ldr	r2, [pc, #256]	; (800c1fc <_svfiprintf_r+0x1dc>)
 800c0fc:	1a80      	subs	r0, r0, r2
 800c0fe:	fa0b f000 	lsl.w	r0, fp, r0
 800c102:	4318      	orrs	r0, r3
 800c104:	9004      	str	r0, [sp, #16]
 800c106:	463d      	mov	r5, r7
 800c108:	e7d3      	b.n	800c0b2 <_svfiprintf_r+0x92>
 800c10a:	9a03      	ldr	r2, [sp, #12]
 800c10c:	1d11      	adds	r1, r2, #4
 800c10e:	6812      	ldr	r2, [r2, #0]
 800c110:	9103      	str	r1, [sp, #12]
 800c112:	2a00      	cmp	r2, #0
 800c114:	db01      	blt.n	800c11a <_svfiprintf_r+0xfa>
 800c116:	9207      	str	r2, [sp, #28]
 800c118:	e004      	b.n	800c124 <_svfiprintf_r+0x104>
 800c11a:	4252      	negs	r2, r2
 800c11c:	f043 0302 	orr.w	r3, r3, #2
 800c120:	9207      	str	r2, [sp, #28]
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	783b      	ldrb	r3, [r7, #0]
 800c126:	2b2e      	cmp	r3, #46	; 0x2e
 800c128:	d10c      	bne.n	800c144 <_svfiprintf_r+0x124>
 800c12a:	787b      	ldrb	r3, [r7, #1]
 800c12c:	2b2a      	cmp	r3, #42	; 0x2a
 800c12e:	d133      	bne.n	800c198 <_svfiprintf_r+0x178>
 800c130:	9b03      	ldr	r3, [sp, #12]
 800c132:	1d1a      	adds	r2, r3, #4
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	9203      	str	r2, [sp, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	bfb8      	it	lt
 800c13c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c140:	3702      	adds	r7, #2
 800c142:	9305      	str	r3, [sp, #20]
 800c144:	4d2e      	ldr	r5, [pc, #184]	; (800c200 <_svfiprintf_r+0x1e0>)
 800c146:	7839      	ldrb	r1, [r7, #0]
 800c148:	2203      	movs	r2, #3
 800c14a:	4628      	mov	r0, r5
 800c14c:	f7f4 f880 	bl	8000250 <memchr>
 800c150:	b138      	cbz	r0, 800c162 <_svfiprintf_r+0x142>
 800c152:	2340      	movs	r3, #64	; 0x40
 800c154:	1b40      	subs	r0, r0, r5
 800c156:	fa03 f000 	lsl.w	r0, r3, r0
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	4303      	orrs	r3, r0
 800c15e:	3701      	adds	r7, #1
 800c160:	9304      	str	r3, [sp, #16]
 800c162:	7839      	ldrb	r1, [r7, #0]
 800c164:	4827      	ldr	r0, [pc, #156]	; (800c204 <_svfiprintf_r+0x1e4>)
 800c166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c16a:	2206      	movs	r2, #6
 800c16c:	1c7e      	adds	r6, r7, #1
 800c16e:	f7f4 f86f 	bl	8000250 <memchr>
 800c172:	2800      	cmp	r0, #0
 800c174:	d038      	beq.n	800c1e8 <_svfiprintf_r+0x1c8>
 800c176:	4b24      	ldr	r3, [pc, #144]	; (800c208 <_svfiprintf_r+0x1e8>)
 800c178:	bb13      	cbnz	r3, 800c1c0 <_svfiprintf_r+0x1a0>
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	3307      	adds	r3, #7
 800c17e:	f023 0307 	bic.w	r3, r3, #7
 800c182:	3308      	adds	r3, #8
 800c184:	9303      	str	r3, [sp, #12]
 800c186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c188:	444b      	add	r3, r9
 800c18a:	9309      	str	r3, [sp, #36]	; 0x24
 800c18c:	e76d      	b.n	800c06a <_svfiprintf_r+0x4a>
 800c18e:	fb05 3202 	mla	r2, r5, r2, r3
 800c192:	2001      	movs	r0, #1
 800c194:	460f      	mov	r7, r1
 800c196:	e7a6      	b.n	800c0e6 <_svfiprintf_r+0xc6>
 800c198:	2300      	movs	r3, #0
 800c19a:	3701      	adds	r7, #1
 800c19c:	9305      	str	r3, [sp, #20]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	250a      	movs	r5, #10
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1a8:	3a30      	subs	r2, #48	; 0x30
 800c1aa:	2a09      	cmp	r2, #9
 800c1ac:	d903      	bls.n	800c1b6 <_svfiprintf_r+0x196>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d0c8      	beq.n	800c144 <_svfiprintf_r+0x124>
 800c1b2:	9105      	str	r1, [sp, #20]
 800c1b4:	e7c6      	b.n	800c144 <_svfiprintf_r+0x124>
 800c1b6:	fb05 2101 	mla	r1, r5, r1, r2
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	4607      	mov	r7, r0
 800c1be:	e7f0      	b.n	800c1a2 <_svfiprintf_r+0x182>
 800c1c0:	ab03      	add	r3, sp, #12
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	4b11      	ldr	r3, [pc, #68]	; (800c20c <_svfiprintf_r+0x1ec>)
 800c1c8:	a904      	add	r1, sp, #16
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	f7fd ff34 	bl	800a038 <_printf_float>
 800c1d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c1d4:	4681      	mov	r9, r0
 800c1d6:	d1d6      	bne.n	800c186 <_svfiprintf_r+0x166>
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	065b      	lsls	r3, r3, #25
 800c1dc:	f53f af35 	bmi.w	800c04a <_svfiprintf_r+0x2a>
 800c1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1e2:	b01d      	add	sp, #116	; 0x74
 800c1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e8:	ab03      	add	r3, sp, #12
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	4b07      	ldr	r3, [pc, #28]	; (800c20c <_svfiprintf_r+0x1ec>)
 800c1f0:	a904      	add	r1, sp, #16
 800c1f2:	4640      	mov	r0, r8
 800c1f4:	f7fe f9c2 	bl	800a57c <_printf_i>
 800c1f8:	e7ea      	b.n	800c1d0 <_svfiprintf_r+0x1b0>
 800c1fa:	bf00      	nop
 800c1fc:	0800c7b8 	.word	0x0800c7b8
 800c200:	0800c7be 	.word	0x0800c7be
 800c204:	0800c7c2 	.word	0x0800c7c2
 800c208:	0800a039 	.word	0x0800a039
 800c20c:	0800bf6d 	.word	0x0800bf6d

0800c210 <_raise_r>:
 800c210:	291f      	cmp	r1, #31
 800c212:	b538      	push	{r3, r4, r5, lr}
 800c214:	4604      	mov	r4, r0
 800c216:	460d      	mov	r5, r1
 800c218:	d904      	bls.n	800c224 <_raise_r+0x14>
 800c21a:	2316      	movs	r3, #22
 800c21c:	6003      	str	r3, [r0, #0]
 800c21e:	f04f 30ff 	mov.w	r0, #4294967295
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c226:	b112      	cbz	r2, 800c22e <_raise_r+0x1e>
 800c228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c22c:	b94b      	cbnz	r3, 800c242 <_raise_r+0x32>
 800c22e:	4620      	mov	r0, r4
 800c230:	f000 f830 	bl	800c294 <_getpid_r>
 800c234:	462a      	mov	r2, r5
 800c236:	4601      	mov	r1, r0
 800c238:	4620      	mov	r0, r4
 800c23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c23e:	f000 b817 	b.w	800c270 <_kill_r>
 800c242:	2b01      	cmp	r3, #1
 800c244:	d00a      	beq.n	800c25c <_raise_r+0x4c>
 800c246:	1c59      	adds	r1, r3, #1
 800c248:	d103      	bne.n	800c252 <_raise_r+0x42>
 800c24a:	2316      	movs	r3, #22
 800c24c:	6003      	str	r3, [r0, #0]
 800c24e:	2001      	movs	r0, #1
 800c250:	e7e7      	b.n	800c222 <_raise_r+0x12>
 800c252:	2400      	movs	r4, #0
 800c254:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c258:	4628      	mov	r0, r5
 800c25a:	4798      	blx	r3
 800c25c:	2000      	movs	r0, #0
 800c25e:	e7e0      	b.n	800c222 <_raise_r+0x12>

0800c260 <raise>:
 800c260:	4b02      	ldr	r3, [pc, #8]	; (800c26c <raise+0xc>)
 800c262:	4601      	mov	r1, r0
 800c264:	6818      	ldr	r0, [r3, #0]
 800c266:	f7ff bfd3 	b.w	800c210 <_raise_r>
 800c26a:	bf00      	nop
 800c26c:	20000010 	.word	0x20000010

0800c270 <_kill_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4c07      	ldr	r4, [pc, #28]	; (800c290 <_kill_r+0x20>)
 800c274:	2300      	movs	r3, #0
 800c276:	4605      	mov	r5, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	4611      	mov	r1, r2
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	f7f5 fec1 	bl	8002004 <_kill>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	d102      	bne.n	800c28c <_kill_r+0x1c>
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	b103      	cbz	r3, 800c28c <_kill_r+0x1c>
 800c28a:	602b      	str	r3, [r5, #0]
 800c28c:	bd38      	pop	{r3, r4, r5, pc}
 800c28e:	bf00      	nop
 800c290:	20004e28 	.word	0x20004e28

0800c294 <_getpid_r>:
 800c294:	f7f5 beae 	b.w	8001ff4 <_getpid>

0800c298 <__sread>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	460c      	mov	r4, r1
 800c29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a0:	f000 f8ae 	bl	800c400 <_read_r>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	bfab      	itete	ge
 800c2a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c2ac:	181b      	addge	r3, r3, r0
 800c2ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2b2:	bfac      	ite	ge
 800c2b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2b6:	81a3      	strhlt	r3, [r4, #12]
 800c2b8:	bd10      	pop	{r4, pc}

0800c2ba <__swrite>:
 800c2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2be:	461f      	mov	r7, r3
 800c2c0:	898b      	ldrh	r3, [r1, #12]
 800c2c2:	05db      	lsls	r3, r3, #23
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	4616      	mov	r6, r2
 800c2ca:	d505      	bpl.n	800c2d8 <__swrite+0x1e>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d4:	f000 f868 	bl	800c3a8 <_lseek_r>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	4632      	mov	r2, r6
 800c2e6:	463b      	mov	r3, r7
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ee:	f000 b817 	b.w	800c320 <_write_r>

0800c2f2 <__sseek>:
 800c2f2:	b510      	push	{r4, lr}
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fa:	f000 f855 	bl	800c3a8 <_lseek_r>
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	bf15      	itete	ne
 800c304:	6560      	strne	r0, [r4, #84]	; 0x54
 800c306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c30a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c30e:	81a3      	strheq	r3, [r4, #12]
 800c310:	bf18      	it	ne
 800c312:	81a3      	strhne	r3, [r4, #12]
 800c314:	bd10      	pop	{r4, pc}

0800c316 <__sclose>:
 800c316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c31a:	f000 b813 	b.w	800c344 <_close_r>
	...

0800c320 <_write_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4c07      	ldr	r4, [pc, #28]	; (800c340 <_write_r+0x20>)
 800c324:	4605      	mov	r5, r0
 800c326:	4608      	mov	r0, r1
 800c328:	4611      	mov	r1, r2
 800c32a:	2200      	movs	r2, #0
 800c32c:	6022      	str	r2, [r4, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	f7f5 fe9f 	bl	8002072 <_write>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d102      	bne.n	800c33e <_write_r+0x1e>
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	b103      	cbz	r3, 800c33e <_write_r+0x1e>
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	bd38      	pop	{r3, r4, r5, pc}
 800c340:	20004e28 	.word	0x20004e28

0800c344 <_close_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4c06      	ldr	r4, [pc, #24]	; (800c360 <_close_r+0x1c>)
 800c348:	2300      	movs	r3, #0
 800c34a:	4605      	mov	r5, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	f7f5 feab 	bl	80020aa <_close>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d102      	bne.n	800c35e <_close_r+0x1a>
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	b103      	cbz	r3, 800c35e <_close_r+0x1a>
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	20004e28 	.word	0x20004e28

0800c364 <_fstat_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4c07      	ldr	r4, [pc, #28]	; (800c384 <_fstat_r+0x20>)
 800c368:	2300      	movs	r3, #0
 800c36a:	4605      	mov	r5, r0
 800c36c:	4608      	mov	r0, r1
 800c36e:	4611      	mov	r1, r2
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	f7f5 fea6 	bl	80020c2 <_fstat>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d102      	bne.n	800c380 <_fstat_r+0x1c>
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	b103      	cbz	r3, 800c380 <_fstat_r+0x1c>
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	bd38      	pop	{r3, r4, r5, pc}
 800c382:	bf00      	nop
 800c384:	20004e28 	.word	0x20004e28

0800c388 <_isatty_r>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	4c06      	ldr	r4, [pc, #24]	; (800c3a4 <_isatty_r+0x1c>)
 800c38c:	2300      	movs	r3, #0
 800c38e:	4605      	mov	r5, r0
 800c390:	4608      	mov	r0, r1
 800c392:	6023      	str	r3, [r4, #0]
 800c394:	f7f5 fea5 	bl	80020e2 <_isatty>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_isatty_r+0x1a>
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_isatty_r+0x1a>
 800c3a0:	602b      	str	r3, [r5, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	20004e28 	.word	0x20004e28

0800c3a8 <_lseek_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4c07      	ldr	r4, [pc, #28]	; (800c3c8 <_lseek_r+0x20>)
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	4608      	mov	r0, r1
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	6022      	str	r2, [r4, #0]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f7f5 fe9e 	bl	80020f8 <_lseek>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	d102      	bne.n	800c3c6 <_lseek_r+0x1e>
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	b103      	cbz	r3, 800c3c6 <_lseek_r+0x1e>
 800c3c4:	602b      	str	r3, [r5, #0]
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	20004e28 	.word	0x20004e28

0800c3cc <__ascii_mbtowc>:
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	b901      	cbnz	r1, 800c3d2 <__ascii_mbtowc+0x6>
 800c3d0:	a901      	add	r1, sp, #4
 800c3d2:	b142      	cbz	r2, 800c3e6 <__ascii_mbtowc+0x1a>
 800c3d4:	b14b      	cbz	r3, 800c3ea <__ascii_mbtowc+0x1e>
 800c3d6:	7813      	ldrb	r3, [r2, #0]
 800c3d8:	600b      	str	r3, [r1, #0]
 800c3da:	7812      	ldrb	r2, [r2, #0]
 800c3dc:	1c10      	adds	r0, r2, #0
 800c3de:	bf18      	it	ne
 800c3e0:	2001      	movne	r0, #1
 800c3e2:	b002      	add	sp, #8
 800c3e4:	4770      	bx	lr
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	e7fb      	b.n	800c3e2 <__ascii_mbtowc+0x16>
 800c3ea:	f06f 0001 	mvn.w	r0, #1
 800c3ee:	e7f8      	b.n	800c3e2 <__ascii_mbtowc+0x16>

0800c3f0 <_malloc_usable_size_r>:
 800c3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3f4:	1f18      	subs	r0, r3, #4
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	bfbc      	itt	lt
 800c3fa:	580b      	ldrlt	r3, [r1, r0]
 800c3fc:	18c0      	addlt	r0, r0, r3
 800c3fe:	4770      	bx	lr

0800c400 <_read_r>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	4c07      	ldr	r4, [pc, #28]	; (800c420 <_read_r+0x20>)
 800c404:	4605      	mov	r5, r0
 800c406:	4608      	mov	r0, r1
 800c408:	4611      	mov	r1, r2
 800c40a:	2200      	movs	r2, #0
 800c40c:	6022      	str	r2, [r4, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	f7f5 fe12 	bl	8002038 <_read>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_read_r+0x1e>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_read_r+0x1e>
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	20004e28 	.word	0x20004e28

0800c424 <__ascii_wctomb>:
 800c424:	b149      	cbz	r1, 800c43a <__ascii_wctomb+0x16>
 800c426:	2aff      	cmp	r2, #255	; 0xff
 800c428:	bf85      	ittet	hi
 800c42a:	238a      	movhi	r3, #138	; 0x8a
 800c42c:	6003      	strhi	r3, [r0, #0]
 800c42e:	700a      	strbls	r2, [r1, #0]
 800c430:	f04f 30ff 	movhi.w	r0, #4294967295
 800c434:	bf98      	it	ls
 800c436:	2001      	movls	r0, #1
 800c438:	4770      	bx	lr
 800c43a:	4608      	mov	r0, r1
 800c43c:	4770      	bx	lr
	...

0800c440 <_init>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	bf00      	nop
 800c444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c446:	bc08      	pop	{r3}
 800c448:	469e      	mov	lr, r3
 800c44a:	4770      	bx	lr

0800c44c <_fini>:
 800c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44e:	bf00      	nop
 800c450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c452:	bc08      	pop	{r3}
 800c454:	469e      	mov	lr, r3
 800c456:	4770      	bx	lr
